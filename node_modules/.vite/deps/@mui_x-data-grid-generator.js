import {
  Autorenew_default,
  Done_default,
  Info_default,
  ReportProblem_default
} from "./chunk-35DJUTYP.js";
import {
  DATA_GRID_DEFAULT_SLOTS_COMPONENTS,
  DATA_GRID_PROPS_DEFAULT_VALUES,
  EMPTY_DETAIL_PANELS,
  GRID_ACTIONS_COLUMN_TYPE,
  GRID_CHECKBOX_SELECTION_COL_DEF,
  GRID_CHECKBOX_SELECTION_FIELD,
  GRID_COLUMN_MENU_SLOTS,
  GRID_COLUMN_MENU_SLOT_PROPS,
  GRID_DATETIME_COL_DEF,
  GRID_DATE_COL_DEF,
  GRID_DEFAULT_LOCALE_TEXT,
  GRID_DETAIL_PANEL_TOGGLE_FIELD,
  GRID_ID_AUTOGENERATED,
  GRID_ROOT_GROUP_ID,
  GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD,
  GRID_STRING_COL_DEF,
  GRID_TREE_DATA_GROUPING_FIELD,
  GridBaseColumnHeaders,
  GridColumnHeaderRow,
  GridColumnHeaderTitle,
  GridContextProvider,
  GridEditModes,
  GridFilterInputBoolean,
  GridFilterInputDate,
  GridFilterInputSingleSelect,
  GridFilterInputValue,
  GridGenericColumnMenu,
  GridLogicOperator,
  GridMenu,
  GridPinnedColumnPosition,
  GridSignature,
  MemoizedGridRoot,
  PinnedColumnPosition,
  ROW_SELECTION_PROPAGATION_DEFAULT,
  attachPinnedStyle,
  buildRootGroup,
  columnGroupsStateInitializer,
  columnMenuStateInitializer,
  columnResizeStateInitializer,
  columnsStateInitializer,
  computeSlots,
  createSelector,
  createSelectorMemoized,
  createSelectorV8,
  defaultGetRowsToExport,
  defaultGridFilterLookup,
  densityStateInitializer,
  dimensionsStateInitializer,
  editingStateInitializer,
  exportAs,
  fastMemo,
  filterStateInitializer,
  focusStateInitializer,
  forwardRef,
  getActiveElement,
  getColumnsToExport,
  getDataGridUtilityClass,
  getGridDefaultColumnTypes,
  getGridFilter,
  getPublicApiRef,
  getRowGroupingCriteriaFromGroupingField,
  getRowIdFromRowModel,
  getTotalHeaderHeight,
  getTreeNodeDescendants,
  getVisibleRows,
  gridClasses,
  gridColumnFieldsSelector,
  gridColumnLookupSelector,
  gridColumnPositionsSelector,
  gridColumnVisibilityModelSelector,
  gridColumnsTotalWidthSelector,
  gridDataRowIdsSelector,
  gridDimensionsSelector,
  gridEditRowsStateSelector,
  gridExpandedSortedRowIdsSelector,
  gridExpandedSortedRowTreeLevelPositionLookupSelector,
  gridFilterModelSelector,
  gridFilterableColumnLookupSelector,
  gridFilteredChildrenCountLookupSelector,
  gridFilteredDescendantCountLookupSelector,
  gridFilteredRowsLookupSelector,
  gridFilteredTopLevelRowCountSelector,
  gridFocusCellSelector,
  gridFocusColumnHeaderFilterSelector,
  gridHasColSpanSelector,
  gridHasFillerSelector,
  gridHeaderFilterHeightSelector,
  gridHeaderFilteringEditFieldSelector,
  gridHeaderFilteringMenuSelector,
  gridHorizontalScrollbarHeightSelector,
  gridPaginatedVisibleSortedGridRowIdsSelector,
  gridPaginationModelSelector,
  gridPinnedColumnsSelector,
  gridPinnedRowsSelector,
  gridRenderContextSelector,
  gridRowGroupsToFetchSelector,
  gridRowMaximumTreeDepthSelector,
  gridRowTreeSelector,
  gridRowsDataRowIdToIdLookupSelector,
  gridRowsLoadingSelector,
  gridSortModelSelector,
  gridSortedRowIdsSelector,
  gridSortedRowIndexLookupSelector,
  gridStringOrNumberComparator,
  gridTabIndexColumnHeaderFilterSelector,
  gridVerticalScrollbarWidthSelector,
  gridVisibleColumnDefinitionsSelector,
  gridVisibleColumnFieldsSelector,
  gridVisiblePinnedColumnDefinitionsSelector,
  isDeepEqual,
  isEventTargetInPortal,
  isGroupingColumn,
  isNavigationKey,
  isNumber,
  isObject,
  isPasteShortcut,
  isSingleSelectColDef,
  listViewStateInitializer,
  paginationStateInitializer,
  passFilterLogic,
  preferencePanelStateInitializer,
  propValidatorsDataGrid,
  rowSelectionStateInitializer,
  rowSpanningStateInitializer,
  rowsMetaStateInitializer,
  rowsStateInitializer,
  serializeCellValue,
  shouldCellShowLeftBorder,
  shouldCellShowRightBorder,
  sortingStateInitializer,
  toPropertyKey,
  useFirstRender,
  useGridApiContext,
  useGridApiEventHandler,
  useGridApiMethod,
  useGridApiOptionHandler,
  useGridAriaAttributes,
  useGridClipboard,
  useGridColumnGrouping,
  useGridColumnHeaders,
  useGridColumnMenu,
  useGridColumnResize,
  useGridColumnSpanning,
  useGridColumns,
  useGridCsvExport,
  useGridDensity,
  useGridDimensions,
  useGridEditing,
  useGridEvents,
  useGridFilter,
  useGridFocus,
  useGridInitialization,
  useGridInitializeState,
  useGridKeyboardNavigation,
  useGridListView,
  useGridLogger,
  useGridPagination,
  useGridParamsApi,
  useGridPreferencesPanel,
  useGridPrintExport,
  useGridPrivateApiContext,
  useGridRegisterPipeProcessor,
  useGridRegisterStrategyProcessor,
  useGridRootProps,
  useGridRowAriaAttributes,
  useGridRowSelection,
  useGridRowSelectionPreProcessors,
  useGridRowSpanning,
  useGridRows,
  useGridRowsMeta,
  useGridRowsPreProcessors,
  useGridScroll,
  useGridSelector,
  useGridSelectorV8,
  useGridSorting,
  useGridStatePersistence,
  useGridVirtualization,
  useGridVisibleRows,
  useProps,
  validateProps,
  virtualizationStateInitializer,
  warnOnce
} from "./chunk-RLH6CUKP.js";
import {
  Avatar_default,
  Rating_default,
  Slider_default,
  pink_default,
  sliderClasses_default
} from "./chunk-BQRULANR.js";
import {
  Box_default
} from "./chunk-THOM3ND3.js";
import {
  Autocomplete_default,
  Chip_default,
  FormControl_default,
  InputBase_default,
  InputLabel_default,
  ListItemIcon_default,
  ListItemText_default,
  MenuItem_default,
  MenuList_default,
  Select_default,
  Tooltip_default,
  autocompleteClasses_default
} from "./chunk-PQJIWSN4.js";
import {
  useThemeProps
} from "./chunk-OEJGYXCG.js";
import {
  CircularProgress_default,
  _objectWithoutPropertiesLoose
} from "./chunk-YQMGMLGP.js";
import "./chunk-GV5TX6MA.js";
import "./chunk-AACZXOME.js";
import "./chunk-MUYQS5ZK.js";
import "./chunk-C6WWHQR7.js";
import {
  createSvgIcon,
  ownerDocument_default,
  useEventCallback_default as useEventCallback_default2
} from "./chunk-M7JPK7UY.js";
import "./chunk-XC75DAZE.js";
import {
  HTMLElementType,
  _extends,
  alpha,
  blue_default,
  capitalize,
  clsx_default,
  composeClasses,
  debounce,
  green_default,
  lightBlue_default,
  orange_default,
  ponyfillGlobal_default,
  purple_default,
  red_default,
  refType_default,
  require_prop_types,
  styled_default,
  styled_default2,
  useEnhancedEffect_default,
  useEventCallback_default,
  useForkRef,
  useId,
  useLazyRef,
  useRtl,
  useTimeout
} from "./chunk-LI4UVGIF.js";
import {
  require_jsx_runtime
} from "./chunk-L7VO4W5A.js";
import {
  require_react
} from "./chunk-AW4LUYTZ.js";
import {
  __commonJS,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __privateWrapper,
  __publicField,
  __toESM
} from "./chunk-SNAQBZPT.js";

// node_modules/chance/chance.js
var require_chance = __commonJS({
  "node_modules/chance/chance.js"(exports, module) {
    (function() {
      var MAX_INT = 9007199254740992;
      var MIN_INT = -MAX_INT;
      var NUMBERS = "0123456789";
      var CHARS_LOWER = "abcdefghijklmnopqrstuvwxyz";
      var CHARS_UPPER = CHARS_LOWER.toUpperCase();
      var HEX_POOL = NUMBERS + "abcdef";
      function UnsupportedError(message) {
        this.name = "UnsupportedError";
        this.message = message || "This feature is not supported on this platform";
      }
      UnsupportedError.prototype = new Error();
      UnsupportedError.prototype.constructor = UnsupportedError;
      var slice = Array.prototype.slice;
      function Chance2(seed) {
        if (!(this instanceof Chance2)) {
          if (!seed) {
            seed = null;
          }
          return seed === null ? new Chance2() : new Chance2(seed);
        }
        if (typeof seed === "function") {
          this.random = seed;
          return this;
        }
        if (arguments.length) {
          this.seed = 0;
        }
        for (var i2 = 0; i2 < arguments.length; i2++) {
          var seedling = 0;
          if (Object.prototype.toString.call(arguments[i2]) === "[object String]") {
            for (var j = 0; j < arguments[i2].length; j++) {
              var hash = 0;
              for (var k2 = 0; k2 < arguments[i2].length; k2++) {
                hash = arguments[i2].charCodeAt(k2) + (hash << 6) + (hash << 16) - hash;
              }
              seedling += hash;
            }
          } else {
            seedling = arguments[i2];
          }
          this.seed += (arguments.length - i2) * seedling;
        }
        this.mt = this.mersenne_twister(this.seed);
        this.bimd5 = this.blueimp_md5();
        this.random = function() {
          return this.mt.random(this.seed);
        };
        return this;
      }
      Chance2.prototype.VERSION = "1.1.12";
      function initOptions(options, defaults) {
        options = options || {};
        if (defaults) {
          for (var i2 in defaults) {
            if (typeof options[i2] === "undefined") {
              options[i2] = defaults[i2];
            }
          }
        }
        return options;
      }
      function range(size) {
        return Array.apply(null, Array(size)).map(function(_, i2) {
          return i2;
        });
      }
      function testRange(test, errorMessage) {
        if (test) {
          throw new RangeError(errorMessage);
        }
      }
      var base64 = function() {
        throw new Error("No Base64 encoder available.");
      };
      (function determineBase64Encoder() {
        if (typeof btoa === "function") {
          base64 = btoa;
        } else if (typeof Buffer === "function") {
          base64 = function(input) {
            return new Buffer(input).toString("base64");
          };
        }
      })();
      Chance2.prototype.bool = function(options) {
        options = initOptions(options, { likelihood: 50 });
        testRange(
          options.likelihood < 0 || options.likelihood > 100,
          "Chance: Likelihood accepts values from 0 to 100."
        );
        return this.random() * 100 < options.likelihood;
      };
      Chance2.prototype.falsy = function(options) {
        options = initOptions(options, { pool: [false, null, 0, NaN, "", void 0] });
        var pool = options.pool, index = this.integer({ min: 0, max: pool.length - 1 }), value = pool[index];
        return value;
      };
      Chance2.prototype.animal = function(options) {
        options = initOptions(options);
        if (typeof options.type !== "undefined") {
          testRange(
            !this.get("animals")[options.type.toLowerCase()],
            "Please pick from desert, ocean, grassland, forest, zoo, pets, farm."
          );
          return this.pick(this.get("animals")[options.type.toLowerCase()]);
        }
        var animalTypeArray = ["desert", "forest", "ocean", "zoo", "farm", "pet", "grassland"];
        return this.pick(this.get("animals")[this.pick(animalTypeArray)]);
      };
      Chance2.prototype.character = function(options) {
        options = initOptions(options);
        var symbols = "!@#$%^&*()[]", letters, pool;
        if (options.casing === "lower") {
          letters = CHARS_LOWER;
        } else if (options.casing === "upper") {
          letters = CHARS_UPPER;
        } else {
          letters = CHARS_LOWER + CHARS_UPPER;
        }
        if (options.pool) {
          pool = options.pool;
        } else {
          pool = "";
          if (options.alpha) {
            pool += letters;
          }
          if (options.numeric) {
            pool += NUMBERS;
          }
          if (options.symbols) {
            pool += symbols;
          }
          if (!pool) {
            pool = letters + NUMBERS + symbols;
          }
        }
        return pool.charAt(this.natural({ max: pool.length - 1 }));
      };
      Chance2.prototype.floating = function(options) {
        options = initOptions(options, { fixed: 4 });
        testRange(
          options.fixed && options.precision,
          "Chance: Cannot specify both fixed and precision."
        );
        var num;
        var fixed = Math.pow(10, options.fixed);
        var max = MAX_INT / fixed;
        var min = -max;
        testRange(
          options.min && options.fixed && options.min < min,
          "Chance: Min specified is out of range with fixed. Min should be, at least, " + min
        );
        testRange(
          options.max && options.fixed && options.max > max,
          "Chance: Max specified is out of range with fixed. Max should be, at most, " + max
        );
        options = initOptions(options, { min, max });
        num = this.integer({ min: options.min * fixed, max: options.max * fixed });
        var num_fixed = (num / fixed).toFixed(options.fixed);
        return parseFloat(num_fixed);
      };
      Chance2.prototype.integer = function(options) {
        options = initOptions(options, { min: MIN_INT, max: MAX_INT });
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");
        return Math.floor(this.random() * (options.max - options.min + 1) + options.min);
      };
      Chance2.prototype.natural = function(options) {
        options = initOptions(options, { min: 0, max: MAX_INT });
        if (typeof options.numerals === "number") {
          testRange(options.numerals < 1, "Chance: Numerals cannot be less than one.");
          options.min = Math.pow(10, options.numerals - 1);
          options.max = Math.pow(10, options.numerals) - 1;
        }
        testRange(options.min < 0, "Chance: Min cannot be less than zero.");
        if (options.exclude) {
          testRange(!Array.isArray(options.exclude), "Chance: exclude must be an array.");
          for (var exclusionIndex in options.exclude) {
            testRange(!Number.isInteger(options.exclude[exclusionIndex]), "Chance: exclude must be numbers.");
          }
          var random2 = options.min + this.natural({ max: options.max - options.min - options.exclude.length });
          var sortedExclusions = options.exclude.sort();
          for (var sortedExclusionIndex in sortedExclusions) {
            if (random2 < sortedExclusions[sortedExclusionIndex]) {
              break;
            }
            random2++;
          }
          return random2;
        }
        return this.integer(options);
      };
      Chance2.prototype.prime = function(options) {
        options = initOptions(options, { min: 0, max: 1e4 });
        testRange(options.min < 0, "Chance: Min cannot be less than zero.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");
        var lastPrime = data.primes[data.primes.length - 1];
        if (options.max > lastPrime) {
          for (var i2 = lastPrime + 2; i2 <= options.max; ++i2) {
            if (this.is_prime(i2)) {
              data.primes.push(i2);
            }
          }
        }
        var targetPrimes = data.primes.filter(function(prime) {
          return prime >= options.min && prime <= options.max;
        });
        return this.pick(targetPrimes);
      };
      Chance2.prototype.is_prime = function(n) {
        if (n % 1 || n < 2) {
          return false;
        }
        if (n % 2 === 0) {
          return n === 2;
        }
        if (n % 3 === 0) {
          return n === 3;
        }
        var m = Math.sqrt(n);
        for (var i2 = 5; i2 <= m; i2 += 6) {
          if (n % i2 === 0 || n % (i2 + 2) === 0) {
            return false;
          }
        }
        return true;
      };
      Chance2.prototype.hex = function(options) {
        options = initOptions(options, { min: 0, max: MAX_INT, casing: "lower" });
        testRange(options.min < 0, "Chance: Min cannot be less than zero.");
        var integer = this.natural({ min: options.min, max: options.max });
        if (options.casing === "upper") {
          return integer.toString(16).toUpperCase();
        }
        return integer.toString(16);
      };
      Chance2.prototype.letter = function(options) {
        options = initOptions(options, { casing: "lower" });
        var pool = "abcdefghijklmnopqrstuvwxyz";
        var letter = this.character({ pool });
        if (options.casing === "upper") {
          letter = letter.toUpperCase();
        }
        return letter;
      };
      Chance2.prototype.string = function(options) {
        options = initOptions(options, { min: 5, max: 20 });
        if (options.length !== 0 && !options.length) {
          options.length = this.natural({ min: options.min, max: options.max });
        }
        testRange(options.length < 0, "Chance: Length cannot be less than zero.");
        var length = options.length, text = this.n(this.character, length, options);
        return text.join("");
      };
      function CopyToken(c) {
        this.c = c;
      }
      CopyToken.prototype = {
        substitute: function() {
          return this.c;
        }
      };
      function EscapeToken(c) {
        this.c = c;
      }
      EscapeToken.prototype = {
        substitute: function() {
          if (!/[{}\\]/.test(this.c)) {
            throw new Error('Invalid escape sequence: "\\' + this.c + '".');
          }
          return this.c;
        }
      };
      function ReplaceToken(c) {
        this.c = c;
      }
      ReplaceToken.prototype = {
        replacers: {
          "#": function(chance3) {
            return chance3.character({ pool: NUMBERS });
          },
          "A": function(chance3) {
            return chance3.character({ pool: CHARS_UPPER });
          },
          "a": function(chance3) {
            return chance3.character({ pool: CHARS_LOWER });
          }
        },
        substitute: function(chance3) {
          var replacer = this.replacers[this.c];
          if (!replacer) {
            throw new Error('Invalid replacement character: "' + this.c + '".');
          }
          return replacer(chance3);
        }
      };
      function parseTemplate(template) {
        var tokens = [];
        var mode = "identity";
        for (var i2 = 0; i2 < template.length; i2++) {
          var c = template[i2];
          switch (mode) {
            case "escape":
              tokens.push(new EscapeToken(c));
              mode = "identity";
              break;
            case "identity":
              if (c === "{") {
                mode = "replace";
              } else if (c === "\\") {
                mode = "escape";
              } else {
                tokens.push(new CopyToken(c));
              }
              break;
            case "replace":
              if (c === "}") {
                mode = "identity";
              } else {
                tokens.push(new ReplaceToken(c));
              }
              break;
          }
        }
        return tokens;
      }
      Chance2.prototype.template = function(template) {
        if (!template) {
          throw new Error("Template string is required");
        }
        var self2 = this;
        return parseTemplate(template).map(function(token) {
          return token.substitute(self2);
        }).join("");
      };
      Chance2.prototype.buffer = function(options) {
        if (typeof Buffer === "undefined") {
          throw new UnsupportedError("Sorry, the buffer() function is not supported on your platform");
        }
        options = initOptions(options, { length: this.natural({ min: 5, max: 20 }) });
        testRange(options.length < 0, "Chance: Length cannot be less than zero.");
        var length = options.length;
        var content = this.n(this.character, length, options);
        return Buffer.from(content);
      };
      Chance2.prototype.capitalize = function(word) {
        return word.charAt(0).toUpperCase() + word.substr(1);
      };
      Chance2.prototype.mixin = function(obj) {
        for (var func_name in obj) {
          this[func_name] = obj[func_name];
        }
        return this;
      };
      Chance2.prototype.unique = function(fn, num, options) {
        testRange(
          typeof fn !== "function",
          "Chance: The first argument must be a function."
        );
        var comparator = function(arr2, val) {
          return arr2.indexOf(val) !== -1;
        };
        if (options) {
          comparator = options.comparator || comparator;
        }
        var arr = [], count = 0, result, MAX_DUPLICATES = num * 50, params = slice.call(arguments, 2);
        while (arr.length < num) {
          var clonedParams = JSON.parse(JSON.stringify(params));
          result = fn.apply(this, clonedParams);
          if (!comparator(arr, result)) {
            arr.push(result);
            count = 0;
          }
          if (++count > MAX_DUPLICATES) {
            throw new RangeError("Chance: num is likely too large for sample set");
          }
        }
        return arr;
      };
      Chance2.prototype.n = function(fn, n) {
        testRange(
          typeof fn !== "function",
          "Chance: The first argument must be a function."
        );
        if (typeof n === "undefined") {
          n = 1;
        }
        var i2 = n, arr = [], params = slice.call(arguments, 2);
        i2 = Math.max(0, i2);
        for (null; i2--; null) {
          arr.push(fn.apply(this, params));
        }
        return arr;
      };
      Chance2.prototype.pad = function(number, width, pad) {
        pad = pad || "0";
        number = number + "";
        return number.length >= width ? number : new Array(width - number.length + 1).join(pad) + number;
      };
      Chance2.prototype.pick = function(arr, count) {
        if (arr.length === 0) {
          throw new RangeError("Chance: Cannot pick() from an empty array");
        }
        if (!count || count === 1) {
          return arr[this.natural({ max: arr.length - 1 })];
        } else {
          return this.shuffle(arr).slice(0, count);
        }
      };
      Chance2.prototype.pickone = function(arr) {
        if (arr.length === 0) {
          throw new RangeError("Chance: Cannot pickone() from an empty array");
        }
        return arr[this.natural({ max: arr.length - 1 })];
      };
      Chance2.prototype.pickset = function(arr, count) {
        if (count === 0) {
          return [];
        }
        if (arr.length === 0) {
          throw new RangeError("Chance: Cannot pickset() from an empty array");
        }
        if (count < 0) {
          throw new RangeError("Chance: Count must be a positive number");
        }
        if (!count || count === 1) {
          return [this.pickone(arr)];
        } else {
          var array = arr.slice(0);
          var end = array.length;
          return this.n(function() {
            var index = this.natural({ max: --end });
            var value = array[index];
            array[index] = array[end];
            return value;
          }, Math.min(end, count));
        }
      };
      Chance2.prototype.shuffle = function(arr) {
        var new_array = [], j = 0, length = Number(arr.length), source_indexes = range(length), last_source_index = length - 1, selected_source_index;
        for (var i2 = 0; i2 < length; i2++) {
          selected_source_index = this.natural({ max: last_source_index });
          j = source_indexes[selected_source_index];
          new_array[i2] = arr[j];
          source_indexes[selected_source_index] = source_indexes[last_source_index];
          last_source_index -= 1;
        }
        return new_array;
      };
      Chance2.prototype.weighted = function(arr, weights, trim) {
        if (arr.length !== weights.length) {
          throw new RangeError("Chance: Length of array and weights must match");
        }
        var sum = 0;
        var val;
        for (var weightIndex = 0; weightIndex < weights.length; ++weightIndex) {
          val = weights[weightIndex];
          if (isNaN(val)) {
            throw new RangeError("Chance: All weights must be numbers");
          }
          if (val > 0) {
            sum += val;
          }
        }
        if (sum === 0) {
          throw new RangeError("Chance: No valid entries in array weights");
        }
        var selected = this.random() * sum;
        var total = 0;
        var lastGoodIdx = -1;
        var chosenIdx;
        for (weightIndex = 0; weightIndex < weights.length; ++weightIndex) {
          val = weights[weightIndex];
          total += val;
          if (val > 0) {
            if (selected <= total) {
              chosenIdx = weightIndex;
              break;
            }
            lastGoodIdx = weightIndex;
          }
          if (weightIndex === weights.length - 1) {
            chosenIdx = lastGoodIdx;
          }
        }
        var chosen = arr[chosenIdx];
        trim = typeof trim === "undefined" ? false : trim;
        if (trim) {
          arr.splice(chosenIdx, 1);
          weights.splice(chosenIdx, 1);
        }
        return chosen;
      };
      Chance2.prototype.paragraph = function(options) {
        options = initOptions(options);
        var sentences = options.sentences || this.natural({ min: 3, max: 7 }), sentence_array = this.n(this.sentence, sentences), separator = options.linebreak === true ? "\n" : " ";
        return sentence_array.join(separator);
      };
      Chance2.prototype.sentence = function(options) {
        options = initOptions(options);
        var words = options.words || this.natural({ min: 12, max: 18 }), punctuation = options.punctuation, text, word_array = this.n(this.word, words);
        text = word_array.join(" ");
        text = this.capitalize(text);
        if (punctuation !== false && !/^[.?;!:]$/.test(punctuation)) {
          punctuation = ".";
        }
        if (punctuation) {
          text += punctuation;
        }
        return text;
      };
      Chance2.prototype.syllable = function(options) {
        options = initOptions(options);
        var length = options.length || this.natural({ min: 2, max: 3 }), consonants = "bcdfghjklmnprstvwz", vowels = "aeiou", all = consonants + vowels, text = "", chr;
        for (var i2 = 0; i2 < length; i2++) {
          if (i2 === 0) {
            chr = this.character({ pool: all });
          } else if (consonants.indexOf(chr) === -1) {
            chr = this.character({ pool: consonants });
          } else {
            chr = this.character({ pool: vowels });
          }
          text += chr;
        }
        if (options.capitalize) {
          text = this.capitalize(text);
        }
        return text;
      };
      Chance2.prototype.word = function(options) {
        options = initOptions(options);
        testRange(
          options.syllables && options.length,
          "Chance: Cannot specify both syllables AND length."
        );
        var syllables = options.syllables || this.natural({ min: 1, max: 3 }), text = "";
        if (options.length) {
          do {
            text += this.syllable();
          } while (text.length < options.length);
          text = text.substring(0, options.length);
        } else {
          for (var i2 = 0; i2 < syllables; i2++) {
            text += this.syllable();
          }
        }
        if (options.capitalize) {
          text = this.capitalize(text);
        }
        return text;
      };
      Chance2.prototype.emoji = function(options) {
        options = initOptions(options, { category: "all", length: 1 });
        testRange(
          options.length < 1 || BigInt(options.length) > BigInt(MAX_INT),
          "Chance: length must be between 1 and " + String(MAX_INT)
        );
        var emojis = this.get("emojis");
        if (options.category === "all") {
          options.category = this.pickone(Object.keys(emojis));
        }
        var emojisForCategory = emojis[options.category];
        testRange(
          emojisForCategory === void 0,
          "Chance: Unrecognised emoji category: [" + options.category + "]."
        );
        return this.pickset(emojisForCategory, options.length).map(function(codePoint) {
          return String.fromCodePoint(codePoint);
        }).join("");
      };
      Chance2.prototype.age = function(options) {
        options = initOptions(options);
        var ageRange;
        switch (options.type) {
          case "child":
            ageRange = { min: 0, max: 12 };
            break;
          case "teen":
            ageRange = { min: 13, max: 19 };
            break;
          case "adult":
            ageRange = { min: 18, max: 65 };
            break;
          case "senior":
            ageRange = { min: 65, max: 100 };
            break;
          case "all":
            ageRange = { min: 0, max: 100 };
            break;
          default:
            ageRange = { min: 18, max: 65 };
            break;
        }
        return this.natural(ageRange);
      };
      Chance2.prototype.birthday = function(options) {
        var age = this.age(options);
        var now = /* @__PURE__ */ new Date();
        var currentYear = now.getFullYear();
        if (options && options.type) {
          var min = /* @__PURE__ */ new Date();
          var max = /* @__PURE__ */ new Date();
          min.setFullYear(currentYear - age - 1);
          max.setFullYear(currentYear - age);
          options = initOptions(options, {
            min,
            max
          });
        } else if (options && (options.minAge !== void 0 || options.maxAge !== void 0)) {
          testRange(options.minAge < 0, "Chance: MinAge cannot be less than zero.");
          testRange(options.minAge > options.maxAge, "Chance: MinAge cannot be greater than MaxAge.");
          var minAge = options.minAge !== void 0 ? options.minAge : 0;
          var maxAge = options.maxAge !== void 0 ? options.maxAge : 100;
          var minDate = new Date(currentYear - maxAge - 1, now.getMonth(), now.getDate());
          var maxDate = new Date(currentYear - minAge, now.getMonth(), now.getDate());
          minDate.setDate(minDate.getDate() + 1);
          maxDate.setDate(maxDate.getDate() + 1);
          maxDate.setMilliseconds(maxDate.getMilliseconds() - 1);
          options = initOptions(options, {
            min: minDate,
            max: maxDate
          });
        } else {
          options = initOptions(options, {
            year: currentYear - age
          });
        }
        return this.date(options);
      };
      Chance2.prototype.cpf = function(options) {
        options = initOptions(options, {
          formatted: true
        });
        var n = this.n(this.natural, 9, { max: 9 });
        var d1 = n[8] * 2 + n[7] * 3 + n[6] * 4 + n[5] * 5 + n[4] * 6 + n[3] * 7 + n[2] * 8 + n[1] * 9 + n[0] * 10;
        d1 = 11 - d1 % 11;
        if (d1 >= 10) {
          d1 = 0;
        }
        var d2 = d1 * 2 + n[8] * 3 + n[7] * 4 + n[6] * 5 + n[5] * 6 + n[4] * 7 + n[3] * 8 + n[2] * 9 + n[1] * 10 + n[0] * 11;
        d2 = 11 - d2 % 11;
        if (d2 >= 10) {
          d2 = 0;
        }
        var cpf = "" + n[0] + n[1] + n[2] + "." + n[3] + n[4] + n[5] + "." + n[6] + n[7] + n[8] + "-" + d1 + d2;
        return options.formatted ? cpf : cpf.replace(/\D/g, "");
      };
      Chance2.prototype.cnpj = function(options) {
        options = initOptions(options, {
          formatted: true
        });
        var n = this.n(this.natural, 12, { max: 12 });
        var d1 = n[11] * 2 + n[10] * 3 + n[9] * 4 + n[8] * 5 + n[7] * 6 + n[6] * 7 + n[5] * 8 + n[4] * 9 + n[3] * 2 + n[2] * 3 + n[1] * 4 + n[0] * 5;
        d1 = 11 - d1 % 11;
        if (d1 < 2) {
          d1 = 0;
        }
        var d2 = d1 * 2 + n[11] * 3 + n[10] * 4 + n[9] * 5 + n[8] * 6 + n[7] * 7 + n[6] * 8 + n[5] * 9 + n[4] * 2 + n[3] * 3 + n[2] * 4 + n[1] * 5 + n[0] * 6;
        d2 = 11 - d2 % 11;
        if (d2 < 2) {
          d2 = 0;
        }
        var cnpj = "" + n[0] + n[1] + "." + n[2] + n[3] + n[4] + "." + n[5] + n[6] + n[7] + "/" + n[8] + n[9] + n[10] + n[11] + "-" + d1 + d2;
        return options.formatted ? cnpj : cnpj.replace(/\D/g, "");
      };
      Chance2.prototype.first = function(options) {
        options = initOptions(options, { gender: this.gender(), nationality: "en" });
        return this.pick(this.get("firstNames")[options.gender.toLowerCase()][options.nationality.toLowerCase()]);
      };
      Chance2.prototype.profession = function(options) {
        options = initOptions(options);
        if (options.rank) {
          return this.pick(["Apprentice ", "Junior ", "Senior ", "Lead "]) + this.pick(this.get("profession"));
        } else {
          return this.pick(this.get("profession"));
        }
      };
      Chance2.prototype.company = function() {
        return this.pick(this.get("company"));
      };
      Chance2.prototype.gender = function(options) {
        options = initOptions(options, { extraGenders: [] });
        return this.pick(["Male", "Female"].concat(options.extraGenders));
      };
      Chance2.prototype.last = function(options) {
        options = initOptions(options, { nationality: "*" });
        if (options.nationality === "*") {
          var allLastNames = [];
          var lastNames = this.get("lastNames");
          Object.keys(lastNames).forEach(function(key) {
            allLastNames = allLastNames.concat(lastNames[key]);
          });
          return this.pick(allLastNames);
        } else {
          return this.pick(this.get("lastNames")[options.nationality.toLowerCase()]);
        }
      };
      Chance2.prototype.israelId = function() {
        var x = this.string({ pool: "0123456789", length: 8 });
        var y = 0;
        for (var i2 = 0; i2 < x.length; i2++) {
          var thisDigit = x[i2] * (i2 / 2 === parseInt(i2 / 2) ? 1 : 2);
          thisDigit = this.pad(thisDigit, 2).toString();
          thisDigit = parseInt(thisDigit[0]) + parseInt(thisDigit[1]);
          y = y + thisDigit;
        }
        x = x + (10 - parseInt(y.toString().slice(-1))).toString().slice(-1);
        return x;
      };
      Chance2.prototype.mrz = function(options) {
        var checkDigit = function(input) {
          var alpha2 = "<ABCDEFGHIJKLMNOPQRSTUVWXYXZ".split(""), multipliers = [7, 3, 1], runningTotal = 0;
          if (typeof input !== "string") {
            input = input.toString();
          }
          input.split("").forEach(function(character, idx) {
            var pos = alpha2.indexOf(character);
            if (pos !== -1) {
              character = pos === 0 ? 0 : pos + 9;
            } else {
              character = parseInt(character, 10);
            }
            character *= multipliers[idx % multipliers.length];
            runningTotal += character;
          });
          return runningTotal % 10;
        };
        var generate = function(opts) {
          var pad = function(length) {
            return new Array(length + 1).join("<");
          };
          var number = [
            "P<",
            opts.issuer,
            opts.last.toUpperCase(),
            "<<",
            opts.first.toUpperCase(),
            pad(39 - (opts.last.length + opts.first.length + 2)),
            opts.passportNumber,
            checkDigit(opts.passportNumber),
            opts.nationality,
            opts.dob,
            checkDigit(opts.dob),
            opts.gender,
            opts.expiry,
            checkDigit(opts.expiry),
            pad(14),
            checkDigit(pad(14))
          ].join("");
          return number + checkDigit(number.substr(44, 10) + number.substr(57, 7) + number.substr(65, 7));
        };
        var that = this;
        options = initOptions(options, {
          first: this.first(),
          last: this.last(),
          passportNumber: this.integer({ min: 1e8, max: 999999999 }),
          dob: function() {
            var date = that.birthday({ type: "adult" });
            return [
              date.getFullYear().toString().substr(2),
              that.pad(date.getMonth() + 1, 2),
              that.pad(date.getDate(), 2)
            ].join("");
          }(),
          expiry: function() {
            var date = /* @__PURE__ */ new Date();
            return [
              (date.getFullYear() + 5).toString().substr(2),
              that.pad(date.getMonth() + 1, 2),
              that.pad(date.getDate(), 2)
            ].join("");
          }(),
          gender: this.gender() === "Female" ? "F" : "M",
          issuer: "GBR",
          nationality: "GBR"
        });
        return generate(options);
      };
      Chance2.prototype.name = function(options) {
        options = initOptions(options);
        var first = this.first(options), last = this.last(options), name;
        if (options.middle) {
          name = first + " " + this.first(options) + " " + last;
        } else if (options.middle_initial) {
          name = first + " " + this.character({ alpha: true, casing: "upper" }) + ". " + last;
        } else {
          name = first + " " + last;
        }
        if (options.prefix) {
          name = this.prefix(options) + " " + name;
        }
        if (options.suffix) {
          name = name + " " + this.suffix(options);
        }
        return name;
      };
      Chance2.prototype.name_prefixes = function(gender) {
        gender = gender || "all";
        gender = gender.toLowerCase();
        var prefixes = [
          { name: "Doctor", abbreviation: "Dr." }
        ];
        if (gender === "male" || gender === "all") {
          prefixes.push({ name: "Mister", abbreviation: "Mr." });
        }
        if (gender === "female" || gender === "all") {
          prefixes.push({ name: "Miss", abbreviation: "Miss" });
          prefixes.push({ name: "Misses", abbreviation: "Mrs." });
        }
        return prefixes;
      };
      Chance2.prototype.prefix = function(options) {
        return this.name_prefix(options);
      };
      Chance2.prototype.name_prefix = function(options) {
        options = initOptions(options, { gender: "all" });
        return options.full ? this.pick(this.name_prefixes(options.gender)).name : this.pick(this.name_prefixes(options.gender)).abbreviation;
      };
      Chance2.prototype.HIDN = function() {
        var idn_pool = "0123456789";
        var idn_chrs = "ABCDEFGHIJKLMNOPQRSTUVWXYXZ";
        var idn = "";
        idn += this.string({ pool: idn_pool, length: 6 });
        idn += this.string({ pool: idn_chrs, length: 2 });
        return idn;
      };
      Chance2.prototype.ssn = function(options) {
        options = initOptions(options, { ssnFour: false, dashes: true });
        var ssn_pool = "1234567890", ssn, dash = options.dashes ? "-" : "";
        if (!options.ssnFour) {
          ssn = this.string({ pool: ssn_pool, length: 3 }) + dash + this.string({ pool: ssn_pool, length: 2 }) + dash + this.string({ pool: ssn_pool, length: 4 });
        } else {
          ssn = this.string({ pool: ssn_pool, length: 4 });
        }
        return ssn;
      };
      Chance2.prototype.aadhar = function(options) {
        options = initOptions(options, { onlyLastFour: false, separatedByWhiteSpace: true });
        var aadhar_pool = "1234567890", aadhar, whiteSpace = options.separatedByWhiteSpace ? " " : "";
        if (!options.onlyLastFour) {
          aadhar = this.string({ pool: aadhar_pool, length: 4 }) + whiteSpace + this.string({ pool: aadhar_pool, length: 4 }) + whiteSpace + this.string({ pool: aadhar_pool, length: 4 });
        } else {
          aadhar = this.string({ pool: aadhar_pool, length: 4 });
        }
        return aadhar;
      };
      Chance2.prototype.name_suffixes = function() {
        var suffixes = [
          { name: "Doctor of Osteopathic Medicine", abbreviation: "D.O." },
          { name: "Doctor of Philosophy", abbreviation: "Ph.D." },
          { name: "Esquire", abbreviation: "Esq." },
          { name: "Junior", abbreviation: "Jr." },
          { name: "Juris Doctor", abbreviation: "J.D." },
          { name: "Master of Arts", abbreviation: "M.A." },
          { name: "Master of Business Administration", abbreviation: "M.B.A." },
          { name: "Master of Science", abbreviation: "M.S." },
          { name: "Medical Doctor", abbreviation: "M.D." },
          { name: "Senior", abbreviation: "Sr." },
          { name: "The Third", abbreviation: "III" },
          { name: "The Fourth", abbreviation: "IV" },
          { name: "Bachelor of Engineering", abbreviation: "B.E" },
          { name: "Bachelor of Technology", abbreviation: "B.TECH" }
        ];
        return suffixes;
      };
      Chance2.prototype.suffix = function(options) {
        return this.name_suffix(options);
      };
      Chance2.prototype.name_suffix = function(options) {
        options = initOptions(options);
        return options.full ? this.pick(this.name_suffixes()).name : this.pick(this.name_suffixes()).abbreviation;
      };
      Chance2.prototype.nationalities = function() {
        return this.get("nationalities");
      };
      Chance2.prototype.nationality = function() {
        var nationality = this.pick(this.nationalities());
        return nationality.name;
      };
      Chance2.prototype.zodiac = function() {
        const zodiacSymbols = ["Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"];
        return this.pickone(zodiacSymbols);
      };
      Chance2.prototype.android_id = function() {
        return "APA91" + this.string({ pool: "0123456789abcefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_", length: 178 });
      };
      Chance2.prototype.apple_token = function() {
        return this.string({ pool: "abcdef1234567890", length: 64 });
      };
      Chance2.prototype.wp8_anid2 = function() {
        return base64(this.hash({ length: 32 }));
      };
      Chance2.prototype.wp7_anid = function() {
        return "A=" + this.guid().replace(/-/g, "").toUpperCase() + "&E=" + this.hash({ length: 3 }) + "&W=" + this.integer({ min: 0, max: 9 });
      };
      Chance2.prototype.bb_pin = function() {
        return this.hash({ length: 8 });
      };
      Chance2.prototype.avatar = function(options) {
        var url = null;
        var URL_BASE = "//www.gravatar.com/avatar/";
        var PROTOCOLS = {
          http: "http",
          https: "https"
        };
        var FILE_TYPES = {
          bmp: "bmp",
          gif: "gif",
          jpg: "jpg",
          png: "png"
        };
        var FALLBACKS = {
          "404": "404",
          // Return 404 if not found
          mm: "mm",
          // Mystery man
          identicon: "identicon",
          // Geometric pattern based on hash
          monsterid: "monsterid",
          // A generated monster icon
          wavatar: "wavatar",
          // A generated face
          retro: "retro",
          // 8-bit icon
          blank: "blank"
          // A transparent png
        };
        var RATINGS = {
          g: "g",
          pg: "pg",
          r: "r",
          x: "x"
        };
        var opts = {
          protocol: null,
          email: null,
          fileExtension: null,
          size: null,
          fallback: null,
          rating: null
        };
        if (!options) {
          opts.email = this.email();
          options = {};
        } else if (typeof options === "string") {
          opts.email = options;
          options = {};
        } else if (typeof options !== "object") {
          return null;
        } else if (options.constructor === "Array") {
          return null;
        }
        opts = initOptions(options, opts);
        if (!opts.email) {
          opts.email = this.email();
        }
        opts.protocol = PROTOCOLS[opts.protocol] ? opts.protocol + ":" : "";
        opts.size = parseInt(opts.size, 0) ? opts.size : "";
        opts.rating = RATINGS[opts.rating] ? opts.rating : "";
        opts.fallback = FALLBACKS[opts.fallback] ? opts.fallback : "";
        opts.fileExtension = FILE_TYPES[opts.fileExtension] ? opts.fileExtension : "";
        url = opts.protocol + URL_BASE + this.bimd5.md5(opts.email) + (opts.fileExtension ? "." + opts.fileExtension : "") + (opts.size || opts.rating || opts.fallback ? "?" : "") + (opts.size ? "&s=" + opts.size.toString() : "") + (opts.rating ? "&r=" + opts.rating : "") + (opts.fallback ? "&d=" + opts.fallback : "");
        return url;
      };
      Chance2.prototype.color = function(options) {
        function gray(value, delimiter) {
          return [value, value, value].join(delimiter || "");
        }
        function rgb(hasAlpha) {
          var rgbValue = hasAlpha ? "rgba" : "rgb";
          var alphaChannel = hasAlpha ? "," + this.floating({ min: min_alpha, max: max_alpha }) : "";
          var colorValue2 = isGrayscale ? gray(this.natural({ min: min_rgb, max: max_rgb }), ",") : this.natural({ min: min_green, max: max_green }) + "," + this.natural({ min: min_blue, max: max_blue }) + "," + this.natural({ max: 255 });
          return rgbValue + "(" + colorValue2 + alphaChannel + ")";
        }
        function hex(start, end, withHash) {
          var symbol = withHash ? "#" : "";
          var hexstring = "";
          if (isGrayscale) {
            hexstring = gray(this.pad(this.hex({ min: min_rgb, max: max_rgb }), 2));
            if (options.format === "shorthex") {
              hexstring = gray(this.hex({ min: 0, max: 15 }));
            }
          } else {
            if (options.format === "shorthex") {
              hexstring = this.pad(this.hex({ min: Math.floor(min_red / 16), max: Math.floor(max_red / 16) }), 1) + this.pad(this.hex({ min: Math.floor(min_green / 16), max: Math.floor(max_green / 16) }), 1) + this.pad(this.hex({ min: Math.floor(min_blue / 16), max: Math.floor(max_blue / 16) }), 1);
            } else if (min_red !== void 0 || max_red !== void 0 || min_green !== void 0 || max_green !== void 0 || min_blue !== void 0 || max_blue !== void 0) {
              hexstring = this.pad(this.hex({ min: min_red, max: max_red }), 2) + this.pad(this.hex({ min: min_green, max: max_green }), 2) + this.pad(this.hex({ min: min_blue, max: max_blue }), 2);
            } else {
              hexstring = this.pad(this.hex({ min: min_rgb, max: max_rgb }), 2) + this.pad(this.hex({ min: min_rgb, max: max_rgb }), 2) + this.pad(this.hex({ min: min_rgb, max: max_rgb }), 2);
            }
          }
          return symbol + hexstring;
        }
        options = initOptions(options, {
          format: this.pick(["hex", "shorthex", "rgb", "rgba", "0x", "name"]),
          grayscale: false,
          casing: "lower",
          min: 0,
          max: 255,
          min_red: void 0,
          max_red: void 0,
          min_green: void 0,
          max_green: void 0,
          min_blue: void 0,
          max_blue: void 0,
          min_alpha: 0,
          max_alpha: 1
        });
        var isGrayscale = options.grayscale;
        var min_rgb = options.min;
        var max_rgb = options.max;
        var min_red = options.min_red;
        var max_red = options.max_red;
        var min_green = options.min_green;
        var max_green = options.max_green;
        var min_blue = options.min_blue;
        var max_blue = options.max_blue;
        var min_alpha = options.min_alpha;
        var max_alpha = options.max_alpha;
        if (options.min_red === void 0) {
          min_red = min_rgb;
        }
        if (options.max_red === void 0) {
          max_red = max_rgb;
        }
        if (options.min_green === void 0) {
          min_green = min_rgb;
        }
        if (options.max_green === void 0) {
          max_green = max_rgb;
        }
        if (options.min_blue === void 0) {
          min_blue = min_rgb;
        }
        if (options.max_blue === void 0) {
          max_blue = max_rgb;
        }
        if (options.min_alpha === void 0) {
          min_alpha = 0;
        }
        if (options.max_alpha === void 0) {
          max_alpha = 1;
        }
        if (isGrayscale && min_rgb === 0 && max_rgb === 255 && min_red !== void 0 && max_red !== void 0) {
          min_rgb = (min_red + min_green + min_blue) / 3;
          max_rgb = (max_red + max_green + max_blue) / 3;
        }
        var colorValue;
        if (options.format === "hex") {
          colorValue = hex.call(this, 2, 6, true);
        } else if (options.format === "shorthex") {
          colorValue = hex.call(this, 1, 3, true);
        } else if (options.format === "rgb") {
          colorValue = rgb.call(this, false);
        } else if (options.format === "rgba") {
          colorValue = rgb.call(this, true);
        } else if (options.format === "0x") {
          colorValue = "0x" + hex.call(this, 2, 6);
        } else if (options.format === "name") {
          return this.pick(this.get("colorNames"));
        } else {
          throw new RangeError('Invalid format provided. Please provide one of "hex", "shorthex", "rgb", "rgba", "0x" or "name".');
        }
        if (options.casing === "upper") {
          colorValue = colorValue.toUpperCase();
        }
        return colorValue;
      };
      Chance2.prototype.domain = function(options) {
        options = initOptions(options);
        return this.word() + "." + (options.tld || this.tld());
      };
      Chance2.prototype.email = function(options) {
        options = initOptions(options);
        return this.word({ length: options.length }) + "@" + (options.domain || this.domain());
      };
      Chance2.prototype.fbid = function() {
        return "10000" + this.string({ pool: "1234567890", length: 11 });
      };
      Chance2.prototype.google_analytics = function() {
        var account = this.pad(this.natural({ max: 999999 }), 6);
        var property = this.pad(this.natural({ max: 99 }), 2);
        return "UA-" + account + "-" + property;
      };
      Chance2.prototype.hashtag = function() {
        return "#" + this.word();
      };
      Chance2.prototype.ip = function() {
        return this.natural({ min: 1, max: 254 }) + "." + this.natural({ max: 255 }) + "." + this.natural({ max: 255 }) + "." + this.natural({ min: 1, max: 254 });
      };
      Chance2.prototype.ipv6 = function() {
        var ip_addr = this.n(this.hash, 8, { length: 4 });
        return ip_addr.join(":");
      };
      Chance2.prototype.klout = function() {
        return this.natural({ min: 1, max: 99 });
      };
      Chance2.prototype.mac = function(options) {
        options = initOptions(options, { delimiter: ":" });
        return this.pad(this.natural({ max: 255 }).toString(16), 2) + options.delimiter + this.pad(this.natural({ max: 255 }).toString(16), 2) + options.delimiter + this.pad(this.natural({ max: 255 }).toString(16), 2) + options.delimiter + this.pad(this.natural({ max: 255 }).toString(16), 2) + options.delimiter + this.pad(this.natural({ max: 255 }).toString(16), 2) + options.delimiter + this.pad(this.natural({ max: 255 }).toString(16), 2);
      };
      Chance2.prototype.semver = function(options) {
        options = initOptions(options, { include_prerelease: true });
        var range2 = this.pickone(["^", "~", "<", ">", "<=", ">=", "="]);
        if (options.range) {
          range2 = options.range;
        }
        var prerelease = "";
        if (options.include_prerelease) {
          prerelease = this.weighted(["", "-dev", "-beta", "-alpha"], [50, 10, 5, 1]);
        }
        return range2 + this.rpg("3d10").join(".") + prerelease;
      };
      Chance2.prototype.tlds = function() {
        return ["com", "org", "edu", "gov", "co.uk", "net", "io", "ac", "ad", "ae", "af", "ag", "ai", "al", "am", "ao", "aq", "ar", "as", "at", "au", "aw", "ax", "az", "ba", "bb", "bd", "be", "bf", "bg", "bh", "bi", "bj", "bm", "bn", "bo", "br", "bs", "bt", "bv", "bw", "by", "bz", "ca", "cc", "cd", "cf", "cg", "ch", "ci", "ck", "cl", "cm", "cn", "co", "cr", "cu", "cv", "cw", "cx", "cy", "cz", "de", "dj", "dk", "dm", "do", "dz", "ec", "ee", "eg", "eh", "er", "es", "et", "eu", "fi", "fj", "fk", "fm", "fo", "fr", "ga", "gb", "gd", "ge", "gf", "gg", "gh", "gi", "gl", "gm", "gn", "gp", "gq", "gr", "gs", "gt", "gu", "gw", "gy", "hk", "hm", "hn", "hr", "ht", "hu", "id", "ie", "il", "im", "in", "io", "iq", "ir", "is", "it", "je", "jm", "jo", "jp", "ke", "kg", "kh", "ki", "km", "kn", "kp", "kr", "kw", "ky", "kz", "la", "lb", "lc", "li", "lk", "lr", "ls", "lt", "lu", "lv", "ly", "ma", "mc", "md", "me", "mg", "mh", "mk", "ml", "mm", "mn", "mo", "mp", "mq", "mr", "ms", "mt", "mu", "mv", "mw", "mx", "my", "mz", "na", "nc", "ne", "nf", "ng", "ni", "nl", "no", "np", "nr", "nu", "nz", "om", "pa", "pe", "pf", "pg", "ph", "pk", "pl", "pm", "pn", "pr", "ps", "pt", "pw", "py", "qa", "re", "ro", "rs", "ru", "rw", "sa", "sb", "sc", "sd", "se", "sg", "sh", "si", "sj", "sk", "sl", "sm", "sn", "so", "sr", "ss", "st", "su", "sv", "sx", "sy", "sz", "tc", "td", "tf", "tg", "th", "tj", "tk", "tl", "tm", "tn", "to", "tr", "tt", "tv", "tw", "tz", "ua", "ug", "uk", "us", "uy", "uz", "va", "vc", "ve", "vg", "vi", "vn", "vu", "wf", "ws", "ye", "yt", "za", "zm", "zw"];
      };
      Chance2.prototype.tld = function() {
        return this.pick(this.tlds());
      };
      Chance2.prototype.twitter = function() {
        return "@" + this.word();
      };
      Chance2.prototype.url = function(options) {
        options = initOptions(options, { protocol: "http", domain: this.domain(options), domain_prefix: "", path: this.word(), extensions: [] });
        var extension = options.extensions.length > 0 ? "." + this.pick(options.extensions) : "";
        var domain = options.domain_prefix ? options.domain_prefix + "." + options.domain : options.domain;
        return options.protocol + "://" + domain + "/" + options.path + extension;
      };
      Chance2.prototype.port = function() {
        return this.integer({ min: 0, max: 65535 });
      };
      Chance2.prototype.locale = function(options) {
        options = initOptions(options);
        if (options.region) {
          return this.pick(this.get("locale_regions"));
        } else {
          return this.pick(this.get("locale_languages"));
        }
      };
      Chance2.prototype.locales = function(options) {
        options = initOptions(options);
        if (options.region) {
          return this.get("locale_regions");
        } else {
          return this.get("locale_languages");
        }
      };
      Chance2.prototype.loremPicsum = function(options) {
        options = initOptions(options, { width: 500, height: 500, greyscale: false, blurred: false });
        var greyscale = options.greyscale ? "g/" : "";
        var query = options.blurred ? "/?blur" : "/?random";
        return "https://picsum.photos/" + greyscale + options.width + "/" + options.height + query;
      };
      Chance2.prototype.address = function(options) {
        options = initOptions(options);
        return this.natural({ min: 5, max: 2e3 }) + " " + this.street(options);
      };
      Chance2.prototype.altitude = function(options) {
        options = initOptions(options, { fixed: 5, min: 0, max: 8848 });
        return this.floating({
          min: options.min,
          max: options.max,
          fixed: options.fixed
        });
      };
      Chance2.prototype.areacode = function(options) {
        options = initOptions(options, { parens: true });
        var areacode = options.exampleNumber ? "555" : this.natural({ min: 2, max: 9 }).toString() + this.natural({ min: 0, max: 8 }).toString() + this.natural({ min: 0, max: 9 }).toString();
        return options.parens ? "(" + areacode + ")" : areacode;
      };
      Chance2.prototype.city = function() {
        return this.capitalize(this.word({ syllables: 3 }));
      };
      Chance2.prototype.coordinates = function(options) {
        return this.latitude(options) + ", " + this.longitude(options);
      };
      Chance2.prototype.countries = function() {
        return this.get("countries");
      };
      Chance2.prototype.country = function(options) {
        options = initOptions(options);
        var country = this.pick(this.countries());
        return options.raw ? country : options.full ? country.name : country.abbreviation;
      };
      Chance2.prototype.depth = function(options) {
        options = initOptions(options, { fixed: 5, min: -10994, max: 0 });
        return this.floating({
          min: options.min,
          max: options.max,
          fixed: options.fixed
        });
      };
      Chance2.prototype.geohash = function(options) {
        options = initOptions(options, { length: 7 });
        return this.string({ length: options.length, pool: "0123456789bcdefghjkmnpqrstuvwxyz" });
      };
      Chance2.prototype.geojson = function(options) {
        return this.latitude(options) + ", " + this.longitude(options) + ", " + this.altitude(options);
      };
      Chance2.prototype.latitude = function(options) {
        var [DDM, DMS, DD] = ["ddm", "dms", "dd"];
        options = initOptions(
          options,
          options && options.format && [DDM, DMS].includes(options.format.toLowerCase()) ? { min: 0, max: 89, fixed: 4 } : { fixed: 5, min: -90, max: 90, format: DD }
        );
        var format = options.format.toLowerCase();
        if (format === DDM || format === DMS) {
          testRange(options.min < 0 || options.min > 89, "Chance: Min specified is out of range. Should be between 0 - 89");
          testRange(options.max < 0 || options.max > 89, "Chance: Max specified is out of range. Should be between 0 - 89");
          testRange(options.fixed > 4, "Chance: Fixed specified should be below or equal to 4");
        }
        switch (format) {
          case DDM: {
            return this.integer({ min: options.min, max: options.max }) + "°" + this.floating({ min: 0, max: 59, fixed: options.fixed });
          }
          case DMS: {
            return this.integer({ min: options.min, max: options.max }) + "°" + this.integer({ min: 0, max: 59 }) + "’" + this.floating({ min: 0, max: 59, fixed: options.fixed }) + "”";
          }
          case DD:
          default: {
            return this.floating({ min: options.min, max: options.max, fixed: options.fixed });
          }
        }
      };
      Chance2.prototype.longitude = function(options) {
        var [DDM, DMS, DD] = ["ddm", "dms", "dd"];
        options = initOptions(
          options,
          options && options.format && [DDM, DMS].includes(options.format.toLowerCase()) ? { min: 0, max: 179, fixed: 4 } : { fixed: 5, min: -180, max: 180, format: DD }
        );
        var format = options.format.toLowerCase();
        if (format === DDM || format === DMS) {
          testRange(options.min < 0 || options.min > 179, "Chance: Min specified is out of range. Should be between 0 - 179");
          testRange(options.max < 0 || options.max > 179, "Chance: Max specified is out of range. Should be between 0 - 179");
          testRange(options.fixed > 4, "Chance: Fixed specified should be below or equal to 4");
        }
        switch (format) {
          case DDM: {
            return this.integer({ min: options.min, max: options.max }) + "°" + this.floating({ min: 0, max: 59.9999, fixed: options.fixed });
          }
          case DMS: {
            return this.integer({ min: options.min, max: options.max }) + "°" + this.integer({ min: 0, max: 59 }) + "’" + this.floating({ min: 0, max: 59.9999, fixed: options.fixed }) + "”";
          }
          case DD:
          default: {
            return this.floating({ min: options.min, max: options.max, fixed: options.fixed });
          }
        }
      };
      Chance2.prototype.phone = function(options) {
        var self2 = this, numPick, ukNum = function(parts) {
          var section = [];
          parts.sections.forEach(function(n) {
            section.push(self2.string({ pool: "0123456789", length: n }));
          });
          return parts.area + section.join(" ");
        };
        options = initOptions(options, {
          formatted: true,
          country: "us",
          mobile: false,
          exampleNumber: false
        });
        if (!options.formatted) {
          options.parens = false;
        }
        var phone;
        switch (options.country) {
          case "fr":
            if (!options.mobile) {
              numPick = this.pick([
                // Valid zone and département codes.
                "01" + this.pick(["30", "34", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "53", "55", "56", "58", "60", "64", "69", "70", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83"]) + self2.string({ pool: "0123456789", length: 6 }),
                "02" + this.pick(["14", "18", "22", "23", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "40", "41", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "56", "57", "61", "62", "69", "72", "76", "77", "78", "85", "90", "96", "97", "98", "99"]) + self2.string({ pool: "0123456789", length: 6 }),
                "03" + this.pick(["10", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "39", "44", "45", "51", "52", "54", "55", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90"]) + self2.string({ pool: "0123456789", length: 6 }),
                "04" + this.pick(["11", "13", "15", "20", "22", "26", "27", "30", "32", "34", "37", "42", "43", "44", "50", "56", "57", "63", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "88", "89", "90", "91", "92", "93", "94", "95", "97", "98"]) + self2.string({ pool: "0123456789", length: 6 }),
                "05" + this.pick(["08", "16", "17", "19", "24", "31", "32", "33", "34", "35", "40", "45", "46", "47", "49", "53", "55", "56", "57", "58", "59", "61", "62", "63", "64", "65", "67", "79", "81", "82", "86", "87", "90", "94"]) + self2.string({ pool: "0123456789", length: 6 }),
                "09" + self2.string({ pool: "0123456789", length: 8 })
              ]);
              phone = options.formatted ? numPick.match(/../g).join(" ") : numPick;
            } else {
              numPick = this.pick(["06", "07"]) + self2.string({ pool: "0123456789", length: 8 });
              phone = options.formatted ? numPick.match(/../g).join(" ") : numPick;
            }
            break;
          case "uk":
            if (!options.mobile) {
              numPick = this.pick([
                //valid area codes of major cities/counties followed by random numbers in required format.
                { area: "01" + this.character({ pool: "234569" }) + "1 ", sections: [3, 4] },
                { area: "020 " + this.character({ pool: "378" }), sections: [3, 4] },
                { area: "023 " + this.character({ pool: "89" }), sections: [3, 4] },
                { area: "024 7", sections: [3, 4] },
                { area: "028 " + this.pick(["25", "28", "37", "71", "82", "90", "92", "95"]), sections: [2, 4] },
                { area: "012" + this.pick(["04", "08", "54", "76", "97", "98"]) + " ", sections: [6] },
                { area: "013" + this.pick(["63", "64", "84", "86"]) + " ", sections: [6] },
                { area: "014" + this.pick(["04", "20", "60", "61", "80", "88"]) + " ", sections: [6] },
                { area: "015" + this.pick(["24", "27", "62", "66"]) + " ", sections: [6] },
                { area: "016" + this.pick(["06", "29", "35", "47", "59", "95"]) + " ", sections: [6] },
                { area: "017" + this.pick(["26", "44", "50", "68"]) + " ", sections: [6] },
                { area: "018" + this.pick(["27", "37", "84", "97"]) + " ", sections: [6] },
                { area: "019" + this.pick(["00", "05", "35", "46", "49", "63", "95"]) + " ", sections: [6] }
              ]);
              phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(" ", "", "g");
            } else {
              numPick = this.pick([
                { area: "07" + this.pick(["4", "5", "7", "8", "9"]), sections: [2, 6] },
                { area: "07624 ", sections: [6] }
              ]);
              phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(" ", "");
            }
            break;
          case "za":
            if (!options.mobile) {
              numPick = this.pick([
                "01" + this.pick(["0", "1", "2", "3", "4", "5", "6", "7", "8"]) + self2.string({ pool: "0123456789", length: 7 }),
                "02" + this.pick(["1", "2", "3", "4", "7", "8"]) + self2.string({ pool: "0123456789", length: 7 }),
                "03" + this.pick(["1", "2", "3", "5", "6", "9"]) + self2.string({ pool: "0123456789", length: 7 }),
                "04" + this.pick(["1", "2", "3", "4", "5", "6", "7", "8", "9"]) + self2.string({ pool: "0123456789", length: 7 }),
                "05" + this.pick(["1", "3", "4", "6", "7", "8"]) + self2.string({ pool: "0123456789", length: 7 })
              ]);
              phone = options.formatted || numPick;
            } else {
              numPick = this.pick([
                "060" + this.pick(["3", "4", "5", "6", "7", "8", "9"]) + self2.string({ pool: "0123456789", length: 6 }),
                "061" + this.pick(["0", "1", "2", "3", "4", "5", "8"]) + self2.string({ pool: "0123456789", length: 6 }),
                "06" + self2.string({ pool: "0123456789", length: 7 }),
                "071" + this.pick(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]) + self2.string({ pool: "0123456789", length: 6 }),
                "07" + this.pick(["2", "3", "4", "6", "7", "8", "9"]) + self2.string({ pool: "0123456789", length: 7 }),
                "08" + this.pick(["0", "1", "2", "3", "4", "5"]) + self2.string({ pool: "0123456789", length: 7 })
              ]);
              phone = options.formatted || numPick;
            }
            break;
          case "us":
            var areacode = this.areacode(options).toString();
            var exchange = this.natural({ min: 2, max: 9 }).toString() + this.natural({ min: 0, max: 9 }).toString() + this.natural({ min: 0, max: 9 }).toString();
            var subscriber = this.natural({ min: 1e3, max: 9999 }).toString();
            phone = options.formatted ? areacode + " " + exchange + "-" + subscriber : areacode + exchange + subscriber;
            break;
          case "br":
            var areaCode = this.pick(["11", "12", "13", "14", "15", "16", "17", "18", "19", "21", "22", "24", "27", "28", "31", "32", "33", "34", "35", "37", "38", "41", "42", "43", "44", "45", "46", "47", "48", "49", "51", "53", "54", "55", "61", "62", "63", "64", "65", "66", "67", "68", "69", "71", "73", "74", "75", "77", "79", "81", "82", "83", "84", "85", "86", "87", "88", "89", "91", "92", "93", "94", "95", "96", "97", "98", "99"]);
            var prefix;
            if (options.mobile) {
              prefix = "9" + self2.string({ pool: "0123456789", length: 4 });
            } else {
              prefix = this.natural({ min: 2e3, max: 5999 }).toString();
            }
            var mcdu = self2.string({ pool: "0123456789", length: 4 });
            phone = options.formatted ? "(" + areaCode + ") " + prefix + "-" + mcdu : areaCode + prefix + mcdu;
            break;
        }
        return phone;
      };
      Chance2.prototype.postal = function() {
        var pd = this.character({ pool: "XVTSRPNKLMHJGECBA" });
        var fsa = pd + this.natural({ max: 9 }) + this.character({ alpha: true, casing: "upper" });
        var ldu = this.natural({ max: 9 }) + this.character({ alpha: true, casing: "upper" }) + this.natural({ max: 9 });
        return fsa + " " + ldu;
      };
      Chance2.prototype.postcode = function() {
        var area = this.pick(this.get("postcodeAreas")).code;
        var district = this.natural({ max: 9 });
        var subDistrict = this.bool() ? this.character({ alpha: true, casing: "upper" }) : "";
        var outward = area + district + subDistrict;
        var sector = this.natural({ max: 9 });
        var unit = this.character({ alpha: true, casing: "upper" }) + this.character({ alpha: true, casing: "upper" });
        var inward = sector + unit;
        return outward + " " + inward;
      };
      Chance2.prototype.counties = function(options) {
        options = initOptions(options, { country: "uk" });
        return this.get("counties")[options.country.toLowerCase()];
      };
      Chance2.prototype.county = function(options) {
        return this.pick(this.counties(options)).name;
      };
      Chance2.prototype.provinces = function(options) {
        options = initOptions(options, { country: "ca" });
        return this.get("provinces")[options.country.toLowerCase()];
      };
      Chance2.prototype.province = function(options) {
        return options && options.full ? this.pick(this.provinces(options)).name : this.pick(this.provinces(options)).abbreviation;
      };
      Chance2.prototype.state = function(options) {
        return options && options.full ? this.pick(this.states(options)).name : this.pick(this.states(options)).abbreviation;
      };
      Chance2.prototype.states = function(options) {
        options = initOptions(options, { country: "us", us_states_and_dc: true });
        var states;
        switch (options.country.toLowerCase()) {
          case "us":
            var us_states_and_dc = this.get("us_states_and_dc"), territories = this.get("territories"), armed_forces = this.get("armed_forces");
            states = [];
            if (options.us_states_and_dc) {
              states = states.concat(us_states_and_dc);
            }
            if (options.territories) {
              states = states.concat(territories);
            }
            if (options.armed_forces) {
              states = states.concat(armed_forces);
            }
            break;
          case "it":
          case "mx":
            states = this.get("country_regions")[options.country.toLowerCase()];
            break;
          case "uk":
            states = this.get("counties")[options.country.toLowerCase()];
            break;
        }
        return states;
      };
      Chance2.prototype.street = function(options) {
        options = initOptions(options, { country: "us", syllables: 2 });
        var street;
        switch (options.country.toLowerCase()) {
          case "us":
            street = this.word({ syllables: options.syllables });
            street = this.capitalize(street);
            street += " ";
            street += options.short_suffix ? this.street_suffix(options).abbreviation : this.street_suffix(options).name;
            break;
          case "it":
            street = this.word({ syllables: options.syllables });
            street = this.capitalize(street);
            street = (options.short_suffix ? this.street_suffix(options).abbreviation : this.street_suffix(options).name) + " " + street;
            break;
        }
        return street;
      };
      Chance2.prototype.street_suffix = function(options) {
        options = initOptions(options, { country: "us" });
        return this.pick(this.street_suffixes(options));
      };
      Chance2.prototype.street_suffixes = function(options) {
        options = initOptions(options, { country: "us" });
        return this.get("street_suffixes")[options.country.toLowerCase()];
      };
      Chance2.prototype.zip = function(options) {
        var zip = this.n(this.natural, 5, { max: 9 });
        if (options && options.plusfour === true) {
          zip.push("-");
          zip = zip.concat(this.n(this.natural, 4, { max: 9 }));
        }
        return zip.join("");
      };
      Chance2.prototype.ampm = function() {
        return this.bool() ? "am" : "pm";
      };
      Chance2.prototype.date = function(options) {
        var date_string, date;
        if (options && (options.min || options.max)) {
          options = initOptions(options, {
            american: true,
            string: false
          });
          var min = typeof options.min !== "undefined" ? options.min.getTime() : 1;
          var max = typeof options.max !== "undefined" ? options.max.getTime() : 864e13;
          date = new Date(this.integer({ min, max }));
        } else {
          var m = this.month({ raw: true });
          var daysInMonth = m.days;
          if (options && options.month) {
            daysInMonth = this.get("months")[(options.month % 12 + 12) % 12].days;
          }
          options = initOptions(options, {
            year: parseInt(this.year(), 10),
            // Necessary to subtract 1 because Date() 0-indexes month but not day or year
            // for some reason.
            month: m.numeric - 1,
            day: this.natural({ min: 1, max: daysInMonth }),
            hour: this.hour({ twentyfour: true }),
            minute: this.minute(),
            second: this.second(),
            millisecond: this.millisecond(),
            american: true,
            string: false
          });
          date = new Date(options.year, options.month, options.day, options.hour, options.minute, options.second, options.millisecond);
        }
        if (options.american) {
          date_string = date.getMonth() + 1 + "/" + date.getDate() + "/" + date.getFullYear();
        } else {
          date_string = date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
        }
        return options.string ? date_string : date;
      };
      Chance2.prototype.hammertime = function(options) {
        return this.date(options).getTime();
      };
      Chance2.prototype.hour = function(options) {
        options = initOptions(options, {
          min: options && options.twentyfour ? 0 : 1,
          max: options && options.twentyfour ? 23 : 12
        });
        testRange(options.min < 0, "Chance: Min cannot be less than 0.");
        testRange(options.twentyfour && options.max > 23, "Chance: Max cannot be greater than 23 for twentyfour option.");
        testRange(!options.twentyfour && options.max > 12, "Chance: Max cannot be greater than 12.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");
        return this.natural({ min: options.min, max: options.max });
      };
      Chance2.prototype.millisecond = function() {
        return this.natural({ max: 999 });
      };
      Chance2.prototype.minute = Chance2.prototype.second = function(options) {
        options = initOptions(options, { min: 0, max: 59 });
        testRange(options.min < 0, "Chance: Min cannot be less than 0.");
        testRange(options.max > 59, "Chance: Max cannot be greater than 59.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");
        return this.natural({ min: options.min, max: options.max });
      };
      Chance2.prototype.month = function(options) {
        options = initOptions(options, { min: 1, max: 12 });
        testRange(options.min < 1, "Chance: Min cannot be less than 1.");
        testRange(options.max > 12, "Chance: Max cannot be greater than 12.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");
        var month = this.pick(this.months().slice(options.min - 1, options.max));
        return options.raw ? month : month.name;
      };
      Chance2.prototype.months = function() {
        return this.get("months");
      };
      Chance2.prototype.second = function() {
        return this.natural({ max: 59 });
      };
      Chance2.prototype.timestamp = function() {
        return this.natural({ min: 1, max: parseInt((/* @__PURE__ */ new Date()).getTime() / 1e3, 10) });
      };
      Chance2.prototype.weekday = function(options) {
        options = initOptions(options, { weekday_only: false });
        var weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];
        if (!options.weekday_only) {
          weekdays.push("Saturday");
          weekdays.push("Sunday");
        }
        return this.pickone(weekdays);
      };
      Chance2.prototype.year = function(options) {
        options = initOptions(options, { min: (/* @__PURE__ */ new Date()).getFullYear() });
        options.max = typeof options.max !== "undefined" ? options.max : options.min + 100;
        return this.natural(options).toString();
      };
      Chance2.prototype.cc = function(options) {
        options = initOptions(options);
        var type, number, to_generate;
        type = options.type ? this.cc_type({ name: options.type, raw: true }) : this.cc_type({ raw: true });
        number = type.prefix.split("");
        to_generate = type.length - type.prefix.length - 1;
        number = number.concat(this.n(this.integer, to_generate, { min: 0, max: 9 }));
        number.push(this.luhn_calculate(number.join("")));
        return number.join("");
      };
      Chance2.prototype.cc_types = function() {
        return this.get("cc_types");
      };
      Chance2.prototype.cc_type = function(options) {
        options = initOptions(options);
        var types = this.cc_types(), type = null;
        if (options.name) {
          for (var i2 = 0; i2 < types.length; i2++) {
            if (types[i2].name === options.name || types[i2].short_name === options.name) {
              type = types[i2];
              break;
            }
          }
          if (type === null) {
            throw new RangeError("Chance: Credit card type '" + options.name + "' is not supported");
          }
        } else {
          type = this.pick(types);
        }
        return options.raw ? type : type.name;
      };
      Chance2.prototype.currency_types = function() {
        return this.get("currency_types");
      };
      Chance2.prototype.currency = function() {
        return this.pick(this.currency_types());
      };
      Chance2.prototype.timezones = function() {
        return this.get("timezones");
      };
      Chance2.prototype.timezone = function() {
        return this.pick(this.timezones());
      };
      Chance2.prototype.currency_pair = function(returnAsString) {
        var currencies = this.unique(this.currency, 2, {
          comparator: function(arr, val) {
            return arr.reduce(function(acc, item) {
              return acc || item.code === val.code;
            }, false);
          }
        });
        if (returnAsString) {
          return currencies[0].code + "/" + currencies[1].code;
        } else {
          return currencies;
        }
      };
      Chance2.prototype.dollar = function(options) {
        options = initOptions(options, { max: 1e4, min: 0 });
        var dollar = this.floating({ min: options.min, max: options.max, fixed: 2 }).toString(), cents = dollar.split(".")[1];
        if (cents === void 0) {
          dollar += ".00";
        } else if (cents.length < 2) {
          dollar = dollar + "0";
        }
        if (dollar < 0) {
          return "-$" + dollar.replace("-", "");
        } else {
          return "$" + dollar;
        }
      };
      Chance2.prototype.euro = function(options) {
        return Number(this.dollar(options).replace("$", "")).toLocaleString() + "€";
      };
      Chance2.prototype.exp = function(options) {
        options = initOptions(options);
        var exp = {};
        exp.year = this.exp_year();
        if (exp.year === (/* @__PURE__ */ new Date()).getFullYear().toString()) {
          exp.month = this.exp_month({ future: true });
        } else {
          exp.month = this.exp_month();
        }
        return options.raw ? exp : exp.month + "/" + exp.year;
      };
      Chance2.prototype.exp_month = function(options) {
        options = initOptions(options);
        var month, month_int, curMonth = (/* @__PURE__ */ new Date()).getMonth() + 1;
        if (options.future && curMonth !== 12) {
          do {
            month = this.month({ raw: true }).numeric;
            month_int = parseInt(month, 10);
          } while (month_int <= curMonth);
        } else {
          month = this.month({ raw: true }).numeric;
        }
        return month;
      };
      Chance2.prototype.exp_year = function() {
        var curMonth = (/* @__PURE__ */ new Date()).getMonth() + 1, curYear = (/* @__PURE__ */ new Date()).getFullYear();
        return this.year({ min: curMonth === 12 ? curYear + 1 : curYear, max: curYear + 10 });
      };
      Chance2.prototype.vat = function(options) {
        options = initOptions(options, { country: "it" });
        switch (options.country.toLowerCase()) {
          case "it":
            return this.it_vat();
        }
      };
      Chance2.prototype.iban = function() {
        var alpha2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        var alphanum = alpha2 + "0123456789";
        var iban = this.string({ length: 2, pool: alpha2 }) + this.pad(this.integer({ min: 0, max: 99 }), 2) + this.string({ length: 4, pool: alphanum }) + this.pad(this.natural(), this.natural({ min: 6, max: 26 }));
        return iban;
      };
      Chance2.prototype.it_vat = function() {
        var it_vat = this.natural({ min: 1, max: 18e5 });
        it_vat = this.pad(it_vat, 7) + this.pad(this.pick(this.provinces({ country: "it" })).code, 3);
        return it_vat + this.luhn_calculate(it_vat);
      };
      Chance2.prototype.cf = function(options) {
        options = options || {};
        var gender = !!options.gender ? options.gender : this.gender(), first = !!options.first ? options.first : this.first({ gender, nationality: "it" }), last = !!options.last ? options.last : this.last({ nationality: "it" }), birthday = !!options.birthday ? options.birthday : this.birthday(), city = !!options.city ? options.city : this.pickone(["A", "B", "C", "D", "E", "F", "G", "H", "I", "L", "M", "Z"]) + this.pad(this.natural({ max: 999 }), 3), cf = [], name_generator = function(name, isLast) {
          var temp, return_value = [];
          if (name.length < 3) {
            return_value = name.split("").concat("XXX".split("")).splice(0, 3);
          } else {
            temp = name.toUpperCase().split("").map(function(c) {
              return "BCDFGHJKLMNPRSTVWZ".indexOf(c) !== -1 ? c : void 0;
            }).join("");
            if (temp.length > 3) {
              if (isLast) {
                temp = temp.substr(0, 3);
              } else {
                temp = temp[0] + temp.substr(2, 2);
              }
            }
            if (temp.length < 3) {
              return_value = temp;
              temp = name.toUpperCase().split("").map(function(c) {
                return "AEIOU".indexOf(c) !== -1 ? c : void 0;
              }).join("").substr(0, 3 - return_value.length);
            }
            return_value = return_value + temp;
          }
          return return_value;
        }, date_generator = function(birthday2, gender2, that) {
          var lettermonths = ["A", "B", "C", "D", "E", "H", "L", "M", "P", "R", "S", "T"];
          return birthday2.getFullYear().toString().substr(2) + lettermonths[birthday2.getMonth()] + that.pad(birthday2.getDate() + (gender2.toLowerCase() === "female" ? 40 : 0), 2);
        }, checkdigit_generator = function(cf2) {
          var range1 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", range2 = "ABCDEFGHIJABCDEFGHIJKLMNOPQRSTUVWXYZ", evens = "ABCDEFGHIJKLMNOPQRSTUVWXYZ", odds = "BAKPLCQDREVOSFTGUHMINJWZYX", digit = 0;
          for (var i2 = 0; i2 < 15; i2++) {
            if (i2 % 2 !== 0) {
              digit += evens.indexOf(range2[range1.indexOf(cf2[i2])]);
            } else {
              digit += odds.indexOf(range2[range1.indexOf(cf2[i2])]);
            }
          }
          return evens[digit % 26];
        };
        cf = cf.concat(name_generator(last, true), name_generator(first), date_generator(birthday, gender, this), city.toUpperCase().split("")).join("");
        cf += checkdigit_generator(cf.toUpperCase(), this);
        return cf.toUpperCase();
      };
      Chance2.prototype.pl_pesel = function() {
        var number = this.natural({ min: 1, max: 9999999999 });
        var arr = this.pad(number, 10).split("");
        for (var i2 = 0; i2 < arr.length; i2++) {
          arr[i2] = parseInt(arr[i2]);
        }
        var controlNumber = (1 * arr[0] + 3 * arr[1] + 7 * arr[2] + 9 * arr[3] + 1 * arr[4] + 3 * arr[5] + 7 * arr[6] + 9 * arr[7] + 1 * arr[8] + 3 * arr[9]) % 10;
        if (controlNumber !== 0) {
          controlNumber = 10 - controlNumber;
        }
        return arr.join("") + controlNumber;
      };
      Chance2.prototype.pl_nip = function() {
        var number = this.natural({ min: 1, max: 999999999 });
        var arr = this.pad(number, 9).split("");
        for (var i2 = 0; i2 < arr.length; i2++) {
          arr[i2] = parseInt(arr[i2]);
        }
        var controlNumber = (6 * arr[0] + 5 * arr[1] + 7 * arr[2] + 2 * arr[3] + 3 * arr[4] + 4 * arr[5] + 5 * arr[6] + 6 * arr[7] + 7 * arr[8]) % 11;
        if (controlNumber === 10) {
          return this.pl_nip();
        }
        return arr.join("") + controlNumber;
      };
      Chance2.prototype.pl_regon = function() {
        var number = this.natural({ min: 1, max: 99999999 });
        var arr = this.pad(number, 8).split("");
        for (var i2 = 0; i2 < arr.length; i2++) {
          arr[i2] = parseInt(arr[i2]);
        }
        var controlNumber = (8 * arr[0] + 9 * arr[1] + 2 * arr[2] + 3 * arr[3] + 4 * arr[4] + 5 * arr[5] + 6 * arr[6] + 7 * arr[7]) % 11;
        if (controlNumber === 10) {
          controlNumber = 0;
        }
        return arr.join("") + controlNumber;
      };
      Chance2.prototype.music_genre = function(genre = "general") {
        if (!(genre.toLowerCase() in data.music_genres)) {
          throw new Error(`Unsupported genre: ${genre}`);
        }
        const genres = data.music_genres[genre.toLowerCase()];
        const randomIndex = this.integer({ min: 0, max: genres.length - 1 });
        return genres[randomIndex];
      };
      Chance2.prototype.note = function(options) {
        options = initOptions(options, { notes: "flatKey" });
        var scales = {
          naturals: ["C", "D", "E", "F", "G", "A", "B"],
          flats: ["D♭", "E♭", "G♭", "A♭", "B♭"],
          sharps: ["C♯", "D♯", "F♯", "G♯", "A♯"]
        };
        scales.all = scales.naturals.concat(scales.flats.concat(scales.sharps));
        scales.flatKey = scales.naturals.concat(scales.flats);
        scales.sharpKey = scales.naturals.concat(scales.sharps);
        return this.pickone(scales[options.notes]);
      };
      Chance2.prototype.midi_note = function(options) {
        var min = 0;
        var max = 127;
        options = initOptions(options, { min, max });
        return this.integer({ min: options.min, max: options.max });
      };
      Chance2.prototype.chord_quality = function(options) {
        options = initOptions(options, { jazz: true });
        var chord_qualities = ["maj", "min", "aug", "dim"];
        if (options.jazz) {
          chord_qualities = [
            "maj7",
            "min7",
            "7",
            "sus",
            "dim",
            "ø"
          ];
        }
        return this.pickone(chord_qualities);
      };
      Chance2.prototype.chord = function(options) {
        options = initOptions(options);
        return this.note(options) + this.chord_quality(options);
      };
      Chance2.prototype.tempo = function(options) {
        var min = 40;
        var max = 320;
        options = initOptions(options, { min, max });
        return this.integer({ min: options.min, max: options.max });
      };
      Chance2.prototype.coin = function() {
        return this.bool() ? "heads" : "tails";
      };
      function diceFn(range2) {
        return function() {
          return this.natural(range2);
        };
      }
      Chance2.prototype.d4 = diceFn({ min: 1, max: 4 });
      Chance2.prototype.d6 = diceFn({ min: 1, max: 6 });
      Chance2.prototype.d8 = diceFn({ min: 1, max: 8 });
      Chance2.prototype.d10 = diceFn({ min: 1, max: 10 });
      Chance2.prototype.d12 = diceFn({ min: 1, max: 12 });
      Chance2.prototype.d20 = diceFn({ min: 1, max: 20 });
      Chance2.prototype.d30 = diceFn({ min: 1, max: 30 });
      Chance2.prototype.d100 = diceFn({ min: 1, max: 100 });
      Chance2.prototype.rpg = function(thrown, options) {
        options = initOptions(options);
        if (!thrown) {
          throw new RangeError("Chance: A type of die roll must be included");
        } else {
          var bits = thrown.toLowerCase().split("d"), rolls = [];
          if (bits.length !== 2 || !parseInt(bits[0], 10) || !parseInt(bits[1], 10)) {
            throw new Error("Chance: Invalid format provided. Please provide #d# where the first # is the number of dice to roll, the second # is the max of each die");
          }
          for (var i2 = bits[0]; i2 > 0; i2--) {
            rolls[i2 - 1] = this.natural({ min: 1, max: bits[1] });
          }
          return typeof options.sum !== "undefined" && options.sum ? rolls.reduce(function(p, c) {
            return p + c;
          }) : rolls;
        }
      };
      Chance2.prototype.guid = function(options) {
        options = initOptions(options, { version: 5 });
        var guid_pool = "abcdef1234567890", variant_pool = "ab89", guid = this.string({ pool: guid_pool, length: 8 }) + "-" + this.string({ pool: guid_pool, length: 4 }) + "-" + // The Version
        options.version + this.string({ pool: guid_pool, length: 3 }) + "-" + // The Variant
        this.string({ pool: variant_pool, length: 1 }) + this.string({ pool: guid_pool, length: 3 }) + "-" + this.string({ pool: guid_pool, length: 12 });
        return guid;
      };
      Chance2.prototype.hash = function(options) {
        options = initOptions(options, { length: 40, casing: "lower" });
        var pool = options.casing === "upper" ? HEX_POOL.toUpperCase() : HEX_POOL;
        return this.string({ pool, length: options.length });
      };
      Chance2.prototype.luhn_check = function(num) {
        var str = num.toString();
        var checkDigit = +str.substring(str.length - 1);
        return checkDigit === this.luhn_calculate(+str.substring(0, str.length - 1));
      };
      Chance2.prototype.luhn_calculate = function(num) {
        var digits = num.toString().split("").reverse();
        var sum = 0;
        var digit;
        for (var i2 = 0, l = digits.length; l > i2; ++i2) {
          digit = +digits[i2];
          if (i2 % 2 === 0) {
            digit *= 2;
            if (digit > 9) {
              digit -= 9;
            }
          }
          sum += digit;
        }
        return sum * 9 % 10;
      };
      Chance2.prototype.md5 = function(options) {
        var opts = { str: "", key: null, raw: false };
        if (!options) {
          opts.str = this.string();
          options = {};
        } else if (typeof options === "string") {
          opts.str = options;
          options = {};
        } else if (typeof options !== "object") {
          return null;
        } else if (options.constructor === "Array") {
          return null;
        }
        opts = initOptions(options, opts);
        if (!opts.str) {
          throw new Error("A parameter is required to return an md5 hash.");
        }
        return this.bimd5.md5(opts.str, opts.key, opts.raw);
      };
      Chance2.prototype.file = function(options) {
        var fileOptions = options || {};
        var poolCollectionKey = "fileExtension";
        var typeRange = Object.keys(this.get("fileExtension"));
        var fileName;
        var fileExtension;
        fileName = this.word({ length: fileOptions.length });
        if (fileOptions.extension) {
          fileExtension = fileOptions.extension;
          return fileName + "." + fileExtension;
        }
        if (fileOptions.extensions) {
          if (Array.isArray(fileOptions.extensions)) {
            fileExtension = this.pickone(fileOptions.extensions);
            return fileName + "." + fileExtension;
          } else if (fileOptions.extensions.constructor === Object) {
            var extensionObjectCollection = fileOptions.extensions;
            var keys = Object.keys(extensionObjectCollection);
            fileExtension = this.pickone(extensionObjectCollection[this.pickone(keys)]);
            return fileName + "." + fileExtension;
          }
          throw new Error("Chance: Extensions must be an Array or Object");
        }
        if (fileOptions.fileType) {
          var fileType = fileOptions.fileType;
          if (typeRange.indexOf(fileType) !== -1) {
            fileExtension = this.pickone(this.get(poolCollectionKey)[fileType]);
            return fileName + "." + fileExtension;
          }
          throw new RangeError("Chance: Expect file type value to be 'raster', 'vector', '3d' or 'document'");
        }
        fileExtension = this.pickone(this.get(poolCollectionKey)[this.pickone(typeRange)]);
        return fileName + "." + fileExtension;
      };
      Chance2.prototype.fileWithContent = function(options) {
        var fileOptions = options || {};
        var fileName = "fileName" in fileOptions ? fileOptions.fileName : this.file().split(".")[0];
        fileName += "." + ("fileExtension" in fileOptions ? fileOptions.fileExtension : this.file().split(".")[1]);
        if (typeof fileOptions.fileSize !== "number") {
          throw new Error("File size must be an integer");
        }
        var file = {
          fileData: this.buffer({ length: fileOptions.fileSize }),
          fileName
        };
        return file;
      };
      var data = {
        firstNames: {
          "male": {
            "en": ["James", "John", "Robert", "Michael", "William", "David", "Richard", "Joseph", "Charles", "Thomas", "Christopher", "Daniel", "Matthew", "George", "Donald", "Anthony", "Paul", "Mark", "Edward", "Steven", "Kenneth", "Andrew", "Brian", "Joshua", "Kevin", "Ronald", "Timothy", "Jason", "Jeffrey", "Frank", "Gary", "Ryan", "Nicholas", "Eric", "Stephen", "Jacob", "Larry", "Jonathan", "Scott", "Raymond", "Justin", "Brandon", "Gregory", "Samuel", "Benjamin", "Patrick", "Jack", "Henry", "Walter", "Dennis", "Jerry", "Alexander", "Peter", "Tyler", "Douglas", "Harold", "Aaron", "Jose", "Adam", "Arthur", "Zachary", "Carl", "Nathan", "Albert", "Kyle", "Lawrence", "Joe", "Willie", "Gerald", "Roger", "Keith", "Jeremy", "Terry", "Harry", "Ralph", "Sean", "Jesse", "Roy", "Louis", "Billy", "Austin", "Bruce", "Eugene", "Christian", "Bryan", "Wayne", "Russell", "Howard", "Fred", "Ethan", "Jordan", "Philip", "Alan", "Juan", "Randy", "Vincent", "Bobby", "Dylan", "Johnny", "Phillip", "Victor", "Clarence", "Ernest", "Martin", "Craig", "Stanley", "Shawn", "Travis", "Bradley", "Leonard", "Earl", "Gabriel", "Jimmy", "Francis", "Todd", "Noah", "Danny", "Dale", "Cody", "Carlos", "Allen", "Frederick", "Logan", "Curtis", "Alex", "Joel", "Luis", "Norman", "Marvin", "Glenn", "Tony", "Nathaniel", "Rodney", "Melvin", "Alfred", "Steve", "Cameron", "Chad", "Edwin", "Caleb", "Evan", "Antonio", "Lee", "Herbert", "Jeffery", "Isaac", "Derek", "Ricky", "Marcus", "Theodore", "Elijah", "Luke", "Jesus", "Eddie", "Troy", "Mike", "Dustin", "Ray", "Adrian", "Bernard", "Leroy", "Angel", "Randall", "Wesley", "Ian", "Jared", "Mason", "Hunter", "Calvin", "Oscar", "Clifford", "Jay", "Shane", "Ronnie", "Barry", "Lucas", "Corey", "Manuel", "Leo", "Tommy", "Warren", "Jackson", "Isaiah", "Connor", "Don", "Dean", "Jon", "Julian", "Miguel", "Bill", "Lloyd", "Charlie", "Mitchell", "Leon", "Jerome", "Darrell", "Jeremiah", "Alvin", "Brett", "Seth", "Floyd", "Jim", "Blake", "Micheal", "Gordon", "Trevor", "Lewis", "Erik", "Edgar", "Vernon", "Devin", "Gavin", "Jayden", "Chris", "Clyde", "Tom", "Derrick", "Mario", "Brent", "Marc", "Herman", "Chase", "Dominic", "Ricardo", "Franklin", "Maurice", "Max", "Aiden", "Owen", "Lester", "Gilbert", "Elmer", "Gene", "Francisco", "Glen", "Cory", "Garrett", "Clayton", "Sam", "Jorge", "Chester", "Alejandro", "Jeff", "Harvey", "Milton", "Cole", "Ivan", "Andre", "Duane", "Landon"],
            // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0163
            "it": ["Adolfo", "Alberto", "Aldo", "Alessandro", "Alessio", "Alfredo", "Alvaro", "Andrea", "Angelo", "Angiolo", "Antonino", "Antonio", "Attilio", "Benito", "Bernardo", "Bruno", "Carlo", "Cesare", "Christian", "Claudio", "Corrado", "Cosimo", "Cristian", "Cristiano", "Daniele", "Dario", "David", "Davide", "Diego", "Dino", "Domenico", "Duccio", "Edoardo", "Elia", "Elio", "Emanuele", "Emiliano", "Emilio", "Enrico", "Enzo", "Ettore", "Fabio", "Fabrizio", "Federico", "Ferdinando", "Fernando", "Filippo", "Francesco", "Franco", "Gabriele", "Giacomo", "Giampaolo", "Giampiero", "Giancarlo", "Gianfranco", "Gianluca", "Gianmarco", "Gianni", "Gino", "Giorgio", "Giovanni", "Giuliano", "Giulio", "Giuseppe", "Graziano", "Gregorio", "Guido", "Iacopo", "Jacopo", "Lapo", "Leonardo", "Lorenzo", "Luca", "Luciano", "Luigi", "Manuel", "Marcello", "Marco", "Marino", "Mario", "Massimiliano", "Massimo", "Matteo", "Mattia", "Maurizio", "Mauro", "Michele", "Mirko", "Mohamed", "Nello", "Neri", "Niccolò", "Nicola", "Osvaldo", "Otello", "Paolo", "Pier Luigi", "Piero", "Pietro", "Raffaele", "Remo", "Renato", "Renzo", "Riccardo", "Roberto", "Rolando", "Romano", "Salvatore", "Samuele", "Sandro", "Sergio", "Silvano", "Simone", "Stefano", "Thomas", "Tommaso", "Ubaldo", "Ugo", "Umberto", "Valerio", "Valter", "Vasco", "Vincenzo", "Vittorio"],
            // Data taken from http://www.svbkindernamen.nl/int/nl/kindernamen/index.html
            "nl": ["Aaron", "Abel", "Adam", "Adriaan", "Albert", "Alexander", "Ali", "Arjen", "Arno", "Bart", "Bas", "Bastiaan", "Benjamin", "Bob", "Boris", "Bram", "Brent", "Cas", "Casper", "Chris", "Christiaan", "Cornelis", "Daan", "Daley", "Damian", "Dani", "Daniel", "Daniël", "David", "Dean", "Dirk", "Dylan", "Egbert", "Elijah", "Erik", "Erwin", "Evert", "Ezra", "Fabian", "Fedde", "Finn", "Florian", "Floris", "Frank", "Frans", "Frederik", "Freek", "Geert", "Gerard", "Gerben", "Gerrit", "Gijs", "Guus", "Hans", "Hendrik", "Henk", "Herman", "Hidde", "Hugo", "Jaap", "Jan Jaap", "Jan-Willem", "Jack", "Jacob", "Jan", "Jason", "Jasper", "Jayden", "Jelle", "Jelte", "Jens", "Jeroen", "Jesse", "Jim", "Job", "Joep", "Johannes", "John", "Jonathan", "Joris", "Joshua", "Joël", "Julian", "Kees", "Kevin", "Koen", "Lars", "Laurens", "Leendert", "Lennard", "Lodewijk", "Luc", "Luca", "Lucas", "Lukas", "Luuk", "Maarten", "Marcus", "Martijn", "Martin", "Matthijs", "Maurits", "Max", "Mees", "Melle", "Mick", "Mika", "Milan", "Mohamed", "Mohammed", "Morris", "Muhammed", "Nathan", "Nick", "Nico", "Niek", "Niels", "Noah", "Noud", "Olivier", "Oscar", "Owen", "Paul", "Pepijn", "Peter", "Pieter", "Pim", "Quinten", "Reinier", "Rens", "Robin", "Ruben", "Sam", "Samuel", "Sander", "Sebastiaan", "Sem", "Sep", "Sepp", "Siem", "Simon", "Stan", "Stef", "Steven", "Stijn", "Sven", "Teun", "Thijmen", "Thijs", "Thomas", "Tijn", "Tim", "Timo", "Tobias", "Tom", "Victor", "Vince", "Willem", "Wim", "Wouter", "Yusuf"],
            // Data taken from https://fr.wikipedia.org/wiki/Liste_de_pr%C3%A9noms_fran%C3%A7ais_et_de_la_francophonie
            "fr": ["Aaron", "Abdon", "Abel", "Abélard", "Abelin", "Abondance", "Abraham", "Absalon", "Acace", "Achaire", "Achille", "Adalard", "Adalbald", "Adalbéron", "Adalbert", "Adalric", "Adam", "Adegrin", "Adel", "Adelin", "Andelin", "Adelphe", "Adam", "Adéodat", "Adhémar", "Adjutor", "Adolphe", "Adonis", "Adon", "Adrien", "Agapet", "Agathange", "Agathon", "Agilbert", "Agénor", "Agnan", "Aignan", "Agrippin", "Aimable", "Aimé", "Alain", "Alban", "Albin", "Aubin", "Albéric", "Albert", "Albertet", "Alcibiade", "Alcide", "Alcée", "Alcime", "Aldonce", "Aldric", "Aldéric", "Aleaume", "Alexandre", "Alexis", "Alix", "Alliaume", "Aleaume", "Almine", "Almire", "Aloïs", "Alphée", "Alphonse", "Alpinien", "Alverède", "Amalric", "Amaury", "Amandin", "Amant", "Ambroise", "Amédée", "Amélien", "Amiel", "Amour", "Anaël", "Anastase", "Anatole", "Ancelin", "Andéol", "Andoche", "André", "Andoche", "Ange", "Angelin", "Angilbe", "Anglebert", "Angoustan", "Anicet", "Anne", "Annibal", "Ansbert", "Anselme", "Anthelme", "Antheaume", "Anthime", "Antide", "Antoine", "Antonius", "Antonin", "Apollinaire", "Apollon", "Aquilin", "Arcade", "Archambaud", "Archambeau", "Archange", "Archibald", "Arian", "Ariel", "Ariste", "Aristide", "Armand", "Armel", "Armin", "Arnould", "Arnaud", "Arolde", "Arsène", "Arsinoé", "Arthaud", "Arthème", "Arthur", "Ascelin", "Athanase", "Aubry", "Audebert", "Audouin", "Audran", "Audric", "Auguste", "Augustin", "Aurèle", "Aurélien", "Aurian", "Auxence", "Axel", "Aymard", "Aymeric", "Aymon", "Aymond", "Balthazar", "Baptiste", "Barnabé", "Barthélemy", "Bartimée", "Basile", "Bastien", "Baudouin", "Bénigne", "Benjamin", "Benoît", "Bérenger", "Bérard", "Bernard", "Bertrand", "Blaise", "Bon", "Boniface", "Bouchard", "Brice", "Brieuc", "Bruno", "Brunon", "Calixte", "Calliste", "Camélien", "Camille", "Camillien", "Candide", "Caribert", "Carloman", "Cassandre", "Cassien", "Cédric", "Céleste", "Célestin", "Célien", "Césaire", "César", "Charles", "Charlemagne", "Childebert", "Chilpéric", "Chrétien", "Christian", "Christodule", "Christophe", "Chrysostome", "Clarence", "Claude", "Claudien", "Cléandre", "Clément", "Clotaire", "Côme", "Constance", "Constant", "Constantin", "Corentin", "Cyprien", "Cyriaque", "Cyrille", "Cyril", "Damien", "Daniel", "David", "Delphin", "Denis", "Désiré", "Didier", "Dieudonné", "Dimitri", "Dominique", "Dorian", "Dorothée", "Edgard", "Edmond", "Édouard", "Éleuthère", "Élie", "Élisée", "Émeric", "Émile", "Émilien", "Emmanuel", "Enguerrand", "Épiphane", "Éric", "Esprit", "Ernest", "Étienne", "Eubert", "Eudes", "Eudoxe", "Eugène", "Eusèbe", "Eustache", "Évariste", "Évrard", "Fabien", "Fabrice", "Falba", "Félicité", "Félix", "Ferdinand", "Fiacre", "Fidèle", "Firmin", "Flavien", "Flodoard", "Florent", "Florentin", "Florestan", "Florian", "Fortuné", "Foulques", "Francisque", "François", "Français", "Franciscus", "Francs", "Frédéric", "Fulbert", "Fulcran", "Fulgence", "Gabin", "Gabriel", "Gaël", "Garnier", "Gaston", "Gaspard", "Gatien", "Gaud", "Gautier", "Gédéon", "Geoffroy", "Georges", "Géraud", "Gérard", "Gerbert", "Germain", "Gervais", "Ghislain", "Gilbert", "Gilles", "Girart", "Gislebert", "Gondebaud", "Gonthier", "Gontran", "Gonzague", "Grégoire", "Guérin", "Gui", "Guillaume", "Gustave", "Guy", "Guyot", "Hardouin", "Hector", "Hédelin", "Hélier", "Henri", "Herbert", "Herluin", "Hervé", "Hilaire", "Hildebert", "Hincmar", "Hippolyte", "Honoré", "Hubert", "Hugues", "Innocent", "Isabeau", "Isidore", "Jacques", "Japhet", "Jason", "Jean", "Jeannel", "Jeannot", "Jérémie", "Jérôme", "Joachim", "Joanny", "Job", "Jocelyn", "Joël", "Johan", "Jonas", "Jonathan", "Joseph", "Josse", "Josselin", "Jourdain", "Jude", "Judicaël", "Jules", "Julien", "Juste", "Justin", "Lambert", "Landry", "Laurent", "Lazare", "Léandre", "Léon", "Léonard", "Léopold", "Leu", "Loup", "Leufroy", "Libère", "Liétald", "Lionel", "Loïc", "Longin", "Lorrain", "Lorraine", "Lothaire", "Louis", "Loup", "Luc", "Lucas", "Lucien", "Ludolphe", "Ludovic", "Macaire", "Malo", "Mamert", "Manassé", "Marc", "Marceau", "Marcel", "Marcelin", "Marius", "Marseille", "Martial", "Martin", "Mathurin", "Matthias", "Mathias", "Matthieu", "Maugis", "Maurice", "Mauricet", "Maxence", "Maxime", "Maximilien", "Mayeul", "Médéric", "Melchior", "Mence", "Merlin", "Mérovée", "Michaël", "Michel", "Moïse", "Morgan", "Nathan", "Nathanaël", "Narcisse", "Néhémie", "Nestor", "Nestor", "Nicéphore", "Nicolas", "Noé", "Noël", "Norbert", "Normand", "Normands", "Octave", "Odilon", "Odon", "Oger", "Olivier", "Oury", "Pacôme", "Palémon", "Parfait", "Pascal", "Paterne", "Patrice", "Paul", "Pépin", "Perceval", "Philémon", "Philibert", "Philippe", "Philothée", "Pie", "Pierre", "Pierrick", "Prosper", "Quentin", "Raoul", "Raphaël", "Raymond", "Régis", "Réjean", "Rémi", "Renaud", "René", "Reybaud", "Richard", "Robert", "Roch", "Rodolphe", "Rodrigue", "Roger", "Roland", "Romain", "Romuald", "Roméo", "Rome", "Ronan", "Roselin", "Salomon", "Samuel", "Savin", "Savinien", "Scholastique", "Sébastien", "Séraphin", "Serge", "Séverin", "Sidoine", "Sigebert", "Sigismond", "Silvère", "Simon", "Siméon", "Sixte", "Stanislas", "Stéphane", "Stephan", "Sylvain", "Sylvestre", "Tancrède", "Tanguy", "Taurin", "Théodore", "Théodose", "Théophile", "Théophraste", "Thibault", "Thibert", "Thierry", "Thomas", "Timoléon", "Timothée", "Titien", "Tonnin", "Toussaint", "Trajan", "Tristan", "Turold", "Tim", "Ulysse", "Urbain", "Valentin", "Valère", "Valéry", "Venance", "Venant", "Venceslas", "Vianney", "Victor", "Victorien", "Victorin", "Vigile", "Vincent", "Vital", "Vitalien", "Vivien", "Waleran", "Wandrille", "Xavier", "Xénophon", "Yves", "Zacharie", "Zaché", "Zéphirin"]
          },
          "female": {
            "en": ["Mary", "Emma", "Elizabeth", "Minnie", "Margaret", "Ida", "Alice", "Bertha", "Sarah", "Annie", "Clara", "Ella", "Florence", "Cora", "Martha", "Laura", "Nellie", "Grace", "Carrie", "Maude", "Mabel", "Bessie", "Jennie", "Gertrude", "Julia", "Hattie", "Edith", "Mattie", "Rose", "Catherine", "Lillian", "Ada", "Lillie", "Helen", "Jessie", "Louise", "Ethel", "Lula", "Myrtle", "Eva", "Frances", "Lena", "Lucy", "Edna", "Maggie", "Pearl", "Daisy", "Fannie", "Josephine", "Dora", "Rosa", "Katherine", "Agnes", "Marie", "Nora", "May", "Mamie", "Blanche", "Stella", "Ellen", "Nancy", "Effie", "Sallie", "Nettie", "Della", "Lizzie", "Flora", "Susie", "Maud", "Mae", "Etta", "Harriet", "Sadie", "Caroline", "Katie", "Lydia", "Elsie", "Kate", "Susan", "Mollie", "Alma", "Addie", "Georgia", "Eliza", "Lulu", "Nannie", "Lottie", "Amanda", "Belle", "Charlotte", "Rebecca", "Ruth", "Viola", "Olive", "Amelia", "Hannah", "Jane", "Virginia", "Emily", "Matilda", "Irene", "Kathryn", "Esther", "Willie", "Henrietta", "Ollie", "Amy", "Rachel", "Sara", "Estella", "Theresa", "Augusta", "Ora", "Pauline", "Josie", "Lola", "Sophia", "Leona", "Anne", "Mildred", "Ann", "Beulah", "Callie", "Lou", "Delia", "Eleanor", "Barbara", "Iva", "Louisa", "Maria", "Mayme", "Evelyn", "Estelle", "Nina", "Betty", "Marion", "Bettie", "Dorothy", "Luella", "Inez", "Lela", "Rosie", "Allie", "Millie", "Janie", "Cornelia", "Victoria", "Ruby", "Winifred", "Alta", "Celia", "Christine", "Beatrice", "Birdie", "Harriett", "Mable", "Myra", "Sophie", "Tillie", "Isabel", "Sylvia", "Carolyn", "Isabelle", "Leila", "Sally", "Ina", "Essie", "Bertie", "Nell", "Alberta", "Katharine", "Lora", "Rena", "Mina", "Rhoda", "Mathilda", "Abbie", "Eula", "Dollie", "Hettie", "Eunice", "Fanny", "Ola", "Lenora", "Adelaide", "Christina", "Lelia", "Nelle", "Sue", "Johanna", "Lilly", "Lucinda", "Minerva", "Lettie", "Roxie", "Cynthia", "Helena", "Hilda", "Hulda", "Bernice", "Genevieve", "Jean", "Cordelia", "Marian", "Francis", "Jeanette", "Adeline", "Gussie", "Leah", "Lois", "Lura", "Mittie", "Hallie", "Isabella", "Olga", "Phoebe", "Teresa", "Hester", "Lida", "Lina", "Winnie", "Claudia", "Marguerite", "Vera", "Cecelia", "Bess", "Emilie", "Rosetta", "Verna", "Myrtie", "Cecilia", "Elva", "Olivia", "Ophelia", "Georgie", "Elnora", "Violet", "Adele", "Lily", "Linnie", "Loretta", "Madge", "Polly", "Virgie", "Eugenia", "Lucile", "Lucille", "Mabelle", "Rosalie"],
            // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0162
            "it": ["Ada", "Adriana", "Alessandra", "Alessia", "Alice", "Angela", "Anna", "Anna Maria", "Annalisa", "Annita", "Annunziata", "Antonella", "Arianna", "Asia", "Assunta", "Aurora", "Barbara", "Beatrice", "Benedetta", "Bianca", "Bruna", "Camilla", "Carla", "Carlotta", "Carmela", "Carolina", "Caterina", "Catia", "Cecilia", "Chiara", "Cinzia", "Clara", "Claudia", "Costanza", "Cristina", "Daniela", "Debora", "Diletta", "Dina", "Donatella", "Elena", "Eleonora", "Elisa", "Elisabetta", "Emanuela", "Emma", "Eva", "Federica", "Fernanda", "Fiorella", "Fiorenza", "Flora", "Franca", "Francesca", "Gabriella", "Gaia", "Gemma", "Giada", "Gianna", "Gina", "Ginevra", "Giorgia", "Giovanna", "Giulia", "Giuliana", "Giuseppa", "Giuseppina", "Grazia", "Graziella", "Greta", "Ida", "Ilaria", "Ines", "Iolanda", "Irene", "Irma", "Isabella", "Jessica", "Laura", "Lea", "Letizia", "Licia", "Lidia", "Liliana", "Lina", "Linda", "Lisa", "Livia", "Loretta", "Luana", "Lucia", "Luciana", "Lucrezia", "Luisa", "Manuela", "Mara", "Marcella", "Margherita", "Maria", "Maria Cristina", "Maria Grazia", "Maria Luisa", "Maria Pia", "Maria Teresa", "Marina", "Marisa", "Marta", "Martina", "Marzia", "Matilde", "Melissa", "Michela", "Milena", "Mirella", "Monica", "Natalina", "Nella", "Nicoletta", "Noemi", "Olga", "Paola", "Patrizia", "Piera", "Pierina", "Raffaella", "Rebecca", "Renata", "Rina", "Rita", "Roberta", "Rosa", "Rosanna", "Rossana", "Rossella", "Sabrina", "Sandra", "Sara", "Serena", "Silvana", "Silvia", "Simona", "Simonetta", "Sofia", "Sonia", "Stefania", "Susanna", "Teresa", "Tina", "Tiziana", "Tosca", "Valentina", "Valeria", "Vanda", "Vanessa", "Vanna", "Vera", "Veronica", "Vilma", "Viola", "Virginia", "Vittoria"],
            // Data taken from http://www.svbkindernamen.nl/int/nl/kindernamen/index.html
            "nl": ["Ada", "Arianne", "Afke", "Amanda", "Amber", "Amy", "Aniek", "Anita", "Anja", "Anna", "Anne", "Annelies", "Annemarie", "Annette", "Anouk", "Astrid", "Aukje", "Barbara", "Bianca", "Carla", "Carlijn", "Carolien", "Chantal", "Charlotte", "Claudia", "Daniëlle", "Debora", "Diane", "Dora", "Eline", "Elise", "Ella", "Ellen", "Emma", "Esmee", "Evelien", "Esther", "Erica", "Eva", "Femke", "Fleur", "Floor", "Froukje", "Gea", "Gerda", "Hanna", "Hanneke", "Heleen", "Hilde", "Ilona", "Ina", "Inge", "Ingrid", "Iris", "Isabel", "Isabelle", "Janneke", "Jasmijn", "Jeanine", "Jennifer", "Jessica", "Johanna", "Joke", "Julia", "Julie", "Karen", "Karin", "Katja", "Kim", "Lara", "Laura", "Lena", "Lianne", "Lieke", "Lilian", "Linda", "Lisa", "Lisanne", "Lotte", "Louise", "Maaike", "Manon", "Marga", "Maria", "Marissa", "Marit", "Marjolein", "Martine", "Marleen", "Melissa", "Merel", "Miranda", "Michelle", "Mirjam", "Mirthe", "Naomi", "Natalie", "Nienke", "Nina", "Noortje", "Olivia", "Patricia", "Paula", "Paulien", "Ramona", "Ria", "Rianne", "Roos", "Rosanne", "Ruth", "Sabrina", "Sandra", "Sanne", "Sara", "Saskia", "Silvia", "Sofia", "Sophie", "Sonja", "Suzanne", "Tamara", "Tess", "Tessa", "Tineke", "Valerie", "Vanessa", "Veerle", "Vera", "Victoria", "Wendy", "Willeke", "Yvonne", "Zoë"],
            // Data taken from https://fr.wikipedia.org/wiki/Liste_de_pr%C3%A9noms_fran%C3%A7ais_et_de_la_francophonie
            "fr": ["Abdon", "Abel", "Abigaëlle", "Abigaïl", "Acacius", "Acanthe", "Adalbert", "Adalsinde", "Adegrine", "Adélaïde", "Adèle", "Adélie", "Adeline", "Adeltrude", "Adolphe", "Adonis", "Adrastée", "Adrehilde", "Adrienne", "Agathe", "Agilbert", "Aglaé", "Aignan", "Agneflète", "Agnès", "Agrippine", "Aimé", "Alaine", "Alaïs", "Albane", "Albérade", "Alberte", "Alcide", "Alcine", "Alcyone", "Aldegonde", "Aleth", "Alexandrine", "Alexine", "Alice", "Aliénor", "Aliette", "Aline", "Alix", "Alizé", "Aloïse", "Aloyse", "Alphonsine", "Althée", "Amaliane", "Amalthée", "Amande", "Amandine", "Amant", "Amarande", "Amaranthe", "Amaryllis", "Ambre", "Ambroisie", "Amélie", "Améthyste", "Aminte", "Anaël", "Anaïs", "Anastasie", "Anatole", "Ancelin", "Andrée", "Anémone", "Angadrême", "Angèle", "Angeline", "Angélique", "Angilbert", "Anicet", "Annabelle", "Anne", "Annette", "Annick", "Annie", "Annonciade", "Ansbert", "Anstrudie", "Anthelme", "Antigone", "Antoinette", "Antonine", "Aphélie", "Apolline", "Apollonie", "Aquiline", "Arabelle", "Arcadie", "Archange", "Argine", "Ariane", "Aricie", "Ariel", "Arielle", "Arlette", "Armance", "Armande", "Armandine", "Armelle", "Armide", "Armelle", "Armin", "Arnaud", "Arsène", "Arsinoé", "Artémis", "Arthur", "Ascelin", "Ascension", "Assomption", "Astarté", "Astérie", "Astrée", "Astrid", "Athalie", "Athanasie", "Athina", "Aube", "Albert", "Aude", "Audrey", "Augustine", "Aure", "Aurélie", "Aurélien", "Aurèle", "Aurore", "Auxence", "Aveline", "Abigaëlle", "Avoye", "Axelle", "Aymard", "Azalée", "Adèle", "Adeline", "Barbe", "Basilisse", "Bathilde", "Béatrice", "Béatrix", "Bénédicte", "Bérengère", "Bernadette", "Berthe", "Bertille", "Beuve", "Blanche", "Blanc", "Blandine", "Brigitte", "Brune", "Brunehilde", "Callista", "Camille", "Capucine", "Carine", "Caroline", "Cassandre", "Catherine", "Cécile", "Céleste", "Célestine", "Céline", "Chantal", "Charlène", "Charline", "Charlotte", "Chloé", "Christelle", "Christiane", "Christine", "Claire", "Clara", "Claude", "Claudine", "Clarisse", "Clémence", "Clémentine", "Cléo", "Clio", "Clotilde", "Coline", "Conception", "Constance", "Coralie", "Coraline", "Corentine", "Corinne", "Cyrielle", "Daniel", "Daniel", "Daphné", "Débora", "Delphine", "Denise", "Diane", "Dieudonné", "Dominique", "Doriane", "Dorothée", "Douce", "Édith", "Edmée", "Éléonore", "Éliane", "Élia", "Éliette", "Élisabeth", "Élise", "Ella", "Élodie", "Éloïse", "Elsa", "Émeline", "Émérance", "Émérentienne", "Émérencie", "Émilie", "Emma", "Emmanuelle", "Emmelie", "Ernestine", "Esther", "Estelle", "Eudoxie", "Eugénie", "Eulalie", "Euphrasie", "Eusébie", "Évangéline", "Eva", "Ève", "Évelyne", "Fanny", "Fantine", "Faustine", "Félicie", "Fernande", "Flavie", "Fleur", "Flore", "Florence", "Florie", "Fortuné", "France", "Francia", "Françoise", "Francine", "Gabrielle", "Gaëlle", "Garance", "Geneviève", "Georgette", "Gerberge", "Germaine", "Gertrude", "Gisèle", "Guenièvre", "Guilhemine", "Guillemette", "Gustave", "Gwenael", "Hélène", "Héloïse", "Henriette", "Hermine", "Hermione", "Hippolyte", "Honorine", "Hortense", "Huguette", "Ines", "Irène", "Irina", "Iris", "Isabeau", "Isabelle", "Iseult", "Isolde", "Ismérie", "Jacinthe", "Jacqueline", "Jade", "Janine", "Jeanne", "Jocelyne", "Joëlle", "Joséphine", "Judith", "Julia", "Julie", "Jules", "Juliette", "Justine", "Katy", "Kathy", "Katie", "Laura", "Laure", "Laureline", "Laurence", "Laurene", "Lauriane", "Laurianne", "Laurine", "Léa", "Léna", "Léonie", "Léon", "Léontine", "Lorraine", "Lucie", "Lucienne", "Lucille", "Ludivine", "Lydie", "Lydie", "Megane", "Madeleine", "Magali", "Maguelone", "Mallaury", "Manon", "Marceline", "Margot", "Marguerite", "Marianne", "Marie", "Myriam", "Marie", "Marine", "Marion", "Marlène", "Marthe", "Martine", "Mathilde", "Maud", "Maureen", "Mauricette", "Maxime", "Mélanie", "Melissa", "Mélissandre", "Mélisande", "Mélodie", "Michel", "Micheline", "Mireille", "Miriam", "Moïse", "Monique", "Morgane", "Muriel", "Mylène", "Nadège", "Nadine", "Nathalie", "Nicole", "Nicolette", "Nine", "Noël", "Noémie", "Océane", "Odette", "Odile", "Olive", "Olivia", "Olympe", "Ombline", "Ombeline", "Ophélie", "Oriande", "Oriane", "Ozanne", "Pascale", "Pascaline", "Paule", "Paulette", "Pauline", "Priscille", "Prisca", "Prisque", "Pécine", "Pélagie", "Pénélope", "Perrine", "Pétronille", "Philippine", "Philomène", "Philothée", "Primerose", "Prudence", "Pulchérie", "Quentine", "Quiéta", "Quintia", "Quintilla", "Rachel", "Raphaëlle", "Raymonde", "Rebecca", "Régine", "Réjeanne", "René", "Rita", "Rita", "Rolande", "Romane", "Rosalie", "Rose", "Roseline", "Sabine", "Salomé", "Sandra", "Sandrine", "Sarah", "Ségolène", "Séverine", "Sibylle", "Simone", "Sixt", "Solange", "Soline", "Solène", "Sophie", "Stéphanie", "Suzanne", "Sylvain", "Sylvie", "Tatiana", "Thaïs", "Théodora", "Thérèse", "Tiphaine", "Ursule", "Valentine", "Valérie", "Véronique", "Victoire", "Victorine", "Vinciane", "Violette", "Virginie", "Viviane", "Xavière", "Yolande", "Ysaline", "Yvette", "Yvonne", "Zélie", "Zita", "Zoé"]
          }
        },
        lastNames: {
          "en": ["Smith", "Johnson", "Williams", "Jones", "Brown", "Davis", "Miller", "Wilson", "Moore", "Taylor", "Anderson", "Thomas", "Jackson", "White", "Harris", "Martin", "Thompson", "Garcia", "Martinez", "Robinson", "Clark", "Rodriguez", "Lewis", "Lee", "Walker", "Hall", "Allen", "Young", "Hernandez", "King", "Wright", "Lopez", "Hill", "Scott", "Green", "Adams", "Baker", "Gonzalez", "Nelson", "Carter", "Mitchell", "Perez", "Roberts", "Turner", "Phillips", "Campbell", "Parker", "Evans", "Edwards", "Collins", "Stewart", "Sanchez", "Morris", "Rogers", "Reed", "Cook", "Morgan", "Bell", "Murphy", "Bailey", "Rivera", "Cooper", "Richardson", "Cox", "Howard", "Ward", "Torres", "Peterson", "Gray", "Ramirez", "James", "Watson", "Brooks", "Kelly", "Sanders", "Price", "Bennett", "Wood", "Barnes", "Ross", "Henderson", "Coleman", "Jenkins", "Perry", "Powell", "Long", "Patterson", "Hughes", "Flores", "Washington", "Butler", "Simmons", "Foster", "Gonzales", "Bryant", "Alexander", "Russell", "Griffin", "Diaz", "Hayes", "Myers", "Ford", "Hamilton", "Graham", "Sullivan", "Wallace", "Woods", "Cole", "West", "Jordan", "Owens", "Reynolds", "Fisher", "Ellis", "Harrison", "Gibson", "McDonald", "Cruz", "Marshall", "Ortiz", "Gomez", "Murray", "Freeman", "Wells", "Webb", "Simpson", "Stevens", "Tucker", "Porter", "Hunter", "Hicks", "Crawford", "Henry", "Boyd", "Mason", "Morales", "Kennedy", "Warren", "Dixon", "Ramos", "Reyes", "Burns", "Gordon", "Shaw", "Holmes", "Rice", "Robertson", "Hunt", "Black", "Daniels", "Palmer", "Mills", "Nichols", "Grant", "Knight", "Ferguson", "Rose", "Stone", "Hawkins", "Dunn", "Perkins", "Hudson", "Spencer", "Gardner", "Stephens", "Payne", "Pierce", "Berry", "Matthews", "Arnold", "Wagner", "Willis", "Ray", "Watkins", "Olson", "Carroll", "Duncan", "Snyder", "Hart", "Cunningham", "Bradley", "Lane", "Andrews", "Ruiz", "Harper", "Fox", "Riley", "Armstrong", "Carpenter", "Weaver", "Greene", "Lawrence", "Elliott", "Chavez", "Sims", "Austin", "Peters", "Kelley", "Franklin", "Lawson", "Fields", "Gutierrez", "Ryan", "Schmidt", "Carr", "Vasquez", "Castillo", "Wheeler", "Chapman", "Oliver", "Montgomery", "Richards", "Williamson", "Johnston", "Banks", "Meyer", "Bishop", "McCoy", "Howell", "Alvarez", "Morrison", "Hansen", "Fernandez", "Garza", "Harvey", "Little", "Burton", "Stanley", "Nguyen", "George", "Jacobs", "Reid", "Kim", "Fuller", "Lynch", "Dean", "Gilbert", "Garrett", "Romero", "Welch", "Larson", "Frazier", "Burke", "Hanson", "Day", "Mendoza", "Moreno", "Bowman", "Medina", "Fowler", "Brewer", "Hoffman", "Carlson", "Silva", "Pearson", "Holland", "Douglas", "Fleming", "Jensen", "Vargas", "Byrd", "Davidson", "Hopkins", "May", "Terry", "Herrera", "Wade", "Soto", "Walters", "Curtis", "Neal", "Caldwell", "Lowe", "Jennings", "Barnett", "Graves", "Jimenez", "Horton", "Shelton", "Barrett", "Obrien", "Castro", "Sutton", "Gregory", "McKinney", "Lucas", "Miles", "Craig", "Rodriquez", "Chambers", "Holt", "Lambert", "Fletcher", "Watts", "Bates", "Hale", "Rhodes", "Pena", "Beck", "Newman", "Haynes", "McDaniel", "Mendez", "Bush", "Vaughn", "Parks", "Dawson", "Santiago", "Norris", "Hardy", "Love", "Steele", "Curry", "Powers", "Schultz", "Barker", "Guzman", "Page", "Munoz", "Ball", "Keller", "Chandler", "Weber", "Leonard", "Walsh", "Lyons", "Ramsey", "Wolfe", "Schneider", "Mullins", "Benson", "Sharp", "Bowen", "Daniel", "Barber", "Cummings", "Hines", "Baldwin", "Griffith", "Valdez", "Hubbard", "Salazar", "Reeves", "Warner", "Stevenson", "Burgess", "Santos", "Tate", "Cross", "Garner", "Mann", "Mack", "Moss", "Thornton", "Dennis", "McGee", "Farmer", "Delgado", "Aguilar", "Vega", "Glover", "Manning", "Cohen", "Harmon", "Rodgers", "Robbins", "Newton", "Todd", "Blair", "Higgins", "Ingram", "Reese", "Cannon", "Strickland", "Townsend", "Potter", "Goodwin", "Walton", "Rowe", "Hampton", "Ortega", "Patton", "Swanson", "Joseph", "Francis", "Goodman", "Maldonado", "Yates", "Becker", "Erickson", "Hodges", "Rios", "Conner", "Adkins", "Webster", "Norman", "Malone", "Hammond", "Flowers", "Cobb", "Moody", "Quinn", "Blake", "Maxwell", "Pope", "Floyd", "Osborne", "Paul", "McCarthy", "Guerrero", "Lindsey", "Estrada", "Sandoval", "Gibbs", "Tyler", "Gross", "Fitzgerald", "Stokes", "Doyle", "Sherman", "Saunders", "Wise", "Colon", "Gill", "Alvarado", "Greer", "Padilla", "Simon", "Waters", "Nunez", "Ballard", "Schwartz", "McBride", "Houston", "Christensen", "Klein", "Pratt", "Briggs", "Parsons", "McLaughlin", "Zimmerman", "French", "Buchanan", "Moran", "Copeland", "Roy", "Pittman", "Brady", "McCormick", "Holloway", "Brock", "Poole", "Frank", "Logan", "Owen", "Bass", "Marsh", "Drake", "Wong", "Jefferson", "Park", "Morton", "Abbott", "Sparks", "Patrick", "Norton", "Huff", "Clayton", "Massey", "Lloyd", "Figueroa", "Carson", "Bowers", "Roberson", "Barton", "Tran", "Lamb", "Harrington", "Casey", "Boone", "Cortez", "Clarke", "Mathis", "Singleton", "Wilkins", "Cain", "Bryan", "Underwood", "Hogan", "McKenzie", "Collier", "Luna", "Phelps", "McGuire", "Allison", "Bridges", "Wilkerson", "Nash", "Summers", "Atkins"],
          // Data taken from http://www.dati.gov.it/dataset/comune-di-firenze_0164 (first 1000)
          "it": ["Acciai", "Aglietti", "Agostini", "Agresti", "Ahmed", "Aiazzi", "Albanese", "Alberti", "Alessi", "Alfani", "Alinari", "Alterini", "Amato", "Ammannati", "Ancillotti", "Andrei", "Andreini", "Andreoni", "Angeli", "Anichini", "Antonelli", "Antonini", "Arena", "Ariani", "Arnetoli", "Arrighi", "Baccani", "Baccetti", "Bacci", "Bacherini", "Badii", "Baggiani", "Baglioni", "Bagni", "Bagnoli", "Baldassini", "Baldi", "Baldini", "Ballerini", "Balli", "Ballini", "Balloni", "Bambi", "Banchi", "Bandinelli", "Bandini", "Bani", "Barbetti", "Barbieri", "Barchielli", "Bardazzi", "Bardelli", "Bardi", "Barducci", "Bargellini", "Bargiacchi", "Barni", "Baroncelli", "Baroncini", "Barone", "Baroni", "Baronti", "Bartalesi", "Bartoletti", "Bartoli", "Bartolini", "Bartoloni", "Bartolozzi", "Basagni", "Basile", "Bassi", "Batacchi", "Battaglia", "Battaglini", "Bausi", "Becagli", "Becattini", "Becchi", "Becucci", "Bellandi", "Bellesi", "Belli", "Bellini", "Bellucci", "Bencini", "Benedetti", "Benelli", "Beni", "Benini", "Bensi", "Benucci", "Benvenuti", "Berlincioni", "Bernacchioni", "Bernardi", "Bernardini", "Berni", "Bernini", "Bertelli", "Berti", "Bertini", "Bessi", "Betti", "Bettini", "Biagi", "Biagini", "Biagioni", "Biagiotti", "Biancalani", "Bianchi", "Bianchini", "Bianco", "Biffoli", "Bigazzi", "Bigi", "Biliotti", "Billi", "Binazzi", "Bindi", "Bini", "Biondi", "Bizzarri", "Bocci", "Bogani", "Bolognesi", "Bonaiuti", "Bonanni", "Bonciani", "Boncinelli", "Bondi", "Bonechi", "Bongini", "Boni", "Bonini", "Borchi", "Boretti", "Borghi", "Borghini", "Borgioli", "Borri", "Borselli", "Boschi", "Bottai", "Bracci", "Braccini", "Brandi", "Braschi", "Bravi", "Brazzini", "Breschi", "Brilli", "Brizzi", "Brogelli", "Brogi", "Brogioni", "Brunelli", "Brunetti", "Bruni", "Bruno", "Brunori", "Bruschi", "Bucci", "Bucciarelli", "Buccioni", "Bucelli", "Bulli", "Burberi", "Burchi", "Burgassi", "Burroni", "Bussotti", "Buti", "Caciolli", "Caiani", "Calabrese", "Calamai", "Calamandrei", "Caldini", "Calo'", "Calonaci", "Calosi", "Calvelli", "Cambi", "Camiciottoli", "Cammelli", "Cammilli", "Campolmi", "Cantini", "Capanni", "Capecchi", "Caponi", "Cappelletti", "Cappelli", "Cappellini", "Cappugi", "Capretti", "Caputo", "Carbone", "Carboni", "Cardini", "Carlesi", "Carletti", "Carli", "Caroti", "Carotti", "Carrai", "Carraresi", "Carta", "Caruso", "Casalini", "Casati", "Caselli", "Casini", "Castagnoli", "Castellani", "Castelli", "Castellucci", "Catalano", "Catarzi", "Catelani", "Cavaciocchi", "Cavallaro", "Cavallini", "Cavicchi", "Cavini", "Ceccarelli", "Ceccatelli", "Ceccherelli", "Ceccherini", "Cecchi", "Cecchini", "Cecconi", "Cei", "Cellai", "Celli", "Cellini", "Cencetti", "Ceni", "Cenni", "Cerbai", "Cesari", "Ceseri", "Checcacci", "Checchi", "Checcucci", "Cheli", "Chellini", "Chen", "Cheng", "Cherici", "Cherubini", "Chiaramonti", "Chiarantini", "Chiarelli", "Chiari", "Chiarini", "Chiarugi", "Chiavacci", "Chiesi", "Chimenti", "Chini", "Chirici", "Chiti", "Ciabatti", "Ciampi", "Cianchi", "Cianfanelli", "Cianferoni", "Ciani", "Ciapetti", "Ciappi", "Ciardi", "Ciatti", "Cicali", "Ciccone", "Cinelli", "Cini", "Ciobanu", "Ciolli", "Cioni", "Cipriani", "Cirillo", "Cirri", "Ciucchi", "Ciuffi", "Ciulli", "Ciullini", "Clemente", "Cocchi", "Cognome", "Coli", "Collini", "Colombo", "Colzi", "Comparini", "Conforti", "Consigli", "Conte", "Conti", "Contini", "Coppini", "Coppola", "Corsi", "Corsini", "Corti", "Cortini", "Cosi", "Costa", "Costantini", "Costantino", "Cozzi", "Cresci", "Crescioli", "Cresti", "Crini", "Curradi", "D'Agostino", "D'Alessandro", "D'Amico", "D'Angelo", "Daddi", "Dainelli", "Dallai", "Danti", "Davitti", "De Angelis", "De Luca", "De Marco", "De Rosa", "De Santis", "De Simone", "De Vita", "Degl'Innocenti", "Degli Innocenti", "Dei", "Del Lungo", "Del Re", "Di Marco", "Di Stefano", "Dini", "Diop", "Dobre", "Dolfi", "Donati", "Dondoli", "Dong", "Donnini", "Ducci", "Dumitru", "Ermini", "Esposito", "Evangelisti", "Fabbri", "Fabbrini", "Fabbrizzi", "Fabbroni", "Fabbrucci", "Fabiani", "Facchini", "Faggi", "Fagioli", "Failli", "Faini", "Falciani", "Falcini", "Falcone", "Fallani", "Falorni", "Falsini", "Falugiani", "Fancelli", "Fanelli", "Fanetti", "Fanfani", "Fani", "Fantappie'", "Fantechi", "Fanti", "Fantini", "Fantoni", "Farina", "Fattori", "Favilli", "Fedi", "Fei", "Ferrante", "Ferrara", "Ferrari", "Ferraro", "Ferretti", "Ferri", "Ferrini", "Ferroni", "Fiaschi", "Fibbi", "Fiesoli", "Filippi", "Filippini", "Fini", "Fioravanti", "Fiore", "Fiorentini", "Fiorini", "Fissi", "Focardi", "Foggi", "Fontana", "Fontanelli", "Fontani", "Forconi", "Formigli", "Forte", "Forti", "Fortini", "Fossati", "Fossi", "Francalanci", "Franceschi", "Franceschini", "Franchi", "Franchini", "Franci", "Francini", "Francioni", "Franco", "Frassineti", "Frati", "Fratini", "Frilli", "Frizzi", "Frosali", "Frosini", "Frullini", "Fusco", "Fusi", "Gabbrielli", "Gabellini", "Gagliardi", "Galanti", "Galardi", "Galeotti", "Galletti", "Galli", "Gallo", "Gallori", "Gambacciani", "Gargani", "Garofalo", "Garuglieri", "Gashi", "Gasperini", "Gatti", "Gelli", "Gensini", "Gentile", "Gentili", "Geri", "Gerini", "Gheri", "Ghini", "Giachetti", "Giachi", "Giacomelli", "Gianassi", "Giani", "Giannelli", "Giannetti", "Gianni", "Giannini", "Giannoni", "Giannotti", "Giannozzi", "Gigli", "Giordano", "Giorgetti", "Giorgi", "Giovacchini", "Giovannelli", "Giovannetti", "Giovannini", "Giovannoni", "Giuliani", "Giunti", "Giuntini", "Giusti", "Gonnelli", "Goretti", "Gori", "Gradi", "Gramigni", "Grassi", "Grasso", "Graziani", "Grazzini", "Greco", "Grifoni", "Grillo", "Grimaldi", "Grossi", "Gualtieri", "Guarducci", "Guarino", "Guarnieri", "Guasti", "Guerra", "Guerri", "Guerrini", "Guidi", "Guidotti", "He", "Hoxha", "Hu", "Huang", "Iandelli", "Ignesti", "Innocenti", "Jin", "La Rosa", "Lai", "Landi", "Landini", "Lanini", "Lapi", "Lapini", "Lari", "Lascialfari", "Lastrucci", "Latini", "Lazzeri", "Lazzerini", "Lelli", "Lenzi", "Leonardi", "Leoncini", "Leone", "Leoni", "Lepri", "Li", "Liao", "Lin", "Linari", "Lippi", "Lisi", "Livi", "Lombardi", "Lombardini", "Lombardo", "Longo", "Lopez", "Lorenzi", "Lorenzini", "Lorini", "Lotti", "Lu", "Lucchesi", "Lucherini", "Lunghi", "Lupi", "Madiai", "Maestrini", "Maffei", "Maggi", "Maggini", "Magherini", "Magini", "Magnani", "Magnelli", "Magni", "Magnolfi", "Magrini", "Malavolti", "Malevolti", "Manca", "Mancini", "Manetti", "Manfredi", "Mangani", "Mannelli", "Manni", "Mannini", "Mannucci", "Manuelli", "Manzini", "Marcelli", "Marchese", "Marchetti", "Marchi", "Marchiani", "Marchionni", "Marconi", "Marcucci", "Margheri", "Mari", "Mariani", "Marilli", "Marinai", "Marinari", "Marinelli", "Marini", "Marino", "Mariotti", "Marsili", "Martelli", "Martinelli", "Martini", "Martino", "Marzi", "Masi", "Masini", "Masoni", "Massai", "Materassi", "Mattei", "Matteini", "Matteucci", "Matteuzzi", "Mattioli", "Mattolini", "Matucci", "Mauro", "Mazzanti", "Mazzei", "Mazzetti", "Mazzi", "Mazzini", "Mazzocchi", "Mazzoli", "Mazzoni", "Mazzuoli", "Meacci", "Mecocci", "Meini", "Melani", "Mele", "Meli", "Mengoni", "Menichetti", "Meoni", "Merlini", "Messeri", "Messina", "Meucci", "Miccinesi", "Miceli", "Micheli", "Michelini", "Michelozzi", "Migliori", "Migliorini", "Milani", "Miniati", "Misuri", "Monaco", "Montagnani", "Montagni", "Montanari", "Montelatici", "Monti", "Montigiani", "Montini", "Morandi", "Morandini", "Morelli", "Moretti", "Morganti", "Mori", "Morini", "Moroni", "Morozzi", "Mugnai", "Mugnaini", "Mustafa", "Naldi", "Naldini", "Nannelli", "Nanni", "Nannini", "Nannucci", "Nardi", "Nardini", "Nardoni", "Natali", "Ndiaye", "Nencetti", "Nencini", "Nencioni", "Neri", "Nesi", "Nesti", "Niccolai", "Niccoli", "Niccolini", "Nigi", "Nistri", "Nocentini", "Noferini", "Novelli", "Nucci", "Nuti", "Nutini", "Oliva", "Olivieri", "Olmi", "Orlandi", "Orlandini", "Orlando", "Orsini", "Ortolani", "Ottanelli", "Pacciani", "Pace", "Paci", "Pacini", "Pagani", "Pagano", "Paggetti", "Pagliai", "Pagni", "Pagnini", "Paladini", "Palagi", "Palchetti", "Palloni", "Palmieri", "Palumbo", "Pampaloni", "Pancani", "Pandolfi", "Pandolfini", "Panerai", "Panichi", "Paoletti", "Paoli", "Paolini", "Papi", "Papini", "Papucci", "Parenti", "Parigi", "Parisi", "Parri", "Parrini", "Pasquini", "Passeri", "Pecchioli", "Pecorini", "Pellegrini", "Pepi", "Perini", "Perrone", "Peruzzi", "Pesci", "Pestelli", "Petri", "Petrini", "Petrucci", "Pettini", "Pezzati", "Pezzatini", "Piani", "Piazza", "Piazzesi", "Piazzini", "Piccardi", "Picchi", "Piccini", "Piccioli", "Pieraccini", "Pieraccioni", "Pieralli", "Pierattini", "Pieri", "Pierini", "Pieroni", "Pietrini", "Pini", "Pinna", "Pinto", "Pinzani", "Pinzauti", "Piras", "Pisani", "Pistolesi", "Poggesi", "Poggi", "Poggiali", "Poggiolini", "Poli", "Pollastri", "Porciani", "Pozzi", "Pratellesi", "Pratesi", "Prosperi", "Pruneti", "Pucci", "Puccini", "Puccioni", "Pugi", "Pugliese", "Puliti", "Querci", "Quercioli", "Raddi", "Radu", "Raffaelli", "Ragazzini", "Ranfagni", "Ranieri", "Rastrelli", "Raugei", "Raveggi", "Renai", "Renzi", "Rettori", "Ricci", "Ricciardi", "Ridi", "Ridolfi", "Rigacci", "Righi", "Righini", "Rinaldi", "Risaliti", "Ristori", "Rizzo", "Rocchi", "Rocchini", "Rogai", "Romagnoli", "Romanelli", "Romani", "Romano", "Romei", "Romeo", "Romiti", "Romoli", "Romolini", "Rontini", "Rosati", "Roselli", "Rosi", "Rossetti", "Rossi", "Rossini", "Rovai", "Ruggeri", "Ruggiero", "Russo", "Sabatini", "Saccardi", "Sacchetti", "Sacchi", "Sacco", "Salerno", "Salimbeni", "Salucci", "Salvadori", "Salvestrini", "Salvi", "Salvini", "Sanesi", "Sani", "Sanna", "Santi", "Santini", "Santoni", "Santoro", "Santucci", "Sardi", "Sarri", "Sarti", "Sassi", "Sbolci", "Scali", "Scarpelli", "Scarselli", "Scopetani", "Secci", "Selvi", "Senatori", "Senesi", "Serafini", "Sereni", "Serra", "Sestini", "Sguanci", "Sieni", "Signorini", "Silvestri", "Simoncini", "Simonetti", "Simoni", "Singh", "Sodi", "Soldi", "Somigli", "Sorbi", "Sorelli", "Sorrentino", "Sottili", "Spina", "Spinelli", "Staccioli", "Staderini", "Stefanelli", "Stefani", "Stefanini", "Stella", "Susini", "Tacchi", "Tacconi", "Taddei", "Tagliaferri", "Tamburini", "Tanganelli", "Tani", "Tanini", "Tapinassi", "Tarchi", "Tarchiani", "Targioni", "Tassi", "Tassini", "Tempesti", "Terzani", "Tesi", "Testa", "Testi", "Tilli", "Tinti", "Tirinnanzi", "Toccafondi", "Tofanari", "Tofani", "Tognaccini", "Tonelli", "Tonini", "Torelli", "Torrini", "Tosi", "Toti", "Tozzi", "Trambusti", "Trapani", "Tucci", "Turchi", "Ugolini", "Ulivi", "Valente", "Valenti", "Valentini", "Vangelisti", "Vanni", "Vannini", "Vannoni", "Vannozzi", "Vannucchi", "Vannucci", "Ventura", "Venturi", "Venturini", "Vestri", "Vettori", "Vichi", "Viciani", "Vieri", "Vigiani", "Vignoli", "Vignolini", "Vignozzi", "Villani", "Vinci", "Visani", "Vitale", "Vitali", "Viti", "Viviani", "Vivoli", "Volpe", "Volpi", "Wang", "Wu", "Xu", "Yang", "Ye", "Zagli", "Zani", "Zanieri", "Zanobini", "Zecchi", "Zetti", "Zhang", "Zheng", "Zhou", "Zhu", "Zingoni", "Zini", "Zoppi"],
          // http://www.voornamelijk.nl/meest-voorkomende-achternamen-in-nederland-en-amsterdam/
          "nl": ["Albers", "Alblas", "Appelman", "Baars", "Baas", "Bakker", "Blank", "Bleeker", "Blok", "Blom", "Boer", "Boers", "Boldewijn", "Boon", "Boot", "Bos", "Bosch", "Bosma", "Bosman", "Bouma", "Bouman", "Bouwman", "Brands", "Brouwer", "Burger", "Buijs", "Buitenhuis", "Ceder", "Cohen", "Dekker", "Dekkers", "Dijkman", "Dijkstra", "Driessen", "Drost", "Engel", "Evers", "Faber", "Franke", "Gerritsen", "Goedhart", "Goossens", "Groen", "Groenenberg", "Groot", "Haan", "Hart", "Heemskerk", "Hendriks", "Hermans", "Hoekstra", "Hofman", "Hopman", "Huisman", "Jacobs", "Jansen", "Janssen", "Jonker", "Jaspers", "Keijzer", "Klaassen", "Klein", "Koek", "Koenders", "Kok", "Kool", "Koopman", "Koopmans", "Koning", "Koster", "Kramer", "Kroon", "Kuijpers", "Kuiper", "Kuipers", "Kurt", "Koster", "Kwakman", "Los", "Lubbers", "Maas", "Markus", "Martens", "Meijer", "Mol", "Molenaar", "Mulder", "Nieuwenhuis", "Peeters", "Peters", "Pengel", "Pieters", "Pool", "Post", "Postma", "Prins", "Pronk", "Reijnders", "Rietveld", "Roest", "Roos", "Sanders", "Schaap", "Scheffer", "Schenk", "Schilder", "Schipper", "Schmidt", "Scholten", "Schouten", "Schut", "Schutte", "Schuurman", "Simons", "Smeets", "Smit", "Smits", "Snel", "Swinkels", "Tas", "Terpstra", "Timmermans", "Tol", "Tromp", "Troost", "Valk", "Veenstra", "Veldkamp", "Verbeek", "Verheul", "Verhoeven", "Vermeer", "Vermeulen", "Verweij", "Vink", "Visser", "Voorn", "Vos", "Wagenaar", "Wiersema", "Willems", "Willemsen", "Witteveen", "Wolff", "Wolters", "Zijlstra", "Zwart", "de Beer", "de Boer", "de Bruijn", "de Bruin", "de Graaf", "de Groot", "de Haan", "de Haas", "de Jager", "de Jong", "de Jonge", "de Koning", "de Lange", "de Leeuw", "de Ridder", "de Rooij", "de Ruiter", "de Vos", "de Vries", "de Waal", "de Wit", "de Zwart", "van Beek", "van Boven", "van Dam", "van Dijk", "van Dongen", "van Doorn", "van Egmond", "van Eijk", "van Es", "van Gelder", "van Gelderen", "van Houten", "van Hulst", "van Kempen", "van Kesteren", "van Leeuwen", "van Loon", "van Mill", "van Noord", "van Ommen", "van Ommeren", "van Oosten", "van Oostveen", "van Rijn", "van Schaik", "van Veen", "van Vliet", "van Wijk", "van Wijngaarden", "van den Poel", "van de Pol", "van den Ploeg", "van de Ven", "van den Berg", "van den Bosch", "van den Brink", "van den Broek", "van den Heuvel", "van der Heijden", "van der Horst", "van der Hulst", "van der Kroon", "van der Laan", "van der Linden", "van der Meer", "van der Meij", "van der Meulen", "van der Molen", "van der Sluis", "van der Spek", "van der Veen", "van der Velde", "van der Velden", "van der Vliet", "van der Wal"],
          // https://surnames.behindthename.com/top/lists/england-wales/1991
          "uk": ["Smith", "Jones", "Williams", "Taylor", "Brown", "Davies", "Evans", "Wilson", "Thomas", "Johnson", "Roberts", "Robinson", "Thompson", "Wright", "Walker", "White", "Edwards", "Hughes", "Green", "Hall", "Lewis", "Harris", "Clarke", "Patel", "Jackson", "Wood", "Turner", "Martin", "Cooper", "Hill", "Ward", "Morris", "Moore", "Clark", "Lee", "King", "Baker", "Harrison", "Morgan", "Allen", "James", "Scott", "Phillips", "Watson", "Davis", "Parker", "Price", "Bennett", "Young", "Griffiths", "Mitchell", "Kelly", "Cook", "Carter", "Richardson", "Bailey", "Collins", "Bell", "Shaw", "Murphy", "Miller", "Cox", "Richards", "Khan", "Marshall", "Anderson", "Simpson", "Ellis", "Adams", "Singh", "Begum", "Wilkinson", "Foster", "Chapman", "Powell", "Webb", "Rogers", "Gray", "Mason", "Ali", "Hunt", "Hussain", "Campbell", "Matthews", "Owen", "Palmer", "Holmes", "Mills", "Barnes", "Knight", "Lloyd", "Butler", "Russell", "Barker", "Fisher", "Stevens", "Jenkins", "Murray", "Dixon", "Harvey", "Graham", "Pearson", "Ahmed", "Fletcher", "Walsh", "Kaur", "Gibson", "Howard", "Andrews", "Stewart", "Elliott", "Reynolds", "Saunders", "Payne", "Fox", "Ford", "Pearce", "Day", "Brooks", "West", "Lawrence", "Cole", "Atkinson", "Bradley", "Spencer", "Gill", "Dawson", "Ball", "Burton", "O'brien", "Watts", "Rose", "Booth", "Perry", "Ryan", "Grant", "Wells", "Armstrong", "Francis", "Rees", "Hayes", "Hart", "Hudson", "Newman", "Barrett", "Webster", "Hunter", "Gregory", "Carr", "Lowe", "Page", "Marsh", "Riley", "Dunn", "Woods", "Parsons", "Berry", "Stone", "Reid", "Holland", "Hawkins", "Harding", "Porter", "Robertson", "Newton", "Oliver", "Reed", "Kennedy", "Williamson", "Bird", "Gardner", "Shah", "Dean", "Lane", "Cooke", "Bates", "Henderson", "Parry", "Burgess", "Bishop", "Walton", "Burns", "Nicholson", "Shepherd", "Ross", "Cross", "Long", "Freeman", "Warren", "Nicholls", "Hamilton", "Byrne", "Sutton", "Mcdonald", "Yates", "Hodgson", "Robson", "Curtis", "Hopkins", "O'connor", "Harper", "Coleman", "Watkins", "Moss", "Mccarthy", "Chambers", "O'neill", "Griffin", "Sharp", "Hardy", "Wheeler", "Potter", "Osborne", "Johnston", "Gordon", "Doyle", "Wallace", "George", "Jordan", "Hutchinson", "Rowe", "Burke", "May", "Pritchard", "Gilbert", "Willis", "Higgins", "Read", "Miles", "Stevenson", "Stephenson", "Hammond", "Arnold", "Buckley", "Walters", "Hewitt", "Barber", "Nelson", "Slater", "Austin", "Sullivan", "Whitehead", "Mann", "Frost", "Lambert", "Stephens", "Blake", "Akhtar", "Lynch", "Goodwin", "Barton", "Woodward", "Thomson", "Cunningham", "Quinn", "Barnett", "Baxter", "Bibi", "Clayton", "Nash", "Greenwood", "Jennings", "Holt", "Kemp", "Poole", "Gallagher", "Bond", "Stokes", "Tucker", "Davidson", "Fowler", "Heath", "Norman", "Middleton", "Lawson", "Banks", "French", "Stanley", "Jarvis", "Gibbs", "Ferguson", "Hayward", "Carroll", "Douglas", "Dickinson", "Todd", "Barlow", "Peters", "Lucas", "Knowles", "Hartley", "Miah", "Simmons", "Morton", "Alexander", "Field", "Morrison", "Norris", "Townsend", "Preston", "Hancock", "Thornton", "Baldwin", "Burrows", "Briggs", "Parkinson", "Reeves", "Macdonald", "Lamb", "Black", "Abbott", "Sanders", "Thorpe", "Holden", "Tomlinson", "Perkins", "Ashton", "Rhodes", "Fuller", "Howe", "Bryant", "Vaughan", "Dale", "Davey", "Weston", "Bartlett", "Whittaker", "Davison", "Kent", "Skinner", "Birch", "Morley", "Daniels", "Glover", "Howell", "Cartwright", "Pugh", "Humphreys", "Goddard", "Brennan", "Wall", "Kirby", "Bowen", "Savage", "Bull", "Wong", "Dobson", "Smart", "Wilkins", "Kirk", "Fraser", "Duffy", "Hicks", "Patterson", "Bradshaw", "Little", "Archer", "Warner", "Waters", "O'sullivan", "Farrell", "Brookes", "Atkins", "Kay", "Dodd", "Bentley", "Flynn", "John", "Schofield", "Short", "Haynes", "Wade", "Butcher", "Henry", "Sanderson", "Crawford", "Sheppard", "Bolton", "Coates", "Giles", "Gould", "Houghton", "Gibbons", "Pratt", "Manning", "Law", "Hooper", "Noble", "Dyer", "Rahman", "Clements", "Moran", "Sykes", "Chan", "Doherty", "Connolly", "Joyce", "Franklin", "Hobbs", "Coles", "Herbert", "Steele", "Kerr", "Leach", "Winter", "Owens", "Duncan", "Naylor", "Fleming", "Horton", "Finch", "Fitzgerald", "Randall", "Carpenter", "Marsden", "Browne", "Garner", "Pickering", "Hale", "Dennis", "Vincent", "Chadwick", "Chandler", "Sharpe", "Nolan", "Lyons", "Hurst", "Collier", "Peacock", "Howarth", "Faulkner", "Rice", "Pollard", "Welch", "Norton", "Gough", "Sinclair", "Blackburn", "Bryan", "Conway", "Power", "Cameron", "Daly", "Allan", "Hanson", "Gardiner", "Boyle", "Myers", "Turnbull", "Wallis", "Mahmood", "Sims", "Swift", "Iqbal", "Pope", "Brady", "Chamberlain", "Rowley", "Tyler", "Farmer", "Metcalfe", "Hilton", "Godfrey", "Holloway", "Parkin", "Bray", "Talbot", "Donnelly", "Nixon", "Charlton", "Benson", "Whitehouse", "Barry", "Hope", "Lord", "North", "Storey", "Connor", "Potts", "Bevan", "Hargreaves", "Mclean", "Mistry", "Bruce", "Howells", "Hyde", "Parkes", "Wyatt", "Fry", "Lees", "O'donnell", "Craig", "Forster", "Mckenzie", "Humphries", "Mellor", "Carey", "Ingram", "Summers", "Leonard"],
          // https://surnames.behindthename.com/top/lists/germany/2017
          "de": ["Müller", "Schmidt", "Schneider", "Fischer", "Weber", "Meyer", "Wagner", "Becker", "Schulz", "Hoffmann", "Schäfer", "Koch", "Bauer", "Richter", "Klein", "Wolf", "Schröder", "Neumann", "Schwarz", "Zimmermann", "Braun", "Krüger", "Hofmann", "Hartmann", "Lange", "Schmitt", "Werner", "Schmitz", "Krause", "Meier", "Lehmann", "Schmid", "Schulze", "Maier", "Köhler", "Herrmann", "König", "Walter", "Mayer", "Huber", "Kaiser", "Fuchs", "Peters", "Lang", "Scholz", "Möller", "Weiß", "Jung", "Hahn", "Schubert", "Vogel", "Friedrich", "Keller", "Günther", "Frank", "Berger", "Winkler", "Roth", "Beck", "Lorenz", "Baumann", "Franke", "Albrecht", "Schuster", "Simon", "Ludwig", "Böhm", "Winter", "Kraus", "Martin", "Schumacher", "Krämer", "Vogt", "Stein", "Jäger", "Otto", "Sommer", "Groß", "Seidel", "Heinrich", "Brandt", "Haas", "Schreiber", "Graf", "Schulte", "Dietrich", "Ziegler", "Kuhn", "Kühn", "Pohl", "Engel", "Horn", "Busch", "Bergmann", "Thomas", "Voigt", "Sauer", "Arnold", "Wolff", "Pfeiffer"],
          // http://www.japantimes.co.jp/life/2009/10/11/lifestyle/japans-top-100-most-common-family-names/
          "jp": ["Sato", "Suzuki", "Takahashi", "Tanaka", "Watanabe", "Ito", "Yamamoto", "Nakamura", "Kobayashi", "Kato", "Yoshida", "Yamada", "Sasaki", "Yamaguchi", "Saito", "Matsumoto", "Inoue", "Kimura", "Hayashi", "Shimizu", "Yamazaki", "Mori", "Abe", "Ikeda", "Hashimoto", "Yamashita", "Ishikawa", "Nakajima", "Maeda", "Fujita", "Ogawa", "Goto", "Okada", "Hasegawa", "Murakami", "Kondo", "Ishii", "Saito", "Sakamoto", "Endo", "Aoki", "Fujii", "Nishimura", "Fukuda", "Ota", "Miura", "Fujiwara", "Okamoto", "Matsuda", "Nakagawa", "Nakano", "Harada", "Ono", "Tamura", "Takeuchi", "Kaneko", "Wada", "Nakayama", "Ishida", "Ueda", "Morita", "Hara", "Shibata", "Sakai", "Kudo", "Yokoyama", "Miyazaki", "Miyamoto", "Uchida", "Takagi", "Ando", "Taniguchi", "Ohno", "Maruyama", "Imai", "Takada", "Fujimoto", "Takeda", "Murata", "Ueno", "Sugiyama", "Masuda", "Sugawara", "Hirano", "Kojima", "Otsuka", "Chiba", "Kubo", "Matsui", "Iwasaki", "Sakurai", "Kinoshita", "Noguchi", "Matsuo", "Nomura", "Kikuchi", "Sano", "Onishi", "Sugimoto", "Arai"],
          // http://www.lowchensaustralia.com/names/popular-spanish-names.htm
          "es": ["Garcia", "Fernandez", "Lopez", "Martinez", "Gonzalez", "Rodriguez", "Sanchez", "Perez", "Martin", "Gomez", "Ruiz", "Diaz", "Hernandez", "Alvarez", "Jimenez", "Moreno", "Munoz", "Alonso", "Romero", "Navarro", "Gutierrez", "Torres", "Dominguez", "Gil", "Vazquez", "Blanco", "Serrano", "Ramos", "Castro", "Suarez", "Sanz", "Rubio", "Ortega", "Molina", "Delgado", "Ortiz", "Morales", "Ramirez", "Marin", "Iglesias", "Santos", "Castillo", "Garrido", "Calvo", "Pena", "Cruz", "Cano", "Nunez", "Prieto", "Diez", "Lozano", "Vidal", "Pascual", "Ferrer", "Medina", "Vega", "Leon", "Herrero", "Vicente", "Mendez", "Guerrero", "Fuentes", "Campos", "Nieto", "Cortes", "Caballero", "Ibanez", "Lorenzo", "Pastor", "Gimenez", "Saez", "Soler", "Marquez", "Carrasco", "Herrera", "Montero", "Arias", "Crespo", "Flores", "Andres", "Aguilar", "Hidalgo", "Cabrera", "Mora", "Duran", "Velasco", "Rey", "Pardo", "Roman", "Vila", "Bravo", "Merino", "Moya", "Soto", "Izquierdo", "Reyes", "Redondo", "Marcos", "Carmona", "Menendez"],
          // Data taken from https://fr.wikipedia.org/wiki/Liste_des_noms_de_famille_les_plus_courants_en_France
          "fr": ["Martin", "Bernard", "Thomas", "Petit", "Robert", "Richard", "Durand", "Dubois", "Moreau", "Laurent", "Simon", "Michel", "Lefèvre", "Leroy", "Roux", "David", "Bertrand", "Morel", "Fournier", "Girard", "Bonnet", "Dupont", "Lambert", "Fontaine", "Rousseau", "Vincent", "Müller", "Lefèvre", "Faure", "André", "Mercier", "Blanc", "Guérin", "Boyer", "Garnier", "Chevalier", "François", "Legrand", "Gauthier", "Garcia", "Perrin", "Robin", "Clément", "Morin", "Nicolas", "Henry", "Roussel", "Matthieu", "Gautier", "Masson", "Marchand", "Duval", "Denis", "Dumont", "Marie", "Lemaire", "Noël", "Meyer", "Dufour", "Meunier", "Brun", "Blanchard", "Giraud", "Joly", "Rivière", "Lucas", "Brunet", "Gaillard", "Barbier", "Arnaud", "Martínez", "Gérard", "Roche", "Renard", "Schmitt", "Roy", "Leroux", "Colin", "Vidal", "Caron", "Picard", "Roger", "Fabre", "Aubert", "Lemoine", "Renaud", "Dumas", "Lacroix", "Olivier", "Philippe", "Bourgeois", "Pierre", "Benoît", "Rey", "Leclerc", "Payet", "Rolland", "Leclercq", "Guillaume", "Lecomte", "López", "Jean", "Dupuy", "Guillot", "Hubert", "Berger", "Carpentier", "Sánchez", "Dupuis", "Moulin", "Louis", "Deschamps", "Huet", "Vasseur", "Perez", "Boucher", "Fleury", "Royer", "Klein", "Jacquet", "Adam", "Paris", "Poirier", "Marty", "Aubry", "Guyot", "Carré", "Charles", "Renault", "Charpentier", "Ménard", "Maillard", "Baron", "Bertin", "Bailly", "Hervé", "Schneider", "Fernández", "Le GallGall", "Collet", "Léger", "Bouvier", "Julien", "Prévost", "Millet", "Perrot", "Daniel", "Le RouxRoux", "Cousin", "Germain", "Breton", "Besson", "Langlois", "Rémi", "Le GoffGoff", "Pelletier", "Lévêque", "Perrier", "Leblanc", "Barré", "Lebrun", "Marchal", "Weber", "Mallet", "Hamon", "Boulanger", "Jacob", "Monnier", "Michaud", "Rodríguez", "Guichard", "Gillet", "Étienne", "Grondin", "Poulain", "Tessier", "Chevallier", "Collin", "Chauvin", "Da SilvaSilva", "Bouchet", "Gay", "Lemaître", "Bénard", "Maréchal", "Humbert", "Reynaud", "Antoine", "Hoarau", "Perret", "Barthélemy", "Cordier", "Pichon", "Lejeune", "Gilbert", "Lamy", "Delaunay", "Pasquier", "Carlier", "LaporteLaporte"]
        },
        // Data taken from http://geoportal.statistics.gov.uk/datasets/ons-postcode-directory-latest-centroids
        postcodeAreas: [{ code: "AB" }, { code: "AL" }, { code: "B" }, { code: "BA" }, { code: "BB" }, { code: "BD" }, { code: "BH" }, { code: "BL" }, { code: "BN" }, { code: "BR" }, { code: "BS" }, { code: "BT" }, { code: "CA" }, { code: "CB" }, { code: "CF" }, { code: "CH" }, { code: "CM" }, { code: "CO" }, { code: "CR" }, { code: "CT" }, { code: "CV" }, { code: "CW" }, { code: "DA" }, { code: "DD" }, { code: "DE" }, { code: "DG" }, { code: "DH" }, { code: "DL" }, { code: "DN" }, { code: "DT" }, { code: "DY" }, { code: "E" }, { code: "EC" }, { code: "EH" }, { code: "EN" }, { code: "EX" }, { code: "FK" }, { code: "FY" }, { code: "G" }, { code: "GL" }, { code: "GU" }, { code: "GY" }, { code: "HA" }, { code: "HD" }, { code: "HG" }, { code: "HP" }, { code: "HR" }, { code: "HS" }, { code: "HU" }, { code: "HX" }, { code: "IG" }, { code: "IM" }, { code: "IP" }, { code: "IV" }, { code: "JE" }, { code: "KA" }, { code: "KT" }, { code: "KW" }, { code: "KY" }, { code: "L" }, { code: "LA" }, { code: "LD" }, { code: "LE" }, { code: "LL" }, { code: "LN" }, { code: "LS" }, { code: "LU" }, { code: "M" }, { code: "ME" }, { code: "MK" }, { code: "ML" }, { code: "N" }, { code: "NE" }, { code: "NG" }, { code: "NN" }, { code: "NP" }, { code: "NR" }, { code: "NW" }, { code: "OL" }, { code: "OX" }, { code: "PA" }, { code: "PE" }, { code: "PH" }, { code: "PL" }, { code: "PO" }, { code: "PR" }, { code: "RG" }, { code: "RH" }, { code: "RM" }, { code: "S" }, { code: "SA" }, { code: "SE" }, { code: "SG" }, { code: "SK" }, { code: "SL" }, { code: "SM" }, { code: "SN" }, { code: "SO" }, { code: "SP" }, { code: "SR" }, { code: "SS" }, { code: "ST" }, { code: "SW" }, { code: "SY" }, { code: "TA" }, { code: "TD" }, { code: "TF" }, { code: "TN" }, { code: "TQ" }, { code: "TR" }, { code: "TS" }, { code: "TW" }, { code: "UB" }, { code: "W" }, { code: "WA" }, { code: "WC" }, { code: "WD" }, { code: "WF" }, { code: "WN" }, { code: "WR" }, { code: "WS" }, { code: "WV" }, { code: "YO" }, { code: "ZE" }],
        // Data taken from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        countries: [{ "name": "Afghanistan", "abbreviation": "AF" }, { "name": "Åland Islands", "abbreviation": "AX" }, { "name": "Albania", "abbreviation": "AL" }, { "name": "Algeria", "abbreviation": "DZ" }, { "name": "American Samoa", "abbreviation": "AS" }, { "name": "Andorra", "abbreviation": "AD" }, { "name": "Angola", "abbreviation": "AO" }, { "name": "Anguilla", "abbreviation": "AI" }, { "name": "Antarctica", "abbreviation": "AQ" }, { "name": "Antigua and Barbuda", "abbreviation": "AG" }, { "name": "Argentina", "abbreviation": "AR" }, { "name": "Armenia", "abbreviation": "AM" }, { "name": "Aruba", "abbreviation": "AW" }, { "name": "Australia", "abbreviation": "AU" }, { "name": "Austria", "abbreviation": "AT" }, { "name": "Azerbaijan", "abbreviation": "AZ" }, { "name": "Bahamas", "abbreviation": "BS" }, { "name": "Bahrain", "abbreviation": "BH" }, { "name": "Bangladesh", "abbreviation": "BD" }, { "name": "Barbados", "abbreviation": "BB" }, { "name": "Belarus", "abbreviation": "BY" }, { "name": "Belgium", "abbreviation": "BE" }, { "name": "Belize", "abbreviation": "BZ" }, { "name": "Benin", "abbreviation": "BJ" }, { "name": "Bermuda", "abbreviation": "BM" }, { "name": "Bhutan", "abbreviation": "BT" }, { "name": "Plurinational State of Bolivia", "abbreviation": "BO" }, { "name": "Bonaire, Sint Eustatius and Saba", "abbreviation": "BQ" }, { "name": "Bosnia and Herzegovina", "abbreviation": "BA" }, { "name": "Botswana", "abbreviation": "BW" }, { "name": "Bouvet Island", "abbreviation": "BV" }, { "name": "Brazil", "abbreviation": "BR" }, { "name": "British Indian Ocean Territory", "abbreviation": "IO" }, { "name": "Brunei Darussalam", "abbreviation": "BN" }, { "name": "Bulgaria", "abbreviation": "BG" }, { "name": "Burkina Faso", "abbreviation": "BF" }, { "name": "Burundi", "abbreviation": "BI" }, { "name": "Cabo Verde", "abbreviation": "CV" }, { "name": "Cambodia", "abbreviation": "KH" }, { "name": "Cameroon", "abbreviation": "CM" }, { "name": "Canada", "abbreviation": "CA" }, { "name": "Cayman Islands", "abbreviation": "KY" }, { "name": "Central African Republic", "abbreviation": "CF" }, { "name": "Chad", "abbreviation": "TD" }, { "name": "Chile", "abbreviation": "CL" }, { "name": "China", "abbreviation": "CN" }, { "name": "Christmas Island", "abbreviation": "CX" }, { "name": "Cocos (Keeling) Islands", "abbreviation": "CC" }, { "name": "Colombia", "abbreviation": "CO" }, { "name": "Comoros", "abbreviation": "KM" }, { "name": "Congo", "abbreviation": "CG" }, { "name": "Democratic Republic of the Congo", "abbreviation": "CD" }, { "name": "Cook Islands", "abbreviation": "CK" }, { "name": "Costa Rica", "abbreviation": "CR" }, { "name": "Côte d'Ivoire", "abbreviation": "CI" }, { "name": "Croatia", "abbreviation": "HR" }, { "name": "Cuba", "abbreviation": "CU" }, { "name": "Curaçao", "abbreviation": "CW" }, { "name": "Cyprus", "abbreviation": "CY" }, { "name": "Czechia", "abbreviation": "CZ" }, { "name": "Denmark", "abbreviation": "DK" }, { "name": "Djibouti", "abbreviation": "DJ" }, { "name": "Dominica", "abbreviation": "DM" }, { "name": "Dominican Republic", "abbreviation": "DO" }, { "name": "Ecuador", "abbreviation": "EC" }, { "name": "Egypt", "abbreviation": "EG" }, { "name": "El Salvador", "abbreviation": "SV" }, { "name": "Equatorial Guinea", "abbreviation": "GQ" }, { "name": "Eritrea", "abbreviation": "ER" }, { "name": "Estonia", "abbreviation": "EE" }, { "name": "Eswatini", "abbreviation": "SZ" }, { "name": "Ethiopia", "abbreviation": "ET" }, { "name": "Falkland Islands (Malvinas)", "abbreviation": "FK" }, { "name": "Faroe Islands", "abbreviation": "FO" }, { "name": "Fiji", "abbreviation": "FJ" }, { "name": "Finland", "abbreviation": "FI" }, { "name": "France", "abbreviation": "FR" }, { "name": "French Guiana", "abbreviation": "GF" }, { "name": "French Polynesia", "abbreviation": "PF" }, { "name": "French Southern Territories", "abbreviation": "TF" }, { "name": "Gabon", "abbreviation": "GA" }, { "name": "Gambia", "abbreviation": "GM" }, { "name": "Georgia", "abbreviation": "GE" }, { "name": "Germany", "abbreviation": "DE" }, { "name": "Ghana", "abbreviation": "GH" }, { "name": "Gibraltar", "abbreviation": "GI" }, { "name": "Greece", "abbreviation": "GR" }, { "name": "Greenland", "abbreviation": "GL" }, { "name": "Grenada", "abbreviation": "GD" }, { "name": "Guadeloupe", "abbreviation": "GP" }, { "name": "Guam", "abbreviation": "GU" }, { "name": "Guatemala", "abbreviation": "GT" }, { "name": "Guernsey", "abbreviation": "GG" }, { "name": "Guinea", "abbreviation": "GN" }, { "name": "Guinea-Bissau", "abbreviation": "GW" }, { "name": "Guyana", "abbreviation": "GY" }, { "name": "Haiti", "abbreviation": "HT" }, { "name": "Heard Island and McDonald Islands", "abbreviation": "HM" }, { "name": "Holy See", "abbreviation": "VA" }, { "name": "Honduras", "abbreviation": "HN" }, { "name": "Hong Kong", "abbreviation": "HK" }, { "name": "Hungary", "abbreviation": "HU" }, { "name": "Iceland", "abbreviation": "IS" }, { "name": "India", "abbreviation": "IN" }, { "name": "Indonesia", "abbreviation": "ID" }, { "name": "Islamic Republic of Iran", "abbreviation": "IR" }, { "name": "Iraq", "abbreviation": "IQ" }, { "name": "Ireland", "abbreviation": "IE" }, { "name": "Isle of Man", "abbreviation": "IM" }, { "name": "Israel", "abbreviation": "IL" }, { "name": "Italy", "abbreviation": "IT" }, { "name": "Jamaica", "abbreviation": "JM" }, { "name": "Japan", "abbreviation": "JP" }, { "name": "Jersey", "abbreviation": "JE" }, { "name": "Jordan", "abbreviation": "JO" }, { "name": "Kazakhstan", "abbreviation": "KZ" }, { "name": "Kenya", "abbreviation": "KE" }, { "name": "Kiribati", "abbreviation": "KI" }, { "name": "Democratic People's Republic of Korea", "abbreviation": "KP" }, { "name": "Republic of Korea", "abbreviation": "KR" }, { "name": "Kuwait", "abbreviation": "KW" }, { "name": "Kyrgyzstan", "abbreviation": "KG" }, { "name": "Lao People's Democratic Republic", "abbreviation": "LA" }, { "name": "Latvia", "abbreviation": "LV" }, { "name": "Lebanon", "abbreviation": "LB" }, { "name": "Lesotho", "abbreviation": "LS" }, { "name": "Liberia", "abbreviation": "LR" }, { "name": "Libya", "abbreviation": "LY" }, { "name": "Liechtenstein", "abbreviation": "LI" }, { "name": "Lithuania", "abbreviation": "LT" }, { "name": "Luxembourg", "abbreviation": "LU" }, { "name": "Macao", "abbreviation": "MO" }, { "name": "Madagascar", "abbreviation": "MG" }, { "name": "Malawi", "abbreviation": "MW" }, { "name": "Malaysia", "abbreviation": "MY" }, { "name": "Maldives", "abbreviation": "MV" }, { "name": "Mali", "abbreviation": "ML" }, { "name": "Malta", "abbreviation": "MT" }, { "name": "Marshall Islands", "abbreviation": "MH" }, { "name": "Martinique", "abbreviation": "MQ" }, { "name": "Mauritania", "abbreviation": "MR" }, { "name": "Mauritius", "abbreviation": "MU" }, { "name": "Mayotte", "abbreviation": "YT" }, { "name": "Mexico", "abbreviation": "MX" }, { "name": "Federated States of Micronesia", "abbreviation": "FM" }, { "name": "Republic of Moldova", "abbreviation": "MD" }, { "name": "Monaco", "abbreviation": "MC" }, { "name": "Mongolia", "abbreviation": "MN" }, { "name": "Montenegro", "abbreviation": "ME" }, { "name": "Montserrat", "abbreviation": "MS" }, { "name": "Morocco", "abbreviation": "MA" }, { "name": "Mozambique", "abbreviation": "MZ" }, { "name": "Myanmar", "abbreviation": "MM" }, { "name": "Namibia", "abbreviation": "NA" }, { "name": "Nauru", "abbreviation": "NR" }, { "name": "Nepal", "abbreviation": "NP" }, { "name": "Kingdom of the Netherlands", "abbreviation": "NL" }, { "name": "New Caledonia", "abbreviation": "NC" }, { "name": "New Zealand", "abbreviation": "NZ" }, { "name": "Nicaragua", "abbreviation": "NI" }, { "name": "Niger", "abbreviation": "NE" }, { "name": "Nigeria", "abbreviation": "NG" }, { "name": "Niue", "abbreviation": "NU" }, { "name": "Norfolk Island", "abbreviation": "NF" }, { "name": "North Macedonia", "abbreviation": "MK" }, { "name": "Northern Mariana Islands", "abbreviation": "MP" }, { "name": "Norway", "abbreviation": "NO" }, { "name": "Oman", "abbreviation": "OM" }, { "name": "Pakistan", "abbreviation": "PK" }, { "name": "Palau", "abbreviation": "PW" }, { "name": "State of Palestine", "abbreviation": "PS" }, { "name": "Panama", "abbreviation": "PA" }, { "name": "Papua New Guinea", "abbreviation": "PG" }, { "name": "Paraguay", "abbreviation": "PY" }, { "name": "Peru", "abbreviation": "PE" }, { "name": "Philippines", "abbreviation": "PH" }, { "name": "Pitcairn", "abbreviation": "PN" }, { "name": "Poland", "abbreviation": "PL" }, { "name": "Portugal", "abbreviation": "PT" }, { "name": "Puerto Rico", "abbreviation": "PR" }, { "name": "Qatar", "abbreviation": "QA" }, { "name": "Réunion", "abbreviation": "RE" }, { "name": "Romania", "abbreviation": "RO" }, { "name": "Russian Federation", "abbreviation": "RU" }, { "name": "Rwanda", "abbreviation": "RW" }, { "name": "Saint Barthélemy", "abbreviation": "BL" }, { "name": "Saint Helena, Ascension and Tristan da Cunha", "abbreviation": "SH" }, { "name": "Saint Kitts and Nevis", "abbreviation": "KN" }, { "name": "Saint Lucia", "abbreviation": "LC" }, { "name": "Saint Martin (French part)", "abbreviation": "MF" }, { "name": "Saint Pierre and Miquelon", "abbreviation": "PM" }, { "name": "Saint Vincent and the Grenadines", "abbreviation": "VC" }, { "name": "Samoa", "abbreviation": "WS" }, { "name": "San Marino", "abbreviation": "SM" }, { "name": "Sao Tome and Principe", "abbreviation": "ST" }, { "name": "Saudi Arabia", "abbreviation": "SA" }, { "name": "Senegal", "abbreviation": "SN" }, { "name": "Serbia", "abbreviation": "RS" }, { "name": "Seychelles", "abbreviation": "SC" }, { "name": "Sierra Leone", "abbreviation": "SL" }, { "name": "Singapore", "abbreviation": "SG" }, { "name": "Sint Maarten (Dutch part)", "abbreviation": "SX" }, { "name": "Slovakia", "abbreviation": "SK" }, { "name": "Slovenia", "abbreviation": "SI" }, { "name": "Solomon Islands", "abbreviation": "SB" }, { "name": "Somalia", "abbreviation": "SO" }, { "name": "South Africa", "abbreviation": "ZA" }, { "name": "South Georgia and the South Sandwich Islands", "abbreviation": "GS" }, { "name": "South Sudan", "abbreviation": "SS" }, { "name": "Spain", "abbreviation": "ES" }, { "name": "Sri Lanka", "abbreviation": "LK" }, { "name": "Sudan", "abbreviation": "SD" }, { "name": "Suriname", "abbreviation": "SR" }, { "name": "Svalbard and Jan Mayen", "abbreviation": "SJ" }, { "name": "Sweden", "abbreviation": "SE" }, { "name": "Switzerland", "abbreviation": "CH" }, { "name": "Syrian Arab Republic", "abbreviation": "SY" }, { "name": "Taiwan, Province of China", "abbreviation": "TW" }, { "name": "Tajikistan", "abbreviation": "TJ" }, { "name": "United Republic of Tanzania", "abbreviation": "TZ" }, { "name": "Thailand", "abbreviation": "TH" }, { "name": "Timor-Leste", "abbreviation": "TL" }, { "name": "Togo", "abbreviation": "TG" }, { "name": "Tokelau", "abbreviation": "TK" }, { "name": "Tonga", "abbreviation": "TO" }, { "name": "Trinidad and Tobago", "abbreviation": "TT" }, { "name": "Tunisia", "abbreviation": "TN" }, { "name": "Türkiye", "abbreviation": "TR" }, { "name": "Turkmenistan", "abbreviation": "TM" }, { "name": "Turks and Caicos Islands", "abbreviation": "TC" }, { "name": "Tuvalu", "abbreviation": "TV" }, { "name": "Uganda", "abbreviation": "UG" }, { "name": "Ukraine", "abbreviation": "UA" }, { "name": "United Arab Emirates", "abbreviation": "AE" }, { "name": "United Kingdom of Great Britain and Northern Ireland", "abbreviation": "GB" }, { "name": "United States Minor Outlying Islands", "abbreviation": "UM" }, { "name": "United States of America", "abbreviation": "US" }, { "name": "Uruguay", "abbreviation": "UY" }, { "name": "Uzbekistan", "abbreviation": "UZ" }, { "name": "Vanuatu", "abbreviation": "VU" }, { "name": "Bolivarian Republic of Venezuela", "abbreviation": "VE" }, { "name": "Viet Nam", "abbreviation": "VN" }, { "name": "Virgin Islands (British)", "abbreviation": "VG" }, { "name": "Virgin Islands (U.S.)", "abbreviation": "VI" }, { "name": "Wallis and Futuna", "abbreviation": "WF" }, { "name": "Western Sahara", "abbreviation": "EH" }, { "name": "Yemen", "abbreviation": "YE" }, { "name": "Zambia", "abbreviation": "ZM" }, { "name": "Zimbabwe", "abbreviation": "ZW" }],
        counties: {
          // Data taken from http://www.downloadexcelfiles.com/gb_en/download-excel-file-list-counties-uk
          "uk": [
            { name: "Bath and North East Somerset" },
            { name: "Aberdeenshire" },
            { name: "Anglesey" },
            { name: "Angus" },
            { name: "Bedford" },
            { name: "Blackburn with Darwen" },
            { name: "Blackpool" },
            { name: "Bournemouth" },
            { name: "Bracknell Forest" },
            { name: "Brighton & Hove" },
            { name: "Bristol" },
            { name: "Buckinghamshire" },
            { name: "Cambridgeshire" },
            { name: "Carmarthenshire" },
            { name: "Central Bedfordshire" },
            { name: "Ceredigion" },
            { name: "Cheshire East" },
            { name: "Cheshire West and Chester" },
            { name: "Clackmannanshire" },
            { name: "Conwy" },
            { name: "Cornwall" },
            { name: "County Antrim" },
            { name: "County Armagh" },
            { name: "County Down" },
            { name: "County Durham" },
            { name: "County Fermanagh" },
            { name: "County Londonderry" },
            { name: "County Tyrone" },
            { name: "Cumbria" },
            { name: "Darlington" },
            { name: "Denbighshire" },
            { name: "Derby" },
            { name: "Derbyshire" },
            { name: "Devon" },
            { name: "Dorset" },
            { name: "Dumfries and Galloway" },
            { name: "Dundee" },
            { name: "East Lothian" },
            { name: "East Riding of Yorkshire" },
            { name: "East Sussex" },
            { name: "Edinburgh?" },
            { name: "Essex" },
            { name: "Falkirk" },
            { name: "Fife" },
            { name: "Flintshire" },
            { name: "Gloucestershire" },
            { name: "Greater London" },
            { name: "Greater Manchester" },
            { name: "Gwent" },
            { name: "Gwynedd" },
            { name: "Halton" },
            { name: "Hampshire" },
            { name: "Hartlepool" },
            { name: "Herefordshire" },
            { name: "Hertfordshire" },
            { name: "Highlands" },
            { name: "Hull" },
            { name: "Isle of Wight" },
            { name: "Isles of Scilly" },
            { name: "Kent" },
            { name: "Lancashire" },
            { name: "Leicester" },
            { name: "Leicestershire" },
            { name: "Lincolnshire" },
            { name: "Lothian" },
            { name: "Luton" },
            { name: "Medway" },
            { name: "Merseyside" },
            { name: "Mid Glamorgan" },
            { name: "Middlesbrough" },
            { name: "Milton Keynes" },
            { name: "Monmouthshire" },
            { name: "Moray" },
            { name: "Norfolk" },
            { name: "North East Lincolnshire" },
            { name: "North Lincolnshire" },
            { name: "North Somerset" },
            { name: "North Yorkshire" },
            { name: "Northamptonshire" },
            { name: "Northumberland" },
            { name: "Nottingham" },
            { name: "Nottinghamshire" },
            { name: "Oxfordshire" },
            { name: "Pembrokeshire" },
            { name: "Perth and Kinross" },
            { name: "Peterborough" },
            { name: "Plymouth" },
            { name: "Poole" },
            { name: "Portsmouth" },
            { name: "Powys" },
            { name: "Reading" },
            { name: "Redcar and Cleveland" },
            { name: "Rutland" },
            { name: "Scottish Borders" },
            { name: "Shropshire" },
            { name: "Slough" },
            { name: "Somerset" },
            { name: "South Glamorgan" },
            { name: "South Gloucestershire" },
            { name: "South Yorkshire" },
            { name: "Southampton" },
            { name: "Southend-on-Sea" },
            { name: "Staffordshire" },
            { name: "Stirlingshire" },
            { name: "Stockton-on-Tees" },
            { name: "Stoke-on-Trent" },
            { name: "Strathclyde" },
            { name: "Suffolk" },
            { name: "Surrey" },
            { name: "Swindon" },
            { name: "Telford and Wrekin" },
            { name: "Thurrock" },
            { name: "Torbay" },
            { name: "Tyne and Wear" },
            { name: "Warrington" },
            { name: "Warwickshire" },
            { name: "West Berkshire" },
            { name: "West Glamorgan" },
            { name: "West Lothian" },
            { name: "West Midlands" },
            { name: "West Sussex" },
            { name: "West Yorkshire" },
            { name: "Western Isles" },
            { name: "Wiltshire" },
            { name: "Windsor and Maidenhead" },
            { name: "Wokingham" },
            { name: "Worcestershire" },
            { name: "Wrexham" },
            { name: "York" }
          ]
        },
        provinces: {
          "ca": [
            { name: "Alberta", abbreviation: "AB" },
            { name: "British Columbia", abbreviation: "BC" },
            { name: "Manitoba", abbreviation: "MB" },
            { name: "New Brunswick", abbreviation: "NB" },
            { name: "Newfoundland and Labrador", abbreviation: "NL" },
            { name: "Nova Scotia", abbreviation: "NS" },
            { name: "Ontario", abbreviation: "ON" },
            { name: "Prince Edward Island", abbreviation: "PE" },
            { name: "Quebec", abbreviation: "QC" },
            { name: "Saskatchewan", abbreviation: "SK" },
            // The case could be made that the following are not actually provinces
            // since they are technically considered "territories" however they all
            // look the same on an envelope!
            { name: "Northwest Territories", abbreviation: "NT" },
            { name: "Nunavut", abbreviation: "NU" },
            { name: "Yukon", abbreviation: "YT" }
          ],
          "it": [
            { name: "Agrigento", abbreviation: "AG", code: 84 },
            { name: "Alessandria", abbreviation: "AL", code: 6 },
            { name: "Ancona", abbreviation: "AN", code: 42 },
            { name: "Aosta", abbreviation: "AO", code: 7 },
            { name: "L'Aquila", abbreviation: "AQ", code: 66 },
            { name: "Arezzo", abbreviation: "AR", code: 51 },
            { name: "Ascoli-Piceno", abbreviation: "AP", code: 44 },
            { name: "Asti", abbreviation: "AT", code: 5 },
            { name: "Avellino", abbreviation: "AV", code: 64 },
            { name: "Bari", abbreviation: "BA", code: 72 },
            { name: "Barletta-Andria-Trani", abbreviation: "BT", code: 72 },
            { name: "Belluno", abbreviation: "BL", code: 25 },
            { name: "Benevento", abbreviation: "BN", code: 62 },
            { name: "Bergamo", abbreviation: "BG", code: 16 },
            { name: "Biella", abbreviation: "BI", code: 96 },
            { name: "Bologna", abbreviation: "BO", code: 37 },
            { name: "Bolzano", abbreviation: "BZ", code: 21 },
            { name: "Brescia", abbreviation: "BS", code: 17 },
            { name: "Brindisi", abbreviation: "BR", code: 74 },
            { name: "Cagliari", abbreviation: "CA", code: 92 },
            { name: "Caltanissetta", abbreviation: "CL", code: 85 },
            { name: "Campobasso", abbreviation: "CB", code: 70 },
            { name: "Carbonia Iglesias", abbreviation: "CI", code: 70 },
            { name: "Caserta", abbreviation: "CE", code: 61 },
            { name: "Catania", abbreviation: "CT", code: 87 },
            { name: "Catanzaro", abbreviation: "CZ", code: 79 },
            { name: "Chieti", abbreviation: "CH", code: 69 },
            { name: "Como", abbreviation: "CO", code: 13 },
            { name: "Cosenza", abbreviation: "CS", code: 78 },
            { name: "Cremona", abbreviation: "CR", code: 19 },
            { name: "Crotone", abbreviation: "KR", code: 101 },
            { name: "Cuneo", abbreviation: "CN", code: 4 },
            { name: "Enna", abbreviation: "EN", code: 86 },
            { name: "Fermo", abbreviation: "FM", code: 86 },
            { name: "Ferrara", abbreviation: "FE", code: 38 },
            { name: "Firenze", abbreviation: "FI", code: 48 },
            { name: "Foggia", abbreviation: "FG", code: 71 },
            { name: "Forli-Cesena", abbreviation: "FC", code: 71 },
            { name: "Frosinone", abbreviation: "FR", code: 60 },
            { name: "Genova", abbreviation: "GE", code: 10 },
            { name: "Gorizia", abbreviation: "GO", code: 31 },
            { name: "Grosseto", abbreviation: "GR", code: 53 },
            { name: "Imperia", abbreviation: "IM", code: 8 },
            { name: "Isernia", abbreviation: "IS", code: 94 },
            { name: "La-Spezia", abbreviation: "SP", code: 66 },
            { name: "Latina", abbreviation: "LT", code: 59 },
            { name: "Lecce", abbreviation: "LE", code: 75 },
            { name: "Lecco", abbreviation: "LC", code: 97 },
            { name: "Livorno", abbreviation: "LI", code: 49 },
            { name: "Lodi", abbreviation: "LO", code: 98 },
            { name: "Lucca", abbreviation: "LU", code: 46 },
            { name: "Macerata", abbreviation: "MC", code: 43 },
            { name: "Mantova", abbreviation: "MN", code: 20 },
            { name: "Massa-Carrara", abbreviation: "MS", code: 45 },
            { name: "Matera", abbreviation: "MT", code: 77 },
            { name: "Medio Campidano", abbreviation: "VS", code: 77 },
            { name: "Messina", abbreviation: "ME", code: 83 },
            { name: "Milano", abbreviation: "MI", code: 15 },
            { name: "Modena", abbreviation: "MO", code: 36 },
            { name: "Monza-Brianza", abbreviation: "MB", code: 36 },
            { name: "Napoli", abbreviation: "NA", code: 63 },
            { name: "Novara", abbreviation: "NO", code: 3 },
            { name: "Nuoro", abbreviation: "NU", code: 91 },
            { name: "Ogliastra", abbreviation: "OG", code: 91 },
            { name: "Olbia Tempio", abbreviation: "OT", code: 91 },
            { name: "Oristano", abbreviation: "OR", code: 95 },
            { name: "Padova", abbreviation: "PD", code: 28 },
            { name: "Palermo", abbreviation: "PA", code: 82 },
            { name: "Parma", abbreviation: "PR", code: 34 },
            { name: "Pavia", abbreviation: "PV", code: 18 },
            { name: "Perugia", abbreviation: "PG", code: 54 },
            { name: "Pesaro-Urbino", abbreviation: "PU", code: 41 },
            { name: "Pescara", abbreviation: "PE", code: 68 },
            { name: "Piacenza", abbreviation: "PC", code: 33 },
            { name: "Pisa", abbreviation: "PI", code: 50 },
            { name: "Pistoia", abbreviation: "PT", code: 47 },
            { name: "Pordenone", abbreviation: "PN", code: 93 },
            { name: "Potenza", abbreviation: "PZ", code: 76 },
            { name: "Prato", abbreviation: "PO", code: 100 },
            { name: "Ragusa", abbreviation: "RG", code: 88 },
            { name: "Ravenna", abbreviation: "RA", code: 39 },
            { name: "Reggio-Calabria", abbreviation: "RC", code: 35 },
            { name: "Reggio-Emilia", abbreviation: "RE", code: 35 },
            { name: "Rieti", abbreviation: "RI", code: 57 },
            { name: "Rimini", abbreviation: "RN", code: 99 },
            { name: "Roma", abbreviation: "Roma", code: 58 },
            { name: "Rovigo", abbreviation: "RO", code: 29 },
            { name: "Salerno", abbreviation: "SA", code: 65 },
            { name: "Sassari", abbreviation: "SS", code: 90 },
            { name: "Savona", abbreviation: "SV", code: 9 },
            { name: "Siena", abbreviation: "SI", code: 52 },
            { name: "Siracusa", abbreviation: "SR", code: 89 },
            { name: "Sondrio", abbreviation: "SO", code: 14 },
            { name: "Taranto", abbreviation: "TA", code: 73 },
            { name: "Teramo", abbreviation: "TE", code: 67 },
            { name: "Terni", abbreviation: "TR", code: 55 },
            { name: "Torino", abbreviation: "TO", code: 1 },
            { name: "Trapani", abbreviation: "TP", code: 81 },
            { name: "Trento", abbreviation: "TN", code: 22 },
            { name: "Treviso", abbreviation: "TV", code: 26 },
            { name: "Trieste", abbreviation: "TS", code: 32 },
            { name: "Udine", abbreviation: "UD", code: 30 },
            { name: "Varese", abbreviation: "VA", code: 12 },
            { name: "Venezia", abbreviation: "VE", code: 27 },
            { name: "Verbania", abbreviation: "VB", code: 27 },
            { name: "Vercelli", abbreviation: "VC", code: 2 },
            { name: "Verona", abbreviation: "VR", code: 23 },
            { name: "Vibo-Valentia", abbreviation: "VV", code: 102 },
            { name: "Vicenza", abbreviation: "VI", code: 24 },
            { name: "Viterbo", abbreviation: "VT", code: 56 }
          ]
        },
        // from: https://github.com/samsargent/Useful-Autocomplete-Data/blob/master/data/nationalities.json
        nationalities: [
          { name: "Afghan" },
          { name: "Albanian" },
          { name: "Algerian" },
          { name: "American" },
          { name: "Andorran" },
          { name: "Angolan" },
          { name: "Antiguans" },
          { name: "Argentinean" },
          { name: "Armenian" },
          { name: "Australian" },
          { name: "Austrian" },
          { name: "Azerbaijani" },
          { name: "Bahami" },
          { name: "Bahraini" },
          { name: "Bangladeshi" },
          { name: "Barbadian" },
          { name: "Barbudans" },
          { name: "Batswana" },
          { name: "Belarusian" },
          { name: "Belgian" },
          { name: "Belizean" },
          { name: "Beninese" },
          { name: "Bhutanese" },
          { name: "Bolivian" },
          { name: "Bosnian" },
          { name: "Brazilian" },
          { name: "British" },
          { name: "Bruneian" },
          { name: "Bulgarian" },
          { name: "Burkinabe" },
          { name: "Burmese" },
          { name: "Burundian" },
          { name: "Cambodian" },
          { name: "Cameroonian" },
          { name: "Canadian" },
          { name: "Cape Verdean" },
          { name: "Central African" },
          { name: "Chadian" },
          { name: "Chilean" },
          { name: "Chinese" },
          { name: "Colombian" },
          { name: "Comoran" },
          { name: "Congolese" },
          { name: "Costa Rican" },
          { name: "Croatian" },
          { name: "Cuban" },
          { name: "Cypriot" },
          { name: "Czech" },
          { name: "Danish" },
          { name: "Djibouti" },
          { name: "Dominican" },
          { name: "Dutch" },
          { name: "East Timorese" },
          { name: "Ecuadorean" },
          { name: "Egyptian" },
          { name: "Emirian" },
          { name: "Equatorial Guinean" },
          { name: "Eritrean" },
          { name: "Estonian" },
          { name: "Ethiopian" },
          { name: "Fijian" },
          { name: "Filipino" },
          { name: "Finnish" },
          { name: "French" },
          { name: "Gabonese" },
          { name: "Gambian" },
          { name: "Georgian" },
          { name: "German" },
          { name: "Ghanaian" },
          { name: "Greek" },
          { name: "Grenadian" },
          { name: "Guatemalan" },
          { name: "Guinea-Bissauan" },
          { name: "Guinean" },
          { name: "Guyanese" },
          { name: "Haitian" },
          { name: "Herzegovinian" },
          { name: "Honduran" },
          { name: "Hungarian" },
          { name: "I-Kiribati" },
          { name: "Icelander" },
          { name: "Indian" },
          { name: "Indonesian" },
          { name: "Iranian" },
          { name: "Iraqi" },
          { name: "Irish" },
          { name: "Israeli" },
          { name: "Italian" },
          { name: "Ivorian" },
          { name: "Jamaican" },
          { name: "Japanese" },
          { name: "Jordanian" },
          { name: "Kazakhstani" },
          { name: "Kenyan" },
          { name: "Kittian and Nevisian" },
          { name: "Kuwaiti" },
          { name: "Kyrgyz" },
          { name: "Laotian" },
          { name: "Latvian" },
          { name: "Lebanese" },
          { name: "Liberian" },
          { name: "Libyan" },
          { name: "Liechtensteiner" },
          { name: "Lithuanian" },
          { name: "Luxembourger" },
          { name: "Macedonian" },
          { name: "Malagasy" },
          { name: "Malawian" },
          { name: "Malaysian" },
          { name: "Maldivan" },
          { name: "Malian" },
          { name: "Maltese" },
          { name: "Marshallese" },
          { name: "Mauritanian" },
          { name: "Mauritian" },
          { name: "Mexican" },
          { name: "Micronesian" },
          { name: "Moldovan" },
          { name: "Monacan" },
          { name: "Mongolian" },
          { name: "Moroccan" },
          { name: "Mosotho" },
          { name: "Motswana" },
          { name: "Mozambican" },
          { name: "Namibian" },
          { name: "Nauruan" },
          { name: "Nepalese" },
          { name: "New Zealander" },
          { name: "Nicaraguan" },
          { name: "Nigerian" },
          { name: "Nigerien" },
          { name: "North Korean" },
          { name: "Northern Irish" },
          { name: "Norwegian" },
          { name: "Omani" },
          { name: "Pakistani" },
          { name: "Palauan" },
          { name: "Panamanian" },
          { name: "Papua New Guinean" },
          { name: "Paraguayan" },
          { name: "Peruvian" },
          { name: "Polish" },
          { name: "Portuguese" },
          { name: "Qatari" },
          { name: "Romani" },
          { name: "Russian" },
          { name: "Rwandan" },
          { name: "Saint Lucian" },
          { name: "Salvadoran" },
          { name: "Samoan" },
          { name: "San Marinese" },
          { name: "Sao Tomean" },
          { name: "Saudi" },
          { name: "Scottish" },
          { name: "Senegalese" },
          { name: "Serbian" },
          { name: "Seychellois" },
          { name: "Sierra Leonean" },
          { name: "Singaporean" },
          { name: "Slovakian" },
          { name: "Slovenian" },
          { name: "Solomon Islander" },
          { name: "Somali" },
          { name: "South African" },
          { name: "South Korean" },
          { name: "Spanish" },
          { name: "Sri Lankan" },
          { name: "Sudanese" },
          { name: "Surinamer" },
          { name: "Swazi" },
          { name: "Swedish" },
          { name: "Swiss" },
          { name: "Syrian" },
          { name: "Taiwanese" },
          { name: "Tajik" },
          { name: "Tanzanian" },
          { name: "Thai" },
          { name: "Togolese" },
          { name: "Tongan" },
          { name: "Trinidadian or Tobagonian" },
          { name: "Tunisian" },
          { name: "Turkish" },
          { name: "Tuvaluan" },
          { name: "Ugandan" },
          { name: "Ukrainian" },
          { name: "Uruguaya" },
          { name: "Uzbekistani" },
          { name: "Venezuela" },
          { name: "Vietnamese" },
          { name: "Wels" },
          { name: "Yemenit" },
          { name: "Zambia" },
          { name: "Zimbabwe" }
        ],
        // http://www.loc.gov/standards/iso639-2/php/code_list.php (ISO-639-1 codes)
        locale_languages: [
          "aa",
          "ab",
          "ae",
          "af",
          "ak",
          "am",
          "an",
          "ar",
          "as",
          "av",
          "ay",
          "az",
          "ba",
          "be",
          "bg",
          "bh",
          "bi",
          "bm",
          "bn",
          "bo",
          "br",
          "bs",
          "ca",
          "ce",
          "ch",
          "co",
          "cr",
          "cs",
          "cu",
          "cv",
          "cy",
          "da",
          "de",
          "dv",
          "dz",
          "ee",
          "el",
          "en",
          "eo",
          "es",
          "et",
          "eu",
          "fa",
          "ff",
          "fi",
          "fj",
          "fo",
          "fr",
          "fy",
          "ga",
          "gd",
          "gl",
          "gn",
          "gu",
          "gv",
          "ha",
          "he",
          "hi",
          "ho",
          "hr",
          "ht",
          "hu",
          "hy",
          "hz",
          "ia",
          "id",
          "ie",
          "ig",
          "ii",
          "ik",
          "io",
          "is",
          "it",
          "iu",
          "ja",
          "jv",
          "ka",
          "kg",
          "ki",
          "kj",
          "kk",
          "kl",
          "km",
          "kn",
          "ko",
          "kr",
          "ks",
          "ku",
          "kv",
          "kw",
          "ky",
          "la",
          "lb",
          "lg",
          "li",
          "ln",
          "lo",
          "lt",
          "lu",
          "lv",
          "mg",
          "mh",
          "mi",
          "mk",
          "ml",
          "mn",
          "mr",
          "ms",
          "mt",
          "my",
          "na",
          "nb",
          "nd",
          "ne",
          "ng",
          "nl",
          "nn",
          "no",
          "nr",
          "nv",
          "ny",
          "oc",
          "oj",
          "om",
          "or",
          "os",
          "pa",
          "pi",
          "pl",
          "ps",
          "pt",
          "qu",
          "rm",
          "rn",
          "ro",
          "ru",
          "rw",
          "sa",
          "sc",
          "sd",
          "se",
          "sg",
          "si",
          "sk",
          "sl",
          "sm",
          "sn",
          "so",
          "sq",
          "sr",
          "ss",
          "st",
          "su",
          "sv",
          "sw",
          "ta",
          "te",
          "tg",
          "th",
          "ti",
          "tk",
          "tl",
          "tn",
          "to",
          "tr",
          "ts",
          "tt",
          "tw",
          "ty",
          "ug",
          "uk",
          "ur",
          "uz",
          "ve",
          "vi",
          "vo",
          "wa",
          "wo",
          "xh",
          "yi",
          "yo",
          "za",
          "zh",
          "zu"
        ],
        // From http://data.okfn.org/data/core/language-codes#resource-language-codes-full (IETF language tags)
        locale_regions: [
          "agq-CM",
          "asa-TZ",
          "ast-ES",
          "bas-CM",
          "bem-ZM",
          "bez-TZ",
          "brx-IN",
          "cgg-UG",
          "chr-US",
          "dav-KE",
          "dje-NE",
          "dsb-DE",
          "dua-CM",
          "dyo-SN",
          "ebu-KE",
          "ewo-CM",
          "fil-PH",
          "fur-IT",
          "gsw-CH",
          "gsw-FR",
          "gsw-LI",
          "guz-KE",
          "haw-US",
          "hsb-DE",
          "jgo-CM",
          "jmc-TZ",
          "kab-DZ",
          "kam-KE",
          "kde-TZ",
          "kea-CV",
          "khq-ML",
          "kkj-CM",
          "kln-KE",
          "kok-IN",
          "ksb-TZ",
          "ksf-CM",
          "ksh-DE",
          "lag-TZ",
          "lkt-US",
          "luo-KE",
          "luy-KE",
          "mas-KE",
          "mas-TZ",
          "mer-KE",
          "mfe-MU",
          "mgh-MZ",
          "mgo-CM",
          "mua-CM",
          "naq-NA",
          "nmg-CM",
          "nnh-CM",
          "nus-SD",
          "nyn-UG",
          "rof-TZ",
          "rwk-TZ",
          "sah-RU",
          "saq-KE",
          "sbp-TZ",
          "seh-MZ",
          "ses-ML",
          "shi-Latn",
          "shi-Latn-MA",
          "shi-Tfng",
          "shi-Tfng-MA",
          "smn-FI",
          "teo-KE",
          "teo-UG",
          "twq-NE",
          "tzm-Latn",
          "tzm-Latn-MA",
          "vai-Latn",
          "vai-Latn-LR",
          "vai-Vaii",
          "vai-Vaii-LR",
          "vun-TZ",
          "wae-CH",
          "xog-UG",
          "yav-CM",
          "zgh-MA",
          "af-NA",
          "af-ZA",
          "ak-GH",
          "am-ET",
          "ar-001",
          "ar-AE",
          "ar-BH",
          "ar-DJ",
          "ar-DZ",
          "ar-EG",
          "ar-EH",
          "ar-ER",
          "ar-IL",
          "ar-IQ",
          "ar-JO",
          "ar-KM",
          "ar-KW",
          "ar-LB",
          "ar-LY",
          "ar-MA",
          "ar-MR",
          "ar-OM",
          "ar-PS",
          "ar-QA",
          "ar-SA",
          "ar-SD",
          "ar-SO",
          "ar-SS",
          "ar-SY",
          "ar-TD",
          "ar-TN",
          "ar-YE",
          "as-IN",
          "az-Cyrl",
          "az-Cyrl-AZ",
          "az-Latn",
          "az-Latn-AZ",
          "be-BY",
          "bg-BG",
          "bm-Latn",
          "bm-Latn-ML",
          "bn-BD",
          "bn-IN",
          "bo-CN",
          "bo-IN",
          "br-FR",
          "bs-Cyrl",
          "bs-Cyrl-BA",
          "bs-Latn",
          "bs-Latn-BA",
          "ca-AD",
          "ca-ES",
          "ca-ES-VALENCIA",
          "ca-FR",
          "ca-IT",
          "cs-CZ",
          "cy-GB",
          "da-DK",
          "da-GL",
          "de-AT",
          "de-BE",
          "de-CH",
          "de-DE",
          "de-LI",
          "de-LU",
          "dz-BT",
          "ee-GH",
          "ee-TG",
          "el-CY",
          "el-GR",
          "en-001",
          "en-150",
          "en-AG",
          "en-AI",
          "en-AS",
          "en-AU",
          "en-BB",
          "en-BE",
          "en-BM",
          "en-BS",
          "en-BW",
          "en-BZ",
          "en-CA",
          "en-CC",
          "en-CK",
          "en-CM",
          "en-CX",
          "en-DG",
          "en-DM",
          "en-ER",
          "en-FJ",
          "en-FK",
          "en-FM",
          "en-GB",
          "en-GD",
          "en-GG",
          "en-GH",
          "en-GI",
          "en-GM",
          "en-GU",
          "en-GY",
          "en-HK",
          "en-IE",
          "en-IM",
          "en-IN",
          "en-IO",
          "en-JE",
          "en-JM",
          "en-KE",
          "en-KI",
          "en-KN",
          "en-KY",
          "en-LC",
          "en-LR",
          "en-LS",
          "en-MG",
          "en-MH",
          "en-MO",
          "en-MP",
          "en-MS",
          "en-MT",
          "en-MU",
          "en-MW",
          "en-MY",
          "en-NA",
          "en-NF",
          "en-NG",
          "en-NR",
          "en-NU",
          "en-NZ",
          "en-PG",
          "en-PH",
          "en-PK",
          "en-PN",
          "en-PR",
          "en-PW",
          "en-RW",
          "en-SB",
          "en-SC",
          "en-SD",
          "en-SG",
          "en-SH",
          "en-SL",
          "en-SS",
          "en-SX",
          "en-SZ",
          "en-TC",
          "en-TK",
          "en-TO",
          "en-TT",
          "en-TV",
          "en-TZ",
          "en-UG",
          "en-UM",
          "en-US",
          "en-US-POSIX",
          "en-VC",
          "en-VG",
          "en-VI",
          "en-VU",
          "en-WS",
          "en-ZA",
          "en-ZM",
          "en-ZW",
          "eo-001",
          "es-419",
          "es-AR",
          "es-BO",
          "es-CL",
          "es-CO",
          "es-CR",
          "es-CU",
          "es-DO",
          "es-EA",
          "es-EC",
          "es-ES",
          "es-GQ",
          "es-GT",
          "es-HN",
          "es-IC",
          "es-MX",
          "es-NI",
          "es-PA",
          "es-PE",
          "es-PH",
          "es-PR",
          "es-PY",
          "es-SV",
          "es-US",
          "es-UY",
          "es-VE",
          "et-EE",
          "eu-ES",
          "fa-AF",
          "fa-IR",
          "ff-CM",
          "ff-GN",
          "ff-MR",
          "ff-SN",
          "fi-FI",
          "fo-FO",
          "fr-BE",
          "fr-BF",
          "fr-BI",
          "fr-BJ",
          "fr-BL",
          "fr-CA",
          "fr-CD",
          "fr-CF",
          "fr-CG",
          "fr-CH",
          "fr-CI",
          "fr-CM",
          "fr-DJ",
          "fr-DZ",
          "fr-FR",
          "fr-GA",
          "fr-GF",
          "fr-GN",
          "fr-GP",
          "fr-GQ",
          "fr-HT",
          "fr-KM",
          "fr-LU",
          "fr-MA",
          "fr-MC",
          "fr-MF",
          "fr-MG",
          "fr-ML",
          "fr-MQ",
          "fr-MR",
          "fr-MU",
          "fr-NC",
          "fr-NE",
          "fr-PF",
          "fr-PM",
          "fr-RE",
          "fr-RW",
          "fr-SC",
          "fr-SN",
          "fr-SY",
          "fr-TD",
          "fr-TG",
          "fr-TN",
          "fr-VU",
          "fr-WF",
          "fr-YT",
          "fy-NL",
          "ga-IE",
          "gd-GB",
          "gl-ES",
          "gu-IN",
          "gv-IM",
          "ha-Latn",
          "ha-Latn-GH",
          "ha-Latn-NE",
          "ha-Latn-NG",
          "he-IL",
          "hi-IN",
          "hr-BA",
          "hr-HR",
          "hu-HU",
          "hy-AM",
          "id-ID",
          "ig-NG",
          "ii-CN",
          "is-IS",
          "it-CH",
          "it-IT",
          "it-SM",
          "ja-JP",
          "ka-GE",
          "ki-KE",
          "kk-Cyrl",
          "kk-Cyrl-KZ",
          "kl-GL",
          "km-KH",
          "kn-IN",
          "ko-KP",
          "ko-KR",
          "ks-Arab",
          "ks-Arab-IN",
          "kw-GB",
          "ky-Cyrl",
          "ky-Cyrl-KG",
          "lb-LU",
          "lg-UG",
          "ln-AO",
          "ln-CD",
          "ln-CF",
          "ln-CG",
          "lo-LA",
          "lt-LT",
          "lu-CD",
          "lv-LV",
          "mg-MG",
          "mk-MK",
          "ml-IN",
          "mn-Cyrl",
          "mn-Cyrl-MN",
          "mr-IN",
          "ms-Latn",
          "ms-Latn-BN",
          "ms-Latn-MY",
          "ms-Latn-SG",
          "mt-MT",
          "my-MM",
          "nb-NO",
          "nb-SJ",
          "nd-ZW",
          "ne-IN",
          "ne-NP",
          "nl-AW",
          "nl-BE",
          "nl-BQ",
          "nl-CW",
          "nl-NL",
          "nl-SR",
          "nl-SX",
          "nn-NO",
          "om-ET",
          "om-KE",
          "or-IN",
          "os-GE",
          "os-RU",
          "pa-Arab",
          "pa-Arab-PK",
          "pa-Guru",
          "pa-Guru-IN",
          "pl-PL",
          "ps-AF",
          "pt-AO",
          "pt-BR",
          "pt-CV",
          "pt-GW",
          "pt-MO",
          "pt-MZ",
          "pt-PT",
          "pt-ST",
          "pt-TL",
          "qu-BO",
          "qu-EC",
          "qu-PE",
          "rm-CH",
          "rn-BI",
          "ro-MD",
          "ro-RO",
          "ru-BY",
          "ru-KG",
          "ru-KZ",
          "ru-MD",
          "ru-RU",
          "ru-UA",
          "rw-RW",
          "se-FI",
          "se-NO",
          "se-SE",
          "sg-CF",
          "si-LK",
          "sk-SK",
          "sl-SI",
          "sn-ZW",
          "so-DJ",
          "so-ET",
          "so-KE",
          "so-SO",
          "sq-AL",
          "sq-MK",
          "sq-XK",
          "sr-Cyrl",
          "sr-Cyrl-BA",
          "sr-Cyrl-ME",
          "sr-Cyrl-RS",
          "sr-Cyrl-XK",
          "sr-Latn",
          "sr-Latn-BA",
          "sr-Latn-ME",
          "sr-Latn-RS",
          "sr-Latn-XK",
          "sv-AX",
          "sv-FI",
          "sv-SE",
          "sw-CD",
          "sw-KE",
          "sw-TZ",
          "sw-UG",
          "ta-IN",
          "ta-LK",
          "ta-MY",
          "ta-SG",
          "te-IN",
          "th-TH",
          "ti-ER",
          "ti-ET",
          "to-TO",
          "tr-CY",
          "tr-TR",
          "ug-Arab",
          "ug-Arab-CN",
          "uk-UA",
          "ur-IN",
          "ur-PK",
          "uz-Arab",
          "uz-Arab-AF",
          "uz-Cyrl",
          "uz-Cyrl-UZ",
          "uz-Latn",
          "uz-Latn-UZ",
          "vi-VN",
          "yi-001",
          "yo-BJ",
          "yo-NG",
          "zh-Hans",
          "zh-Hans-CN",
          "zh-Hans-HK",
          "zh-Hans-MO",
          "zh-Hans-SG",
          "zh-Hant",
          "zh-Hant-HK",
          "zh-Hant-MO",
          "zh-Hant-TW",
          "zu-ZA"
        ],
        us_states_and_dc: [
          { name: "Alabama", abbreviation: "AL" },
          { name: "Alaska", abbreviation: "AK" },
          { name: "Arizona", abbreviation: "AZ" },
          { name: "Arkansas", abbreviation: "AR" },
          { name: "California", abbreviation: "CA" },
          { name: "Colorado", abbreviation: "CO" },
          { name: "Connecticut", abbreviation: "CT" },
          { name: "Delaware", abbreviation: "DE" },
          { name: "District of Columbia", abbreviation: "DC" },
          { name: "Florida", abbreviation: "FL" },
          { name: "Georgia", abbreviation: "GA" },
          { name: "Hawaii", abbreviation: "HI" },
          { name: "Idaho", abbreviation: "ID" },
          { name: "Illinois", abbreviation: "IL" },
          { name: "Indiana", abbreviation: "IN" },
          { name: "Iowa", abbreviation: "IA" },
          { name: "Kansas", abbreviation: "KS" },
          { name: "Kentucky", abbreviation: "KY" },
          { name: "Louisiana", abbreviation: "LA" },
          { name: "Maine", abbreviation: "ME" },
          { name: "Maryland", abbreviation: "MD" },
          { name: "Massachusetts", abbreviation: "MA" },
          { name: "Michigan", abbreviation: "MI" },
          { name: "Minnesota", abbreviation: "MN" },
          { name: "Mississippi", abbreviation: "MS" },
          { name: "Missouri", abbreviation: "MO" },
          { name: "Montana", abbreviation: "MT" },
          { name: "Nebraska", abbreviation: "NE" },
          { name: "Nevada", abbreviation: "NV" },
          { name: "New Hampshire", abbreviation: "NH" },
          { name: "New Jersey", abbreviation: "NJ" },
          { name: "New Mexico", abbreviation: "NM" },
          { name: "New York", abbreviation: "NY" },
          { name: "North Carolina", abbreviation: "NC" },
          { name: "North Dakota", abbreviation: "ND" },
          { name: "Ohio", abbreviation: "OH" },
          { name: "Oklahoma", abbreviation: "OK" },
          { name: "Oregon", abbreviation: "OR" },
          { name: "Pennsylvania", abbreviation: "PA" },
          { name: "Rhode Island", abbreviation: "RI" },
          { name: "South Carolina", abbreviation: "SC" },
          { name: "South Dakota", abbreviation: "SD" },
          { name: "Tennessee", abbreviation: "TN" },
          { name: "Texas", abbreviation: "TX" },
          { name: "Utah", abbreviation: "UT" },
          { name: "Vermont", abbreviation: "VT" },
          { name: "Virginia", abbreviation: "VA" },
          { name: "Washington", abbreviation: "WA" },
          { name: "West Virginia", abbreviation: "WV" },
          { name: "Wisconsin", abbreviation: "WI" },
          { name: "Wyoming", abbreviation: "WY" }
        ],
        territories: [
          { name: "American Samoa", abbreviation: "AS" },
          { name: "Federated States of Micronesia", abbreviation: "FM" },
          { name: "Guam", abbreviation: "GU" },
          { name: "Marshall Islands", abbreviation: "MH" },
          { name: "Northern Mariana Islands", abbreviation: "MP" },
          { name: "Puerto Rico", abbreviation: "PR" },
          { name: "Virgin Islands, U.S.", abbreviation: "VI" }
        ],
        armed_forces: [
          { name: "Armed Forces Europe", abbreviation: "AE" },
          { name: "Armed Forces Pacific", abbreviation: "AP" },
          { name: "Armed Forces the Americas", abbreviation: "AA" }
        ],
        country_regions: {
          it: [
            { name: "Valle d'Aosta", abbreviation: "VDA" },
            { name: "Piemonte", abbreviation: "PIE" },
            { name: "Lombardia", abbreviation: "LOM" },
            { name: "Veneto", abbreviation: "VEN" },
            { name: "Trentino Alto Adige", abbreviation: "TAA" },
            { name: "Friuli Venezia Giulia", abbreviation: "FVG" },
            { name: "Liguria", abbreviation: "LIG" },
            { name: "Emilia Romagna", abbreviation: "EMR" },
            { name: "Toscana", abbreviation: "TOS" },
            { name: "Umbria", abbreviation: "UMB" },
            { name: "Marche", abbreviation: "MAR" },
            { name: "Abruzzo", abbreviation: "ABR" },
            { name: "Lazio", abbreviation: "LAZ" },
            { name: "Campania", abbreviation: "CAM" },
            { name: "Puglia", abbreviation: "PUG" },
            { name: "Basilicata", abbreviation: "BAS" },
            { name: "Molise", abbreviation: "MOL" },
            { name: "Calabria", abbreviation: "CAL" },
            { name: "Sicilia", abbreviation: "SIC" },
            { name: "Sardegna", abbreviation: "SAR" }
          ],
          mx: [
            { name: "Aguascalientes", abbreviation: "AGU" },
            { name: "Baja California", abbreviation: "BCN" },
            { name: "Baja California Sur", abbreviation: "BCS" },
            { name: "Campeche", abbreviation: "CAM" },
            { name: "Chiapas", abbreviation: "CHP" },
            { name: "Chihuahua", abbreviation: "CHH" },
            { name: "Ciudad de México", abbreviation: "DIF" },
            { name: "Coahuila", abbreviation: "COA" },
            { name: "Colima", abbreviation: "COL" },
            { name: "Durango", abbreviation: "DUR" },
            { name: "Guanajuato", abbreviation: "GUA" },
            { name: "Guerrero", abbreviation: "GRO" },
            { name: "Hidalgo", abbreviation: "HID" },
            { name: "Jalisco", abbreviation: "JAL" },
            { name: "México", abbreviation: "MEX" },
            { name: "Michoacán", abbreviation: "MIC" },
            { name: "Morelos", abbreviation: "MOR" },
            { name: "Nayarit", abbreviation: "NAY" },
            { name: "Nuevo León", abbreviation: "NLE" },
            { name: "Oaxaca", abbreviation: "OAX" },
            { name: "Puebla", abbreviation: "PUE" },
            { name: "Querétaro", abbreviation: "QUE" },
            { name: "Quintana Roo", abbreviation: "ROO" },
            { name: "San Luis Potosí", abbreviation: "SLP" },
            { name: "Sinaloa", abbreviation: "SIN" },
            { name: "Sonora", abbreviation: "SON" },
            { name: "Tabasco", abbreviation: "TAB" },
            { name: "Tamaulipas", abbreviation: "TAM" },
            { name: "Tlaxcala", abbreviation: "TLA" },
            { name: "Veracruz", abbreviation: "VER" },
            { name: "Yucatán", abbreviation: "YUC" },
            { name: "Zacatecas", abbreviation: "ZAC" }
          ]
        },
        street_suffixes: {
          "us": [
            { name: "Avenue", abbreviation: "Ave" },
            { name: "Boulevard", abbreviation: "Blvd" },
            { name: "Center", abbreviation: "Ctr" },
            { name: "Circle", abbreviation: "Cir" },
            { name: "Court", abbreviation: "Ct" },
            { name: "Drive", abbreviation: "Dr" },
            { name: "Extension", abbreviation: "Ext" },
            { name: "Glen", abbreviation: "Gln" },
            { name: "Grove", abbreviation: "Grv" },
            { name: "Heights", abbreviation: "Hts" },
            { name: "Highway", abbreviation: "Hwy" },
            { name: "Junction", abbreviation: "Jct" },
            { name: "Key", abbreviation: "Key" },
            { name: "Lane", abbreviation: "Ln" },
            { name: "Loop", abbreviation: "Loop" },
            { name: "Manor", abbreviation: "Mnr" },
            { name: "Mill", abbreviation: "Mill" },
            { name: "Park", abbreviation: "Park" },
            { name: "Parkway", abbreviation: "Pkwy" },
            { name: "Pass", abbreviation: "Pass" },
            { name: "Path", abbreviation: "Path" },
            { name: "Pike", abbreviation: "Pike" },
            { name: "Place", abbreviation: "Pl" },
            { name: "Plaza", abbreviation: "Plz" },
            { name: "Point", abbreviation: "Pt" },
            { name: "Ridge", abbreviation: "Rdg" },
            { name: "River", abbreviation: "Riv" },
            { name: "Road", abbreviation: "Rd" },
            { name: "Square", abbreviation: "Sq" },
            { name: "Street", abbreviation: "St" },
            { name: "Terrace", abbreviation: "Ter" },
            { name: "Trail", abbreviation: "Trl" },
            { name: "Turnpike", abbreviation: "Tpke" },
            { name: "View", abbreviation: "Vw" },
            { name: "Way", abbreviation: "Way" }
          ],
          "it": [
            { name: "Accesso", abbreviation: "Acc." },
            { name: "Alzaia", abbreviation: "Alz." },
            { name: "Arco", abbreviation: "Arco" },
            { name: "Archivolto", abbreviation: "Acv." },
            { name: "Arena", abbreviation: "Arena" },
            { name: "Argine", abbreviation: "Argine" },
            { name: "Bacino", abbreviation: "Bacino" },
            { name: "Banchi", abbreviation: "Banchi" },
            { name: "Banchina", abbreviation: "Ban." },
            { name: "Bastioni", abbreviation: "Bas." },
            { name: "Belvedere", abbreviation: "Belv." },
            { name: "Borgata", abbreviation: "B.ta" },
            { name: "Borgo", abbreviation: "B.go" },
            { name: "Calata", abbreviation: "Cal." },
            { name: "Calle", abbreviation: "Calle" },
            { name: "Campiello", abbreviation: "Cam." },
            { name: "Campo", abbreviation: "Cam." },
            { name: "Canale", abbreviation: "Can." },
            { name: "Carraia", abbreviation: "Carr." },
            { name: "Cascina", abbreviation: "Cascina" },
            { name: "Case sparse", abbreviation: "c.s." },
            { name: "Cavalcavia", abbreviation: "Cv." },
            { name: "Circonvallazione", abbreviation: "Cv." },
            { name: "Complanare", abbreviation: "C.re" },
            { name: "Contrada", abbreviation: "C.da" },
            { name: "Corso", abbreviation: "C.so" },
            { name: "Corte", abbreviation: "C.te" },
            { name: "Cortile", abbreviation: "C.le" },
            { name: "Diramazione", abbreviation: "Dir." },
            { name: "Fondaco", abbreviation: "F.co" },
            { name: "Fondamenta", abbreviation: "F.ta" },
            { name: "Fondo", abbreviation: "F.do" },
            { name: "Frazione", abbreviation: "Fr." },
            { name: "Isola", abbreviation: "Is." },
            { name: "Largo", abbreviation: "L.go" },
            { name: "Litoranea", abbreviation: "Lit." },
            { name: "Lungolago", abbreviation: "L.go lago" },
            { name: "Lungo Po", abbreviation: "l.go Po" },
            { name: "Molo", abbreviation: "Molo" },
            { name: "Mura", abbreviation: "Mura" },
            { name: "Passaggio privato", abbreviation: "pass. priv." },
            { name: "Passeggiata", abbreviation: "Pass." },
            { name: "Piazza", abbreviation: "P.zza" },
            { name: "Piazzale", abbreviation: "P.le" },
            { name: "Ponte", abbreviation: "P.te" },
            { name: "Portico", abbreviation: "P.co" },
            { name: "Rampa", abbreviation: "Rampa" },
            { name: "Regione", abbreviation: "Reg." },
            { name: "Rione", abbreviation: "R.ne" },
            { name: "Rio", abbreviation: "Rio" },
            { name: "Ripa", abbreviation: "Ripa" },
            { name: "Riva", abbreviation: "Riva" },
            { name: "Rondò", abbreviation: "Rondò" },
            { name: "Rotonda", abbreviation: "Rot." },
            { name: "Sagrato", abbreviation: "Sagr." },
            { name: "Salita", abbreviation: "Sal." },
            { name: "Scalinata", abbreviation: "Scal." },
            { name: "Scalone", abbreviation: "Scal." },
            { name: "Slargo", abbreviation: "Sl." },
            { name: "Sottoportico", abbreviation: "Sott." },
            { name: "Strada", abbreviation: "Str." },
            { name: "Stradale", abbreviation: "Str.le" },
            { name: "Strettoia", abbreviation: "Strett." },
            { name: "Traversa", abbreviation: "Trav." },
            { name: "Via", abbreviation: "V." },
            { name: "Viale", abbreviation: "V.le" },
            { name: "Vicinale", abbreviation: "Vic.le" },
            { name: "Vicolo", abbreviation: "Vic." }
          ],
          "uk": [
            { name: "Avenue", abbreviation: "Ave" },
            { name: "Close", abbreviation: "Cl" },
            { name: "Court", abbreviation: "Ct" },
            { name: "Crescent", abbreviation: "Cr" },
            { name: "Drive", abbreviation: "Dr" },
            { name: "Garden", abbreviation: "Gdn" },
            { name: "Gardens", abbreviation: "Gdns" },
            { name: "Green", abbreviation: "Gn" },
            { name: "Grove", abbreviation: "Gr" },
            { name: "Lane", abbreviation: "Ln" },
            { name: "Mount", abbreviation: "Mt" },
            { name: "Place", abbreviation: "Pl" },
            { name: "Park", abbreviation: "Pk" },
            { name: "Ridge", abbreviation: "Rdg" },
            { name: "Road", abbreviation: "Rd" },
            { name: "Square", abbreviation: "Sq" },
            { name: "Street", abbreviation: "St" },
            { name: "Terrace", abbreviation: "Ter" },
            { name: "Valley", abbreviation: "Val" }
          ]
        },
        months: [
          { name: "January", short_name: "Jan", numeric: "01", days: 31 },
          // Not messing with leap years...
          { name: "February", short_name: "Feb", numeric: "02", days: 28 },
          { name: "March", short_name: "Mar", numeric: "03", days: 31 },
          { name: "April", short_name: "Apr", numeric: "04", days: 30 },
          { name: "May", short_name: "May", numeric: "05", days: 31 },
          { name: "June", short_name: "Jun", numeric: "06", days: 30 },
          { name: "July", short_name: "Jul", numeric: "07", days: 31 },
          { name: "August", short_name: "Aug", numeric: "08", days: 31 },
          { name: "September", short_name: "Sep", numeric: "09", days: 30 },
          { name: "October", short_name: "Oct", numeric: "10", days: 31 },
          { name: "November", short_name: "Nov", numeric: "11", days: 30 },
          { name: "December", short_name: "Dec", numeric: "12", days: 31 }
        ],
        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29
        cc_types: [
          { name: "American Express", short_name: "amex", prefix: "34", length: 15 },
          { name: "Bankcard", short_name: "bankcard", prefix: "5610", length: 16 },
          { name: "China UnionPay", short_name: "chinaunion", prefix: "62", length: 16 },
          { name: "Diners Club Carte Blanche", short_name: "dccarte", prefix: "300", length: 14 },
          { name: "Diners Club enRoute", short_name: "dcenroute", prefix: "2014", length: 15 },
          { name: "Diners Club International", short_name: "dcintl", prefix: "36", length: 14 },
          { name: "Diners Club United States & Canada", short_name: "dcusc", prefix: "54", length: 16 },
          { name: "Discover Card", short_name: "discover", prefix: "6011", length: 16 },
          { name: "InstaPayment", short_name: "instapay", prefix: "637", length: 16 },
          { name: "JCB", short_name: "jcb", prefix: "3528", length: 16 },
          { name: "Laser", short_name: "laser", prefix: "6304", length: 16 },
          { name: "Maestro", short_name: "maestro", prefix: "5018", length: 16 },
          { name: "Mastercard", short_name: "mc", prefix: "51", length: 16 },
          { name: "Solo", short_name: "solo", prefix: "6334", length: 16 },
          { name: "Switch", short_name: "switch", prefix: "4903", length: 16 },
          { name: "Visa", short_name: "visa", prefix: "4", length: 16 },
          { name: "Visa Electron", short_name: "electron", prefix: "4026", length: 16 }
        ],
        //return all world currency by ISO 4217
        currency_types: [
          { "code": "AED", "name": "United Arab Emirates Dirham" },
          { "code": "AFN", "name": "Afghanistan Afghani" },
          { "code": "ALL", "name": "Albania Lek" },
          { "code": "AMD", "name": "Armenia Dram" },
          { "code": "ANG", "name": "Netherlands Antilles Guilder" },
          { "code": "AOA", "name": "Angola Kwanza" },
          { "code": "ARS", "name": "Argentina Peso" },
          { "code": "AUD", "name": "Australia Dollar" },
          { "code": "AWG", "name": "Aruba Guilder" },
          { "code": "AZN", "name": "Azerbaijan New Manat" },
          { "code": "BAM", "name": "Bosnia and Herzegovina Convertible Marka" },
          { "code": "BBD", "name": "Barbados Dollar" },
          { "code": "BDT", "name": "Bangladesh Taka" },
          { "code": "BGN", "name": "Bulgaria Lev" },
          { "code": "BHD", "name": "Bahrain Dinar" },
          { "code": "BIF", "name": "Burundi Franc" },
          { "code": "BMD", "name": "Bermuda Dollar" },
          { "code": "BND", "name": "Brunei Darussalam Dollar" },
          { "code": "BOB", "name": "Bolivia Boliviano" },
          { "code": "BRL", "name": "Brazil Real" },
          { "code": "BSD", "name": "Bahamas Dollar" },
          { "code": "BTN", "name": "Bhutan Ngultrum" },
          { "code": "BWP", "name": "Botswana Pula" },
          { "code": "BYR", "name": "Belarus Ruble" },
          { "code": "BZD", "name": "Belize Dollar" },
          { "code": "CAD", "name": "Canada Dollar" },
          { "code": "CDF", "name": "Congo/Kinshasa Franc" },
          { "code": "CHF", "name": "Switzerland Franc" },
          { "code": "CLP", "name": "Chile Peso" },
          { "code": "CNY", "name": "China Yuan Renminbi" },
          { "code": "COP", "name": "Colombia Peso" },
          { "code": "CRC", "name": "Costa Rica Colon" },
          { "code": "CUC", "name": "Cuba Convertible Peso" },
          { "code": "CUP", "name": "Cuba Peso" },
          { "code": "CVE", "name": "Cape Verde Escudo" },
          { "code": "CZK", "name": "Czech Republic Koruna" },
          { "code": "DJF", "name": "Djibouti Franc" },
          { "code": "DKK", "name": "Denmark Krone" },
          { "code": "DOP", "name": "Dominican Republic Peso" },
          { "code": "DZD", "name": "Algeria Dinar" },
          { "code": "EGP", "name": "Egypt Pound" },
          { "code": "ERN", "name": "Eritrea Nakfa" },
          { "code": "ETB", "name": "Ethiopia Birr" },
          { "code": "EUR", "name": "Euro Member Countries" },
          { "code": "FJD", "name": "Fiji Dollar" },
          { "code": "FKP", "name": "Falkland Islands (Malvinas) Pound" },
          { "code": "GBP", "name": "United Kingdom Pound" },
          { "code": "GEL", "name": "Georgia Lari" },
          { "code": "GGP", "name": "Guernsey Pound" },
          { "code": "GHS", "name": "Ghana Cedi" },
          { "code": "GIP", "name": "Gibraltar Pound" },
          { "code": "GMD", "name": "Gambia Dalasi" },
          { "code": "GNF", "name": "Guinea Franc" },
          { "code": "GTQ", "name": "Guatemala Quetzal" },
          { "code": "GYD", "name": "Guyana Dollar" },
          { "code": "HKD", "name": "Hong Kong Dollar" },
          { "code": "HNL", "name": "Honduras Lempira" },
          { "code": "HRK", "name": "Croatia Kuna" },
          { "code": "HTG", "name": "Haiti Gourde" },
          { "code": "HUF", "name": "Hungary Forint" },
          { "code": "IDR", "name": "Indonesia Rupiah" },
          { "code": "ILS", "name": "Israel Shekel" },
          { "code": "IMP", "name": "Isle of Man Pound" },
          { "code": "INR", "name": "India Rupee" },
          { "code": "IQD", "name": "Iraq Dinar" },
          { "code": "IRR", "name": "Iran Rial" },
          { "code": "ISK", "name": "Iceland Krona" },
          { "code": "JEP", "name": "Jersey Pound" },
          { "code": "JMD", "name": "Jamaica Dollar" },
          { "code": "JOD", "name": "Jordan Dinar" },
          { "code": "JPY", "name": "Japan Yen" },
          { "code": "KES", "name": "Kenya Shilling" },
          { "code": "KGS", "name": "Kyrgyzstan Som" },
          { "code": "KHR", "name": "Cambodia Riel" },
          { "code": "KMF", "name": "Comoros Franc" },
          { "code": "KPW", "name": "Korea (North) Won" },
          { "code": "KRW", "name": "Korea (South) Won" },
          { "code": "KWD", "name": "Kuwait Dinar" },
          { "code": "KYD", "name": "Cayman Islands Dollar" },
          { "code": "KZT", "name": "Kazakhstan Tenge" },
          { "code": "LAK", "name": "Laos Kip" },
          { "code": "LBP", "name": "Lebanon Pound" },
          { "code": "LKR", "name": "Sri Lanka Rupee" },
          { "code": "LRD", "name": "Liberia Dollar" },
          { "code": "LSL", "name": "Lesotho Loti" },
          { "code": "LTL", "name": "Lithuania Litas" },
          { "code": "LYD", "name": "Libya Dinar" },
          { "code": "MAD", "name": "Morocco Dirham" },
          { "code": "MDL", "name": "Moldova Leu" },
          { "code": "MGA", "name": "Madagascar Ariary" },
          { "code": "MKD", "name": "Macedonia Denar" },
          { "code": "MMK", "name": "Myanmar (Burma) Kyat" },
          { "code": "MNT", "name": "Mongolia Tughrik" },
          { "code": "MOP", "name": "Macau Pataca" },
          { "code": "MRO", "name": "Mauritania Ouguiya" },
          { "code": "MUR", "name": "Mauritius Rupee" },
          { "code": "MVR", "name": "Maldives (Maldive Islands) Rufiyaa" },
          { "code": "MWK", "name": "Malawi Kwacha" },
          { "code": "MXN", "name": "Mexico Peso" },
          { "code": "MYR", "name": "Malaysia Ringgit" },
          { "code": "MZN", "name": "Mozambique Metical" },
          { "code": "NAD", "name": "Namibia Dollar" },
          { "code": "NGN", "name": "Nigeria Naira" },
          { "code": "NIO", "name": "Nicaragua Cordoba" },
          { "code": "NOK", "name": "Norway Krone" },
          { "code": "NPR", "name": "Nepal Rupee" },
          { "code": "NZD", "name": "New Zealand Dollar" },
          { "code": "OMR", "name": "Oman Rial" },
          { "code": "PAB", "name": "Panama Balboa" },
          { "code": "PEN", "name": "Peru Nuevo Sol" },
          { "code": "PGK", "name": "Papua New Guinea Kina" },
          { "code": "PHP", "name": "Philippines Peso" },
          { "code": "PKR", "name": "Pakistan Rupee" },
          { "code": "PLN", "name": "Poland Zloty" },
          { "code": "PYG", "name": "Paraguay Guarani" },
          { "code": "QAR", "name": "Qatar Riyal" },
          { "code": "RON", "name": "Romania New Leu" },
          { "code": "RSD", "name": "Serbia Dinar" },
          { "code": "RUB", "name": "Russia Ruble" },
          { "code": "RWF", "name": "Rwanda Franc" },
          { "code": "SAR", "name": "Saudi Arabia Riyal" },
          { "code": "SBD", "name": "Solomon Islands Dollar" },
          { "code": "SCR", "name": "Seychelles Rupee" },
          { "code": "SDG", "name": "Sudan Pound" },
          { "code": "SEK", "name": "Sweden Krona" },
          { "code": "SGD", "name": "Singapore Dollar" },
          { "code": "SHP", "name": "Saint Helena Pound" },
          { "code": "SLL", "name": "Sierra Leone Leone" },
          { "code": "SOS", "name": "Somalia Shilling" },
          { "code": "SPL", "name": "Seborga Luigino" },
          { "code": "SRD", "name": "Suriname Dollar" },
          { "code": "STD", "name": "São Tomé and Príncipe Dobra" },
          { "code": "SVC", "name": "El Salvador Colon" },
          { "code": "SYP", "name": "Syria Pound" },
          { "code": "SZL", "name": "Swaziland Lilangeni" },
          { "code": "THB", "name": "Thailand Baht" },
          { "code": "TJS", "name": "Tajikistan Somoni" },
          { "code": "TMT", "name": "Turkmenistan Manat" },
          { "code": "TND", "name": "Tunisia Dinar" },
          { "code": "TOP", "name": "Tonga Pa'anga" },
          { "code": "TRY", "name": "Turkey Lira" },
          { "code": "TTD", "name": "Trinidad and Tobago Dollar" },
          { "code": "TVD", "name": "Tuvalu Dollar" },
          { "code": "TWD", "name": "Taiwan New Dollar" },
          { "code": "TZS", "name": "Tanzania Shilling" },
          { "code": "UAH", "name": "Ukraine Hryvnia" },
          { "code": "UGX", "name": "Uganda Shilling" },
          { "code": "USD", "name": "United States Dollar" },
          { "code": "UYU", "name": "Uruguay Peso" },
          { "code": "UZS", "name": "Uzbekistan Som" },
          { "code": "VEF", "name": "Venezuela Bolivar" },
          { "code": "VND", "name": "Viet Nam Dong" },
          { "code": "VUV", "name": "Vanuatu Vatu" },
          { "code": "WST", "name": "Samoa Tala" },
          { "code": "XAF", "name": "Communauté Financière Africaine (BEAC) CFA Franc BEAC" },
          { "code": "XCD", "name": "East Caribbean Dollar" },
          { "code": "XDR", "name": "International Monetary Fund (IMF) Special Drawing Rights" },
          { "code": "XOF", "name": "Communauté Financière Africaine (BCEAO) Franc" },
          { "code": "XPF", "name": "Comptoirs Français du Pacifique (CFP) Franc" },
          { "code": "YER", "name": "Yemen Rial" },
          { "code": "ZAR", "name": "South Africa Rand" },
          { "code": "ZMW", "name": "Zambia Kwacha" },
          { "code": "ZWD", "name": "Zimbabwe Dollar" }
        ],
        // return the names of all valide colors
        colorNames: [
          "AliceBlue",
          "Black",
          "Navy",
          "DarkBlue",
          "MediumBlue",
          "Blue",
          "DarkGreen",
          "Green",
          "Teal",
          "DarkCyan",
          "DeepSkyBlue",
          "DarkTurquoise",
          "MediumSpringGreen",
          "Lime",
          "SpringGreen",
          "Aqua",
          "Cyan",
          "MidnightBlue",
          "DodgerBlue",
          "LightSeaGreen",
          "ForestGreen",
          "SeaGreen",
          "DarkSlateGray",
          "LimeGreen",
          "MediumSeaGreen",
          "Turquoise",
          "RoyalBlue",
          "SteelBlue",
          "DarkSlateBlue",
          "MediumTurquoise",
          "Indigo",
          "DarkOliveGreen",
          "CadetBlue",
          "CornflowerBlue",
          "RebeccaPurple",
          "MediumAquaMarine",
          "DimGray",
          "SlateBlue",
          "OliveDrab",
          "SlateGray",
          "LightSlateGray",
          "MediumSlateBlue",
          "LawnGreen",
          "Chartreuse",
          "Aquamarine",
          "Maroon",
          "Purple",
          "Olive",
          "Gray",
          "SkyBlue",
          "LightSkyBlue",
          "BlueViolet",
          "DarkRed",
          "DarkMagenta",
          "SaddleBrown",
          "Ivory",
          "White",
          "DarkSeaGreen",
          "LightGreen",
          "MediumPurple",
          "DarkViolet",
          "PaleGreen",
          "DarkOrchid",
          "YellowGreen",
          "Sienna",
          "Brown",
          "DarkGray",
          "LightBlue",
          "GreenYellow",
          "PaleTurquoise",
          "LightSteelBlue",
          "PowderBlue",
          "FireBrick",
          "DarkGoldenRod",
          "MediumOrchid",
          "RosyBrown",
          "DarkKhaki",
          "Silver",
          "MediumVioletRed",
          "IndianRed",
          "Peru",
          "Chocolate",
          "Tan",
          "LightGray",
          "Thistle",
          "Orchid",
          "GoldenRod",
          "PaleVioletRed",
          "Crimson",
          "Gainsboro",
          "Plum",
          "BurlyWood",
          "LightCyan",
          "Lavender",
          "DarkSalmon",
          "Violet",
          "PaleGoldenRod",
          "LightCoral",
          "Khaki",
          "AliceBlue",
          "HoneyDew",
          "Azure",
          "SandyBrown",
          "Wheat",
          "Beige",
          "WhiteSmoke",
          "MintCream",
          "GhostWhite",
          "Salmon",
          "AntiqueWhite",
          "Linen",
          "LightGoldenRodYellow",
          "OldLace",
          "Red",
          "Fuchsia",
          "Magenta",
          "DeepPink",
          "OrangeRed",
          "Tomato",
          "HotPink",
          "Coral",
          "DarkOrange",
          "LightSalmon",
          "Orange",
          "LightPink",
          "Pink",
          "Gold",
          "PeachPuff",
          "NavajoWhite",
          "Moccasin",
          "Bisque",
          "MistyRose",
          "BlanchedAlmond",
          "PapayaWhip",
          "LavenderBlush",
          "SeaShell",
          "Cornsilk",
          "LemonChiffon",
          "FloralWhite",
          "Snow",
          "Yellow",
          "LightYellow"
        ],
        // Data taken from https://www.sec.gov/rules/other/4-460list.htm
        company: [
          "3Com Corp",
          "3M Company",
          "A.G. Edwards Inc.",
          "Abbott Laboratories",
          "Abercrombie & Fitch Co.",
          "ABM Industries Incorporated",
          "Ace Hardware Corporation",
          "ACT Manufacturing Inc.",
          "Acterna Corp.",
          "Adams Resources & Energy, Inc.",
          "ADC Telecommunications, Inc.",
          "Adelphia Communications Corporation",
          "Administaff, Inc.",
          "Adobe Systems Incorporated",
          "Adolph Coors Company",
          "Advance Auto Parts, Inc.",
          "Advanced Micro Devices, Inc.",
          "AdvancePCS, Inc.",
          "Advantica Restaurant Group, Inc.",
          "The AES Corporation",
          "Aetna Inc.",
          "Affiliated Computer Services, Inc.",
          "AFLAC Incorporated",
          "AGCO Corporation",
          "Agilent Technologies, Inc.",
          "Agway Inc.",
          "Apartment Investment and Management Company",
          "Air Products and Chemicals, Inc.",
          "Airborne, Inc.",
          "Airgas, Inc.",
          "AK Steel Holding Corporation",
          "Alaska Air Group, Inc.",
          "Alberto-Culver Company",
          "Albertson's, Inc.",
          "Alcoa Inc.",
          "Alleghany Corporation",
          "Allegheny Energy, Inc.",
          "Allegheny Technologies Incorporated",
          "Allergan, Inc.",
          "ALLETE, Inc.",
          "Alliant Energy Corporation",
          "Allied Waste Industries, Inc.",
          "Allmerica Financial Corporation",
          "The Allstate Corporation",
          "ALLTEL Corporation",
          "The Alpine Group, Inc.",
          "Amazon.com, Inc.",
          "AMC Entertainment Inc.",
          "American Power Conversion Corporation",
          "Amerada Hess Corporation",
          "AMERCO",
          "Ameren Corporation",
          "America West Holdings Corporation",
          "American Axle & Manufacturing Holdings, Inc.",
          "American Eagle Outfitters, Inc.",
          "American Electric Power Company, Inc.",
          "American Express Company",
          "American Financial Group, Inc.",
          "American Greetings Corporation",
          "American International Group, Inc.",
          "American Standard Companies Inc.",
          "American Water Works Company, Inc.",
          "AmerisourceBergen Corporation",
          "Ames Department Stores, Inc.",
          "Amgen Inc.",
          "Amkor Technology, Inc.",
          "AMR Corporation",
          "AmSouth Bancorp.",
          "Amtran, Inc.",
          "Anadarko Petroleum Corporation",
          "Analog Devices, Inc.",
          "Anheuser-Busch Companies, Inc.",
          "Anixter International Inc.",
          "AnnTaylor Inc.",
          "Anthem, Inc.",
          "AOL Time Warner Inc.",
          "Aon Corporation",
          "Apache Corporation",
          "Apple Computer, Inc.",
          "Applera Corporation",
          "Applied Industrial Technologies, Inc.",
          "Applied Materials, Inc.",
          "Aquila, Inc.",
          "ARAMARK Corporation",
          "Arch Coal, Inc.",
          "Archer Daniels Midland Company",
          "Arkansas Best Corporation",
          "Armstrong Holdings, Inc.",
          "Arrow Electronics, Inc.",
          "ArvinMeritor, Inc.",
          "Ashland Inc.",
          "Astoria Financial Corporation",
          "AT&T Corp.",
          "Atmel Corporation",
          "Atmos Energy Corporation",
          "Audiovox Corporation",
          "Autoliv, Inc.",
          "Automatic Data Processing, Inc.",
          "AutoNation, Inc.",
          "AutoZone, Inc.",
          "Avaya Inc.",
          "Avery Dennison Corporation",
          "Avista Corporation",
          "Avnet, Inc.",
          "Avon Products, Inc.",
          "Baker Hughes Incorporated",
          "Ball Corporation",
          "Bank of America Corporation",
          "The Bank of New York Company, Inc.",
          "Bank One Corporation",
          "Banknorth Group, Inc.",
          "Banta Corporation",
          "Barnes & Noble, Inc.",
          "Bausch & Lomb Incorporated",
          "Baxter International Inc.",
          "BB&T Corporation",
          "The Bear Stearns Companies Inc.",
          "Beazer Homes USA, Inc.",
          "Beckman Coulter, Inc.",
          "Becton, Dickinson and Company",
          "Bed Bath & Beyond Inc.",
          "Belk, Inc.",
          "Bell Microproducts Inc.",
          "BellSouth Corporation",
          "Belo Corp.",
          "Bemis Company, Inc.",
          "Benchmark Electronics, Inc.",
          "Berkshire Hathaway Inc.",
          "Best Buy Co., Inc.",
          "Bethlehem Steel Corporation",
          "Beverly Enterprises, Inc.",
          "Big Lots, Inc.",
          "BJ Services Company",
          "BJ's Wholesale Club, Inc.",
          "The Black & Decker Corporation",
          "Black Hills Corporation",
          "BMC Software, Inc.",
          "The Boeing Company",
          "Boise Cascade Corporation",
          "Borders Group, Inc.",
          "BorgWarner Inc.",
          "Boston Scientific Corporation",
          "Bowater Incorporated",
          "Briggs & Stratton Corporation",
          "Brightpoint, Inc.",
          "Brinker International, Inc.",
          "Bristol-Myers Squibb Company",
          "Broadwing, Inc.",
          "Brown Shoe Company, Inc.",
          "Brown-Forman Corporation",
          "Brunswick Corporation",
          "Budget Group, Inc.",
          "Burlington Coat Factory Warehouse Corporation",
          "Burlington Industries, Inc.",
          "Burlington Northern Santa Fe Corporation",
          "Burlington Resources Inc.",
          "C. H. Robinson Worldwide Inc.",
          "Cablevision Systems Corp",
          "Cabot Corp",
          "Cadence Design Systems, Inc.",
          "Calpine Corp.",
          "Campbell Soup Co.",
          "Capital One Financial Corp.",
          "Cardinal Health Inc.",
          "Caremark Rx Inc.",
          "Carlisle Cos. Inc.",
          "Carpenter Technology Corp.",
          "Casey's General Stores Inc.",
          "Caterpillar Inc.",
          "CBRL Group Inc.",
          "CDI Corp.",
          "CDW Computer Centers Inc.",
          "CellStar Corp.",
          "Cendant Corp",
          "Cenex Harvest States Cooperatives",
          "Centex Corp.",
          "CenturyTel Inc.",
          "Ceridian Corp.",
          "CH2M Hill Cos. Ltd.",
          "Champion Enterprises Inc.",
          "Charles Schwab Corp.",
          "Charming Shoppes Inc.",
          "Charter Communications Inc.",
          "Charter One Financial Inc.",
          "ChevronTexaco Corp.",
          "Chiquita Brands International Inc.",
          "Chubb Corp",
          "Ciena Corp.",
          "Cigna Corp",
          "Cincinnati Financial Corp.",
          "Cinergy Corp.",
          "Cintas Corp.",
          "Circuit City Stores Inc.",
          "Cisco Systems Inc.",
          "Citigroup, Inc",
          "Citizens Communications Co.",
          "CKE Restaurants Inc.",
          "Clear Channel Communications Inc.",
          "The Clorox Co.",
          "CMGI Inc.",
          "CMS Energy Corp.",
          "CNF Inc.",
          "Coca-Cola Co.",
          "Coca-Cola Enterprises Inc.",
          "Colgate-Palmolive Co.",
          "Collins & Aikman Corp.",
          "Comcast Corp.",
          "Comdisco Inc.",
          "Comerica Inc.",
          "Comfort Systems USA Inc.",
          "Commercial Metals Co.",
          "Community Health Systems Inc.",
          "Compass Bancshares Inc",
          "Computer Associates International Inc.",
          "Computer Sciences Corp.",
          "Compuware Corp.",
          "Comverse Technology Inc.",
          "ConAgra Foods Inc.",
          "Concord EFS Inc.",
          "Conectiv, Inc",
          "Conoco Inc",
          "Conseco Inc.",
          "Consolidated Freightways Corp.",
          "Consolidated Edison Inc.",
          "Constellation Brands Inc.",
          "Constellation Emergy Group Inc.",
          "Continental Airlines Inc.",
          "Convergys Corp.",
          "Cooper Cameron Corp.",
          "Cooper Industries Ltd.",
          "Cooper Tire & Rubber Co.",
          "Corn Products International Inc.",
          "Corning Inc.",
          "Costco Wholesale Corp.",
          "Countrywide Credit Industries Inc.",
          "Coventry Health Care Inc.",
          "Cox Communications Inc.",
          "Crane Co.",
          "Crompton Corp.",
          "Crown Cork & Seal Co. Inc.",
          "CSK Auto Corp.",
          "CSX Corp.",
          "Cummins Inc.",
          "CVS Corp.",
          "Cytec Industries Inc.",
          "D&K Healthcare Resources, Inc.",
          "D.R. Horton Inc.",
          "Dana Corporation",
          "Danaher Corporation",
          "Darden Restaurants Inc.",
          "DaVita Inc.",
          "Dean Foods Company",
          "Deere & Company",
          "Del Monte Foods Co",
          "Dell Computer Corporation",
          "Delphi Corp.",
          "Delta Air Lines Inc.",
          "Deluxe Corporation",
          "Devon Energy Corporation",
          "Di Giorgio Corporation",
          "Dial Corporation",
          "Diebold Incorporated",
          "Dillard's Inc.",
          "DIMON Incorporated",
          "Dole Food Company, Inc.",
          "Dollar General Corporation",
          "Dollar Tree Stores, Inc.",
          "Dominion Resources, Inc.",
          "Domino's Pizza LLC",
          "Dover Corporation, Inc.",
          "Dow Chemical Company",
          "Dow Jones & Company, Inc.",
          "DPL Inc.",
          "DQE Inc.",
          "Dreyer's Grand Ice Cream, Inc.",
          "DST Systems, Inc.",
          "DTE Energy Co.",
          "E.I. Du Pont de Nemours and Company",
          "Duke Energy Corp",
          "Dun & Bradstreet Inc.",
          "DURA Automotive Systems Inc.",
          "DynCorp",
          "Dynegy Inc.",
          "E*Trade Group, Inc.",
          "E.W. Scripps Company",
          "Earthlink, Inc.",
          "Eastman Chemical Company",
          "Eastman Kodak Company",
          "Eaton Corporation",
          "Echostar Communications Corporation",
          "Ecolab Inc.",
          "Edison International",
          "EGL Inc.",
          "El Paso Corporation",
          "Electronic Arts Inc.",
          "Electronic Data Systems Corp.",
          "Eli Lilly and Company",
          "EMC Corporation",
          "Emcor Group Inc.",
          "Emerson Electric Co.",
          "Encompass Services Corporation",
          "Energizer Holdings Inc.",
          "Energy East Corporation",
          "Engelhard Corporation",
          "Enron Corp.",
          "Entergy Corporation",
          "Enterprise Products Partners L.P.",
          "EOG Resources, Inc.",
          "Equifax Inc.",
          "Equitable Resources Inc.",
          "Equity Office Properties Trust",
          "Equity Residential Properties Trust",
          "Estee Lauder Companies Inc.",
          "Exelon Corporation",
          "Exide Technologies",
          "Expeditors International of Washington Inc.",
          "Express Scripts Inc.",
          "ExxonMobil Corporation",
          "Fairchild Semiconductor International Inc.",
          "Family Dollar Stores Inc.",
          "Farmland Industries Inc.",
          "Federal Mogul Corp.",
          "Federated Department Stores Inc.",
          "Federal Express Corp.",
          "Felcor Lodging Trust Inc.",
          "Ferro Corp.",
          "Fidelity National Financial Inc.",
          "Fifth Third Bancorp",
          "First American Financial Corp.",
          "First Data Corp.",
          "First National of Nebraska Inc.",
          "First Tennessee National Corp.",
          "FirstEnergy Corp.",
          "Fiserv Inc.",
          "Fisher Scientific International Inc.",
          "FleetBoston Financial Co.",
          "Fleetwood Enterprises Inc.",
          "Fleming Companies Inc.",
          "Flowers Foods Inc.",
          "Flowserv Corp",
          "Fluor Corp",
          "FMC Corp",
          "Foamex International Inc",
          "Foot Locker Inc",
          "Footstar Inc.",
          "Ford Motor Co",
          "Forest Laboratories Inc.",
          "Fortune Brands Inc.",
          "Foster Wheeler Ltd.",
          "FPL Group Inc.",
          "Franklin Resources Inc.",
          "Freeport McMoran Copper & Gold Inc.",
          "Frontier Oil Corp",
          "Furniture Brands International Inc.",
          "Gannett Co., Inc.",
          "Gap Inc.",
          "Gateway Inc.",
          "GATX Corporation",
          "Gemstar-TV Guide International Inc.",
          "GenCorp Inc.",
          "General Cable Corporation",
          "General Dynamics Corporation",
          "General Electric Company",
          "General Mills Inc",
          "General Motors Corporation",
          "Genesis Health Ventures Inc.",
          "Gentek Inc.",
          "Gentiva Health Services Inc.",
          "Genuine Parts Company",
          "Genuity Inc.",
          "Genzyme Corporation",
          "Georgia Gulf Corporation",
          "Georgia-Pacific Corporation",
          "Gillette Company",
          "Gold Kist Inc.",
          "Golden State Bancorp Inc.",
          "Golden West Financial Corporation",
          "Goldman Sachs Group Inc.",
          "Goodrich Corporation",
          "The Goodyear Tire & Rubber Company",
          "Granite Construction Incorporated",
          "Graybar Electric Company Inc.",
          "Great Lakes Chemical Corporation",
          "Great Plains Energy Inc.",
          "GreenPoint Financial Corp.",
          "Greif Bros. Corporation",
          "Grey Global Group Inc.",
          "Group 1 Automotive Inc.",
          "Guidant Corporation",
          "H&R Block Inc.",
          "H.B. Fuller Company",
          "H.J. Heinz Company",
          "Halliburton Co.",
          "Harley-Davidson Inc.",
          "Harman International Industries Inc.",
          "Harrah's Entertainment Inc.",
          "Harris Corp.",
          "Harsco Corp.",
          "Hartford Financial Services Group Inc.",
          "Hasbro Inc.",
          "Hawaiian Electric Industries Inc.",
          "HCA Inc.",
          "Health Management Associates Inc.",
          "Health Net Inc.",
          "Healthsouth Corp",
          "Henry Schein Inc.",
          "Hercules Inc.",
          "Herman Miller Inc.",
          "Hershey Foods Corp.",
          "Hewlett-Packard Company",
          "Hibernia Corp.",
          "Hillenbrand Industries Inc.",
          "Hilton Hotels Corp.",
          "Hollywood Entertainment Corp.",
          "Home Depot Inc.",
          "Hon Industries Inc.",
          "Honeywell International Inc.",
          "Hormel Foods Corp.",
          "Host Marriott Corp.",
          "Household International Corp.",
          "Hovnanian Enterprises Inc.",
          "Hub Group Inc.",
          "Hubbell Inc.",
          "Hughes Supply Inc.",
          "Humana Inc.",
          "Huntington Bancshares Inc.",
          "Idacorp Inc.",
          "IDT Corporation",
          "IKON Office Solutions Inc.",
          "Illinois Tool Works Inc.",
          "IMC Global Inc.",
          "Imperial Sugar Company",
          "IMS Health Inc.",
          "Ingles Market Inc",
          "Ingram Micro Inc.",
          "Insight Enterprises Inc.",
          "Integrated Electrical Services Inc.",
          "Intel Corporation",
          "International Paper Co.",
          "Interpublic Group of Companies Inc.",
          "Interstate Bakeries Corporation",
          "International Business Machines Corp.",
          "International Flavors & Fragrances Inc.",
          "International Multifoods Corporation",
          "Intuit Inc.",
          "IT Group Inc.",
          "ITT Industries Inc.",
          "Ivax Corp.",
          "J.B. Hunt Transport Services Inc.",
          "J.C. Penny Co.",
          "J.P. Morgan Chase & Co.",
          "Jabil Circuit Inc.",
          "Jack In The Box Inc.",
          "Jacobs Engineering Group Inc.",
          "JDS Uniphase Corp.",
          "Jefferson-Pilot Co.",
          "John Hancock Financial Services Inc.",
          "Johnson & Johnson",
          "Johnson Controls Inc.",
          "Jones Apparel Group Inc.",
          "KB Home",
          "Kellogg Company",
          "Kellwood Company",
          "Kelly Services Inc.",
          "Kemet Corp.",
          "Kennametal Inc.",
          "Kerr-McGee Corporation",
          "KeyCorp",
          "KeySpan Corp.",
          "Kimball International Inc.",
          "Kimberly-Clark Corporation",
          "Kindred Healthcare Inc.",
          "KLA-Tencor Corporation",
          "K-Mart Corp.",
          "Knight-Ridder Inc.",
          "Kohl's Corp.",
          "KPMG Consulting Inc.",
          "Kroger Co.",
          "L-3 Communications Holdings Inc.",
          "Laboratory Corporation of America Holdings",
          "Lam Research Corporation",
          "LandAmerica Financial Group Inc.",
          "Lands' End Inc.",
          "Landstar System Inc.",
          "La-Z-Boy Inc.",
          "Lear Corporation",
          "Legg Mason Inc.",
          "Leggett & Platt Inc.",
          "Lehman Brothers Holdings Inc.",
          "Lennar Corporation",
          "Lennox International Inc.",
          "Level 3 Communications Inc.",
          "Levi Strauss & Co.",
          "Lexmark International Inc.",
          "Limited Inc.",
          "Lincoln National Corporation",
          "Linens 'n Things Inc.",
          "Lithia Motors Inc.",
          "Liz Claiborne Inc.",
          "Lockheed Martin Corporation",
          "Loews Corporation",
          "Longs Drug Stores Corporation",
          "Louisiana-Pacific Corporation",
          "Lowe's Companies Inc.",
          "LSI Logic Corporation",
          "The LTV Corporation",
          "The Lubrizol Corporation",
          "Lucent Technologies Inc.",
          "Lyondell Chemical Company",
          "M & T Bank Corporation",
          "Magellan Health Services Inc.",
          "Mail-Well Inc.",
          "Mandalay Resort Group",
          "Manor Care Inc.",
          "Manpower Inc.",
          "Marathon Oil Corporation",
          "Mariner Health Care Inc.",
          "Markel Corporation",
          "Marriott International Inc.",
          "Marsh & McLennan Companies Inc.",
          "Marsh Supermarkets Inc.",
          "Marshall & Ilsley Corporation",
          "Martin Marietta Materials Inc.",
          "Masco Corporation",
          "Massey Energy Company",
          "MasTec Inc.",
          "Mattel Inc.",
          "Maxim Integrated Products Inc.",
          "Maxtor Corporation",
          "Maxxam Inc.",
          "The May Department Stores Company",
          "Maytag Corporation",
          "MBNA Corporation",
          "McCormick & Company Incorporated",
          "McDonald's Corporation",
          "The McGraw-Hill Companies Inc.",
          "McKesson Corporation",
          "McLeodUSA Incorporated",
          "M.D.C. Holdings Inc.",
          "MDU Resources Group Inc.",
          "MeadWestvaco Corporation",
          "Medtronic Inc.",
          "Mellon Financial Corporation",
          "The Men's Wearhouse Inc.",
          "Merck & Co., Inc.",
          "Mercury General Corporation",
          "Merrill Lynch & Co. Inc.",
          "Metaldyne Corporation",
          "Metals USA Inc.",
          "MetLife Inc.",
          "Metris Companies Inc",
          "MGIC Investment Corporation",
          "MGM Mirage",
          "Michaels Stores Inc.",
          "Micron Technology Inc.",
          "Microsoft Corporation",
          "Milacron Inc.",
          "Millennium Chemicals Inc.",
          "Mirant Corporation",
          "Mohawk Industries Inc.",
          "Molex Incorporated",
          "The MONY Group Inc.",
          "Morgan Stanley Dean Witter & Co.",
          "Motorola Inc.",
          "MPS Group Inc.",
          "Murphy Oil Corporation",
          "Nabors Industries Inc",
          "Nacco Industries Inc",
          "Nash Finch Company",
          "National City Corp.",
          "National Commerce Financial Corporation",
          "National Fuel Gas Company",
          "National Oilwell Inc",
          "National Rural Utilities Cooperative Finance Corporation",
          "National Semiconductor Corporation",
          "National Service Industries Inc",
          "Navistar International Corporation",
          "NCR Corporation",
          "The Neiman Marcus Group Inc.",
          "New Jersey Resources Corporation",
          "New York Times Company",
          "Newell Rubbermaid Inc",
          "Newmont Mining Corporation",
          "Nextel Communications Inc",
          "Nicor Inc",
          "Nike Inc",
          "NiSource Inc",
          "Noble Energy Inc",
          "Nordstrom Inc",
          "Norfolk Southern Corporation",
          "Nortek Inc",
          "North Fork Bancorporation Inc",
          "Northeast Utilities System",
          "Northern Trust Corporation",
          "Northrop Grumman Corporation",
          "NorthWestern Corporation",
          "Novellus Systems Inc",
          "NSTAR",
          "NTL Incorporated",
          "Nucor Corp",
          "Nvidia Corp",
          "NVR Inc",
          "Northwest Airlines Corp",
          "Occidental Petroleum Corp",
          "Ocean Energy Inc",
          "Office Depot Inc.",
          "OfficeMax Inc",
          "OGE Energy Corp",
          "Oglethorpe Power Corp.",
          "Ohio Casualty Corp.",
          "Old Republic International Corp.",
          "Olin Corp.",
          "OM Group Inc",
          "Omnicare Inc",
          "Omnicom Group",
          "On Semiconductor Corp",
          "ONEOK Inc",
          "Oracle Corp",
          "Oshkosh Truck Corp",
          "Outback Steakhouse Inc.",
          "Owens & Minor Inc.",
          "Owens Corning",
          "Owens-Illinois Inc",
          "Oxford Health Plans Inc",
          "Paccar Inc",
          "PacifiCare Health Systems Inc",
          "Packaging Corp. of America",
          "Pactiv Corp",
          "Pall Corp",
          "Pantry Inc",
          "Park Place Entertainment Corp",
          "Parker Hannifin Corp.",
          "Pathmark Stores Inc.",
          "Paychex Inc",
          "Payless Shoesource Inc",
          "Penn Traffic Co.",
          "Pennzoil-Quaker State Company",
          "Pentair Inc",
          "Peoples Energy Corp.",
          "PeopleSoft Inc",
          "Pep Boys Manny, Moe & Jack",
          "Potomac Electric Power Co.",
          "Pepsi Bottling Group Inc.",
          "PepsiAmericas Inc.",
          "PepsiCo Inc.",
          "Performance Food Group Co.",
          "Perini Corp",
          "PerkinElmer Inc",
          "Perot Systems Corp",
          "Petco Animal Supplies Inc.",
          "Peter Kiewit Sons', Inc.",
          "PETsMART Inc",
          "Pfizer Inc",
          "Pacific Gas & Electric Corp.",
          "Pharmacia Corp",
          "Phar Mor Inc.",
          "Phelps Dodge Corp.",
          "Philip Morris Companies Inc.",
          "Phillips Petroleum Co",
          "Phillips Van Heusen Corp.",
          "Phoenix Companies Inc",
          "Pier 1 Imports Inc.",
          "Pilgrim's Pride Corporation",
          "Pinnacle West Capital Corp",
          "Pioneer-Standard Electronics Inc.",
          "Pitney Bowes Inc.",
          "Pittston Brinks Group",
          "Plains All American Pipeline LP",
          "PNC Financial Services Group Inc.",
          "PNM Resources Inc",
          "Polaris Industries Inc.",
          "Polo Ralph Lauren Corp",
          "PolyOne Corp",
          "Popular Inc",
          "Potlatch Corp",
          "PPG Industries Inc",
          "PPL Corp",
          "Praxair Inc",
          "Precision Castparts Corp",
          "Premcor Inc.",
          "Pride International Inc",
          "Primedia Inc",
          "Principal Financial Group Inc.",
          "Procter & Gamble Co.",
          "Pro-Fac Cooperative Inc.",
          "Progress Energy Inc",
          "Progressive Corporation",
          "Protective Life Corp",
          "Provident Financial Group",
          "Providian Financial Corp.",
          "Prudential Financial Inc.",
          "PSS World Medical Inc",
          "Public Service Enterprise Group Inc.",
          "Publix Super Markets Inc.",
          "Puget Energy Inc.",
          "Pulte Homes Inc",
          "Qualcomm Inc",
          "Quanta Services Inc.",
          "Quantum Corp",
          "Quest Diagnostics Inc.",
          "Questar Corp",
          "Quintiles Transnational",
          "Qwest Communications Intl Inc",
          "R.J. Reynolds Tobacco Company",
          "R.R. Donnelley & Sons Company",
          "Radio Shack Corporation",
          "Raymond James Financial Inc.",
          "Raytheon Company",
          "Reader's Digest Association Inc.",
          "Reebok International Ltd.",
          "Regions Financial Corp.",
          "Regis Corporation",
          "Reliance Steel & Aluminum Co.",
          "Reliant Energy Inc.",
          "Rent A Center Inc",
          "Republic Services Inc",
          "Revlon Inc",
          "RGS Energy Group Inc",
          "Rite Aid Corp",
          "Riverwood Holding Inc.",
          "RoadwayCorp",
          "Robert Half International Inc.",
          "Rock-Tenn Co",
          "Rockwell Automation Inc",
          "Rockwell Collins Inc",
          "Rohm & Haas Co.",
          "Ross Stores Inc",
          "RPM Inc.",
          "Ruddick Corp",
          "Ryder System Inc",
          "Ryerson Tull Inc",
          "Ryland Group Inc.",
          "Sabre Holdings Corp",
          "Safeco Corp",
          "Safeguard Scientifics Inc.",
          "Safeway Inc",
          "Saks Inc",
          "Sanmina-SCI Inc",
          "Sara Lee Corp",
          "SBC Communications Inc",
          "Scana Corp.",
          "Schering-Plough Corp",
          "Scholastic Corp",
          "SCI Systems Onc.",
          "Science Applications Intl. Inc.",
          "Scientific-Atlanta Inc",
          "Scotts Company",
          "Seaboard Corp",
          "Sealed Air Corp",
          "Sears Roebuck & Co",
          "Sempra Energy",
          "Sequa Corp",
          "Service Corp. International",
          "ServiceMaster Co",
          "Shaw Group Inc",
          "Sherwin-Williams Company",
          "Shopko Stores Inc",
          "Siebel Systems Inc",
          "Sierra Health Services Inc",
          "Sierra Pacific Resources",
          "Silgan Holdings Inc.",
          "Silicon Graphics Inc",
          "Simon Property Group Inc",
          "SLM Corporation",
          "Smith International Inc",
          "Smithfield Foods Inc",
          "Smurfit-Stone Container Corp",
          "Snap-On Inc",
          "Solectron Corp",
          "Solutia Inc",
          "Sonic Automotive Inc.",
          "Sonoco Products Co.",
          "Southern Company",
          "Southern Union Company",
          "SouthTrust Corp.",
          "Southwest Airlines Co",
          "Southwest Gas Corp",
          "Sovereign Bancorp Inc.",
          "Spartan Stores Inc",
          "Spherion Corp",
          "Sports Authority Inc",
          "Sprint Corp.",
          "SPX Corp",
          "St. Jude Medical Inc",
          "St. Paul Cos.",
          "Staff Leasing Inc.",
          "StanCorp Financial Group Inc",
          "Standard Pacific Corp.",
          "Stanley Works",
          "Staples Inc",
          "Starbucks Corp",
          "Starwood Hotels & Resorts Worldwide Inc",
          "State Street Corp.",
          "Stater Bros. Holdings Inc.",
          "Steelcase Inc",
          "Stein Mart Inc",
          "Stewart & Stevenson Services Inc",
          "Stewart Information Services Corp",
          "Stilwell Financial Inc",
          "Storage Technology Corporation",
          "Stryker Corp",
          "Sun Healthcare Group Inc.",
          "Sun Microsystems Inc.",
          "SunGard Data Systems Inc.",
          "Sunoco Inc.",
          "SunTrust Banks Inc",
          "Supervalu Inc",
          "Swift Transportation, Co., Inc",
          "Symbol Technologies Inc",
          "Synovus Financial Corp.",
          "Sysco Corp",
          "Systemax Inc.",
          "Target Corp.",
          "Tech Data Corporation",
          "TECO Energy Inc",
          "Tecumseh Products Company",
          "Tektronix Inc",
          "Teleflex Incorporated",
          "Telephone & Data Systems Inc",
          "Tellabs Inc.",
          "Temple-Inland Inc",
          "Tenet Healthcare Corporation",
          "Tenneco Automotive Inc.",
          "Teradyne Inc",
          "Terex Corp",
          "Tesoro Petroleum Corp.",
          "Texas Industries Inc.",
          "Texas Instruments Incorporated",
          "Textron Inc",
          "Thermo Electron Corporation",
          "Thomas & Betts Corporation",
          "Tiffany & Co",
          "Timken Company",
          "TJX Companies Inc",
          "TMP Worldwide Inc",
          "Toll Brothers Inc",
          "Torchmark Corporation",
          "Toro Company",
          "Tower Automotive Inc.",
          "Toys 'R' Us Inc",
          "Trans World Entertainment Corp.",
          "TransMontaigne Inc",
          "Transocean Inc",
          "TravelCenters of America Inc.",
          "Triad Hospitals Inc",
          "Tribune Company",
          "Trigon Healthcare Inc.",
          "Trinity Industries Inc",
          "Trump Hotels & Casino Resorts Inc.",
          "TruServ Corporation",
          "TRW Inc",
          "TXU Corp",
          "Tyson Foods Inc",
          "U.S. Bancorp",
          "U.S. Industries Inc.",
          "UAL Corporation",
          "UGI Corporation",
          "Unified Western Grocers Inc",
          "Union Pacific Corporation",
          "Union Planters Corp",
          "Unisource Energy Corp",
          "Unisys Corporation",
          "United Auto Group Inc",
          "United Defense Industries Inc.",
          "United Parcel Service Inc",
          "United Rentals Inc",
          "United Stationers Inc",
          "United Technologies Corporation",
          "UnitedHealth Group Incorporated",
          "Unitrin Inc",
          "Universal Corporation",
          "Universal Forest Products Inc",
          "Universal Health Services Inc",
          "Unocal Corporation",
          "Unova Inc",
          "UnumProvident Corporation",
          "URS Corporation",
          "US Airways Group Inc",
          "US Oncology Inc",
          "USA Interactive",
          "USFreighways Corporation",
          "USG Corporation",
          "UST Inc",
          "Valero Energy Corporation",
          "Valspar Corporation",
          "Value City Department Stores Inc",
          "Varco International Inc",
          "Vectren Corporation",
          "Veritas Software Corporation",
          "Verizon Communications Inc",
          "VF Corporation",
          "Viacom Inc",
          "Viad Corp",
          "Viasystems Group Inc",
          "Vishay Intertechnology Inc",
          "Visteon Corporation",
          "Volt Information Sciences Inc",
          "Vulcan Materials Company",
          "W.R. Berkley Corporation",
          "W.R. Grace & Co",
          "W.W. Grainger Inc",
          "Wachovia Corporation",
          "Wakenhut Corporation",
          "Walgreen Co",
          "Wallace Computer Services Inc",
          "Wal-Mart Stores Inc",
          "Walt Disney Co",
          "Walter Industries Inc",
          "Washington Mutual Inc",
          "Washington Post Co.",
          "Waste Management Inc",
          "Watsco Inc",
          "Weatherford International Inc",
          "Weis Markets Inc.",
          "Wellpoint Health Networks Inc",
          "Wells Fargo & Company",
          "Wendy's International Inc",
          "Werner Enterprises Inc",
          "WESCO International Inc",
          "Western Digital Inc",
          "Western Gas Resources Inc",
          "WestPoint Stevens Inc",
          "Weyerhauser Company",
          "WGL Holdings Inc",
          "Whirlpool Corporation",
          "Whole Foods Market Inc",
          "Willamette Industries Inc.",
          "Williams Companies Inc",
          "Williams Sonoma Inc",
          "Winn Dixie Stores Inc",
          "Wisconsin Energy Corporation",
          "Wm Wrigley Jr Company",
          "World Fuel Services Corporation",
          "WorldCom Inc",
          "Worthington Industries Inc",
          "WPS Resources Corporation",
          "Wyeth",
          "Wyndham International Inc",
          "Xcel Energy Inc",
          "Xerox Corp",
          "Xilinx Inc",
          "XO Communications Inc",
          "Yellow Corporation",
          "York International Corp",
          "Yum Brands Inc.",
          "Zale Corporation",
          "Zions Bancorporation"
        ],
        fileExtension: {
          "raster": ["bmp", "gif", "gpl", "ico", "jpeg", "psd", "png", "psp", "raw", "tiff"],
          "vector": ["3dv", "amf", "awg", "ai", "cgm", "cdr", "cmx", "dxf", "e2d", "egt", "eps", "fs", "odg", "svg", "xar"],
          "3d": ["3dmf", "3dm", "3mf", "3ds", "an8", "aoi", "blend", "cal3d", "cob", "ctm", "iob", "jas", "max", "mb", "mdx", "obj", "x", "x3d"],
          "document": ["doc", "docx", "dot", "html", "xml", "odt", "odm", "ott", "csv", "rtf", "tex", "xhtml", "xps"]
        },
        // Data taken from https://github.com/dmfilipenko/timezones.json/blob/master/timezones.json
        timezones: [
          {
            "name": "Dateline Standard Time",
            "abbr": "DST",
            "offset": -12,
            "isdst": false,
            "text": "(UTC-12:00) International Date Line West",
            "utc": [
              "Etc/GMT+12"
            ]
          },
          {
            "name": "UTC-11",
            "abbr": "U",
            "offset": -11,
            "isdst": false,
            "text": "(UTC-11:00) Coordinated Universal Time-11",
            "utc": [
              "Etc/GMT+11",
              "Pacific/Midway",
              "Pacific/Niue",
              "Pacific/Pago_Pago"
            ]
          },
          {
            "name": "Hawaiian Standard Time",
            "abbr": "HST",
            "offset": -10,
            "isdst": false,
            "text": "(UTC-10:00) Hawaii",
            "utc": [
              "Etc/GMT+10",
              "Pacific/Honolulu",
              "Pacific/Johnston",
              "Pacific/Rarotonga",
              "Pacific/Tahiti"
            ]
          },
          {
            "name": "Alaskan Standard Time",
            "abbr": "AKDT",
            "offset": -8,
            "isdst": true,
            "text": "(UTC-09:00) Alaska",
            "utc": [
              "America/Anchorage",
              "America/Juneau",
              "America/Nome",
              "America/Sitka",
              "America/Yakutat"
            ]
          },
          {
            "name": "Pacific Standard Time (Mexico)",
            "abbr": "PDT",
            "offset": -7,
            "isdst": true,
            "text": "(UTC-08:00) Baja California",
            "utc": [
              "America/Santa_Isabel"
            ]
          },
          {
            "name": "Pacific Daylight Time",
            "abbr": "PDT",
            "offset": -7,
            "isdst": true,
            "text": "(UTC-07:00) Pacific Time (US & Canada)",
            "utc": [
              "America/Dawson",
              "America/Los_Angeles",
              "America/Tijuana",
              "America/Vancouver",
              "America/Whitehorse"
            ]
          },
          {
            "name": "Pacific Standard Time",
            "abbr": "PST",
            "offset": -8,
            "isdst": false,
            "text": "(UTC-08:00) Pacific Time (US & Canada)",
            "utc": [
              "America/Dawson",
              "America/Los_Angeles",
              "America/Tijuana",
              "America/Vancouver",
              "America/Whitehorse",
              "PST8PDT"
            ]
          },
          {
            "name": "US Mountain Standard Time",
            "abbr": "UMST",
            "offset": -7,
            "isdst": false,
            "text": "(UTC-07:00) Arizona",
            "utc": [
              "America/Creston",
              "America/Dawson_Creek",
              "America/Hermosillo",
              "America/Phoenix",
              "Etc/GMT+7"
            ]
          },
          {
            "name": "Mountain Standard Time (Mexico)",
            "abbr": "MDT",
            "offset": -6,
            "isdst": true,
            "text": "(UTC-07:00) Chihuahua, La Paz, Mazatlan",
            "utc": [
              "America/Chihuahua",
              "America/Mazatlan"
            ]
          },
          {
            "name": "Mountain Standard Time",
            "abbr": "MDT",
            "offset": -6,
            "isdst": true,
            "text": "(UTC-07:00) Mountain Time (US & Canada)",
            "utc": [
              "America/Boise",
              "America/Cambridge_Bay",
              "America/Denver",
              "America/Edmonton",
              "America/Inuvik",
              "America/Ojinaga",
              "America/Yellowknife",
              "MST7MDT"
            ]
          },
          {
            "name": "Central America Standard Time",
            "abbr": "CAST",
            "offset": -6,
            "isdst": false,
            "text": "(UTC-06:00) Central America",
            "utc": [
              "America/Belize",
              "America/Costa_Rica",
              "America/El_Salvador",
              "America/Guatemala",
              "America/Managua",
              "America/Tegucigalpa",
              "Etc/GMT+6",
              "Pacific/Galapagos"
            ]
          },
          {
            "name": "Central Standard Time",
            "abbr": "CDT",
            "offset": -5,
            "isdst": true,
            "text": "(UTC-06:00) Central Time (US & Canada)",
            "utc": [
              "America/Chicago",
              "America/Indiana/Knox",
              "America/Indiana/Tell_City",
              "America/Matamoros",
              "America/Menominee",
              "America/North_Dakota/Beulah",
              "America/North_Dakota/Center",
              "America/North_Dakota/New_Salem",
              "America/Rainy_River",
              "America/Rankin_Inlet",
              "America/Resolute",
              "America/Winnipeg",
              "CST6CDT"
            ]
          },
          {
            "name": "Central Standard Time (Mexico)",
            "abbr": "CDT",
            "offset": -5,
            "isdst": true,
            "text": "(UTC-06:00) Guadalajara, Mexico City, Monterrey",
            "utc": [
              "America/Bahia_Banderas",
              "America/Cancun",
              "America/Merida",
              "America/Mexico_City",
              "America/Monterrey"
            ]
          },
          {
            "name": "Canada Central Standard Time",
            "abbr": "CCST",
            "offset": -6,
            "isdst": false,
            "text": "(UTC-06:00) Saskatchewan",
            "utc": [
              "America/Regina",
              "America/Swift_Current"
            ]
          },
          {
            "name": "SA Pacific Standard Time",
            "abbr": "SPST",
            "offset": -5,
            "isdst": false,
            "text": "(UTC-05:00) Bogota, Lima, Quito",
            "utc": [
              "America/Bogota",
              "America/Cayman",
              "America/Coral_Harbour",
              "America/Eirunepe",
              "America/Guayaquil",
              "America/Jamaica",
              "America/Lima",
              "America/Panama",
              "America/Rio_Branco",
              "Etc/GMT+5"
            ]
          },
          {
            "name": "Eastern Standard Time",
            "abbr": "EDT",
            "offset": -4,
            "isdst": true,
            "text": "(UTC-05:00) Eastern Time (US & Canada)",
            "utc": [
              "America/Detroit",
              "America/Havana",
              "America/Indiana/Petersburg",
              "America/Indiana/Vincennes",
              "America/Indiana/Winamac",
              "America/Iqaluit",
              "America/Kentucky/Monticello",
              "America/Louisville",
              "America/Montreal",
              "America/Nassau",
              "America/New_York",
              "America/Nipigon",
              "America/Pangnirtung",
              "America/Port-au-Prince",
              "America/Thunder_Bay",
              "America/Toronto",
              "EST5EDT"
            ]
          },
          {
            "name": "US Eastern Standard Time",
            "abbr": "UEDT",
            "offset": -4,
            "isdst": true,
            "text": "(UTC-05:00) Indiana (East)",
            "utc": [
              "America/Indiana/Marengo",
              "America/Indiana/Vevay",
              "America/Indianapolis"
            ]
          },
          {
            "name": "Venezuela Standard Time",
            "abbr": "VST",
            "offset": -4.5,
            "isdst": false,
            "text": "(UTC-04:30) Caracas",
            "utc": [
              "America/Caracas"
            ]
          },
          {
            "name": "Paraguay Standard Time",
            "abbr": "PYT",
            "offset": -4,
            "isdst": false,
            "text": "(UTC-04:00) Asuncion",
            "utc": [
              "America/Asuncion"
            ]
          },
          {
            "name": "Atlantic Standard Time",
            "abbr": "ADT",
            "offset": -3,
            "isdst": true,
            "text": "(UTC-04:00) Atlantic Time (Canada)",
            "utc": [
              "America/Glace_Bay",
              "America/Goose_Bay",
              "America/Halifax",
              "America/Moncton",
              "America/Thule",
              "Atlantic/Bermuda"
            ]
          },
          {
            "name": "Central Brazilian Standard Time",
            "abbr": "CBST",
            "offset": -4,
            "isdst": false,
            "text": "(UTC-04:00) Cuiaba",
            "utc": [
              "America/Campo_Grande",
              "America/Cuiaba"
            ]
          },
          {
            "name": "SA Western Standard Time",
            "abbr": "SWST",
            "offset": -4,
            "isdst": false,
            "text": "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan",
            "utc": [
              "America/Anguilla",
              "America/Antigua",
              "America/Aruba",
              "America/Barbados",
              "America/Blanc-Sablon",
              "America/Boa_Vista",
              "America/Curacao",
              "America/Dominica",
              "America/Grand_Turk",
              "America/Grenada",
              "America/Guadeloupe",
              "America/Guyana",
              "America/Kralendijk",
              "America/La_Paz",
              "America/Lower_Princes",
              "America/Manaus",
              "America/Marigot",
              "America/Martinique",
              "America/Montserrat",
              "America/Port_of_Spain",
              "America/Porto_Velho",
              "America/Puerto_Rico",
              "America/Santo_Domingo",
              "America/St_Barthelemy",
              "America/St_Kitts",
              "America/St_Lucia",
              "America/St_Thomas",
              "America/St_Vincent",
              "America/Tortola",
              "Etc/GMT+4"
            ]
          },
          {
            "name": "Pacific SA Standard Time",
            "abbr": "PSST",
            "offset": -4,
            "isdst": false,
            "text": "(UTC-04:00) Santiago",
            "utc": [
              "America/Santiago",
              "Antarctica/Palmer"
            ]
          },
          {
            "name": "Newfoundland Standard Time",
            "abbr": "NDT",
            "offset": -2.5,
            "isdst": true,
            "text": "(UTC-03:30) Newfoundland",
            "utc": [
              "America/St_Johns"
            ]
          },
          {
            "name": "E. South America Standard Time",
            "abbr": "ESAST",
            "offset": -3,
            "isdst": false,
            "text": "(UTC-03:00) Brasilia",
            "utc": [
              "America/Sao_Paulo"
            ]
          },
          {
            "name": "Argentina Standard Time",
            "abbr": "AST",
            "offset": -3,
            "isdst": false,
            "text": "(UTC-03:00) Buenos Aires",
            "utc": [
              "America/Argentina/La_Rioja",
              "America/Argentina/Rio_Gallegos",
              "America/Argentina/Salta",
              "America/Argentina/San_Juan",
              "America/Argentina/San_Luis",
              "America/Argentina/Tucuman",
              "America/Argentina/Ushuaia",
              "America/Buenos_Aires",
              "America/Catamarca",
              "America/Cordoba",
              "America/Jujuy",
              "America/Mendoza"
            ]
          },
          {
            "name": "SA Eastern Standard Time",
            "abbr": "SEST",
            "offset": -3,
            "isdst": false,
            "text": "(UTC-03:00) Cayenne, Fortaleza",
            "utc": [
              "America/Araguaina",
              "America/Belem",
              "America/Cayenne",
              "America/Fortaleza",
              "America/Maceio",
              "America/Paramaribo",
              "America/Recife",
              "America/Santarem",
              "Antarctica/Rothera",
              "Atlantic/Stanley",
              "Etc/GMT+3"
            ]
          },
          {
            "name": "Greenland Standard Time",
            "abbr": "GDT",
            "offset": -3,
            "isdst": true,
            "text": "(UTC-03:00) Greenland",
            "utc": [
              "America/Godthab"
            ]
          },
          {
            "name": "Montevideo Standard Time",
            "abbr": "MST",
            "offset": -3,
            "isdst": false,
            "text": "(UTC-03:00) Montevideo",
            "utc": [
              "America/Montevideo"
            ]
          },
          {
            "name": "Bahia Standard Time",
            "abbr": "BST",
            "offset": -3,
            "isdst": false,
            "text": "(UTC-03:00) Salvador",
            "utc": [
              "America/Bahia"
            ]
          },
          {
            "name": "UTC-02",
            "abbr": "U",
            "offset": -2,
            "isdst": false,
            "text": "(UTC-02:00) Coordinated Universal Time-02",
            "utc": [
              "America/Noronha",
              "Atlantic/South_Georgia",
              "Etc/GMT+2"
            ]
          },
          {
            "name": "Mid-Atlantic Standard Time",
            "abbr": "MDT",
            "offset": -1,
            "isdst": true,
            "text": "(UTC-02:00) Mid-Atlantic - Old",
            "utc": []
          },
          {
            "name": "Azores Standard Time",
            "abbr": "ADT",
            "offset": 0,
            "isdst": true,
            "text": "(UTC-01:00) Azores",
            "utc": [
              "America/Scoresbysund",
              "Atlantic/Azores"
            ]
          },
          {
            "name": "Cape Verde Standard Time",
            "abbr": "CVST",
            "offset": -1,
            "isdst": false,
            "text": "(UTC-01:00) Cape Verde Is.",
            "utc": [
              "Atlantic/Cape_Verde",
              "Etc/GMT+1"
            ]
          },
          {
            "name": "Morocco Standard Time",
            "abbr": "MDT",
            "offset": 1,
            "isdst": true,
            "text": "(UTC) Casablanca",
            "utc": [
              "Africa/Casablanca",
              "Africa/El_Aaiun"
            ]
          },
          {
            "name": "UTC",
            "abbr": "UTC",
            "offset": 0,
            "isdst": false,
            "text": "(UTC) Coordinated Universal Time",
            "utc": [
              "America/Danmarkshavn",
              "Etc/GMT"
            ]
          },
          {
            "name": "GMT Standard Time",
            "abbr": "GMT",
            "offset": 0,
            "isdst": false,
            "text": "(UTC) Edinburgh, London",
            "utc": [
              "Europe/Isle_of_Man",
              "Europe/Guernsey",
              "Europe/Jersey",
              "Europe/London"
            ]
          },
          {
            "name": "British Summer Time",
            "abbr": "BST",
            "offset": 1,
            "isdst": true,
            "text": "(UTC+01:00) Edinburgh, London",
            "utc": [
              "Europe/Isle_of_Man",
              "Europe/Guernsey",
              "Europe/Jersey",
              "Europe/London"
            ]
          },
          {
            "name": "GMT Standard Time",
            "abbr": "GDT",
            "offset": 1,
            "isdst": true,
            "text": "(UTC) Dublin, Lisbon",
            "utc": [
              "Atlantic/Canary",
              "Atlantic/Faeroe",
              "Atlantic/Madeira",
              "Europe/Dublin",
              "Europe/Lisbon"
            ]
          },
          {
            "name": "Greenwich Standard Time",
            "abbr": "GST",
            "offset": 0,
            "isdst": false,
            "text": "(UTC) Monrovia, Reykjavik",
            "utc": [
              "Africa/Abidjan",
              "Africa/Accra",
              "Africa/Bamako",
              "Africa/Banjul",
              "Africa/Bissau",
              "Africa/Conakry",
              "Africa/Dakar",
              "Africa/Freetown",
              "Africa/Lome",
              "Africa/Monrovia",
              "Africa/Nouakchott",
              "Africa/Ouagadougou",
              "Africa/Sao_Tome",
              "Atlantic/Reykjavik",
              "Atlantic/St_Helena"
            ]
          },
          {
            "name": "W. Europe Standard Time",
            "abbr": "WEDT",
            "offset": 2,
            "isdst": true,
            "text": "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
            "utc": [
              "Arctic/Longyearbyen",
              "Europe/Amsterdam",
              "Europe/Andorra",
              "Europe/Berlin",
              "Europe/Busingen",
              "Europe/Gibraltar",
              "Europe/Luxembourg",
              "Europe/Malta",
              "Europe/Monaco",
              "Europe/Oslo",
              "Europe/Rome",
              "Europe/San_Marino",
              "Europe/Stockholm",
              "Europe/Vaduz",
              "Europe/Vatican",
              "Europe/Vienna",
              "Europe/Zurich"
            ]
          },
          {
            "name": "Central Europe Standard Time",
            "abbr": "CEDT",
            "offset": 2,
            "isdst": true,
            "text": "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
            "utc": [
              "Europe/Belgrade",
              "Europe/Bratislava",
              "Europe/Budapest",
              "Europe/Ljubljana",
              "Europe/Podgorica",
              "Europe/Prague",
              "Europe/Tirane"
            ]
          },
          {
            "name": "Romance Standard Time",
            "abbr": "RDT",
            "offset": 2,
            "isdst": true,
            "text": "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris",
            "utc": [
              "Africa/Ceuta",
              "Europe/Brussels",
              "Europe/Copenhagen",
              "Europe/Madrid",
              "Europe/Paris"
            ]
          },
          {
            "name": "Central European Standard Time",
            "abbr": "CEDT",
            "offset": 2,
            "isdst": true,
            "text": "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
            "utc": [
              "Europe/Sarajevo",
              "Europe/Skopje",
              "Europe/Warsaw",
              "Europe/Zagreb"
            ]
          },
          {
            "name": "W. Central Africa Standard Time",
            "abbr": "WCAST",
            "offset": 1,
            "isdst": false,
            "text": "(UTC+01:00) West Central Africa",
            "utc": [
              "Africa/Algiers",
              "Africa/Bangui",
              "Africa/Brazzaville",
              "Africa/Douala",
              "Africa/Kinshasa",
              "Africa/Lagos",
              "Africa/Libreville",
              "Africa/Luanda",
              "Africa/Malabo",
              "Africa/Ndjamena",
              "Africa/Niamey",
              "Africa/Porto-Novo",
              "Africa/Tunis",
              "Etc/GMT-1"
            ]
          },
          {
            "name": "Namibia Standard Time",
            "abbr": "NST",
            "offset": 1,
            "isdst": false,
            "text": "(UTC+01:00) Windhoek",
            "utc": [
              "Africa/Windhoek"
            ]
          },
          {
            "name": "GTB Standard Time",
            "abbr": "GDT",
            "offset": 3,
            "isdst": true,
            "text": "(UTC+02:00) Athens, Bucharest",
            "utc": [
              "Asia/Nicosia",
              "Europe/Athens",
              "Europe/Bucharest",
              "Europe/Chisinau"
            ]
          },
          {
            "name": "Middle East Standard Time",
            "abbr": "MEDT",
            "offset": 3,
            "isdst": true,
            "text": "(UTC+02:00) Beirut",
            "utc": [
              "Asia/Beirut"
            ]
          },
          {
            "name": "Egypt Standard Time",
            "abbr": "EST",
            "offset": 2,
            "isdst": false,
            "text": "(UTC+02:00) Cairo",
            "utc": [
              "Africa/Cairo"
            ]
          },
          {
            "name": "Syria Standard Time",
            "abbr": "SDT",
            "offset": 3,
            "isdst": true,
            "text": "(UTC+02:00) Damascus",
            "utc": [
              "Asia/Damascus"
            ]
          },
          {
            "name": "E. Europe Standard Time",
            "abbr": "EEDT",
            "offset": 3,
            "isdst": true,
            "text": "(UTC+02:00) E. Europe",
            "utc": [
              "Asia/Nicosia",
              "Europe/Athens",
              "Europe/Bucharest",
              "Europe/Chisinau",
              "Europe/Helsinki",
              "Europe/Kiev",
              "Europe/Mariehamn",
              "Europe/Nicosia",
              "Europe/Riga",
              "Europe/Sofia",
              "Europe/Tallinn",
              "Europe/Uzhgorod",
              "Europe/Vilnius",
              "Europe/Zaporozhye"
            ]
          },
          {
            "name": "South Africa Standard Time",
            "abbr": "SAST",
            "offset": 2,
            "isdst": false,
            "text": "(UTC+02:00) Harare, Pretoria",
            "utc": [
              "Africa/Blantyre",
              "Africa/Bujumbura",
              "Africa/Gaborone",
              "Africa/Harare",
              "Africa/Johannesburg",
              "Africa/Kigali",
              "Africa/Lubumbashi",
              "Africa/Lusaka",
              "Africa/Maputo",
              "Africa/Maseru",
              "Africa/Mbabane",
              "Etc/GMT-2"
            ]
          },
          {
            "name": "FLE Standard Time",
            "abbr": "FDT",
            "offset": 3,
            "isdst": true,
            "text": "(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",
            "utc": [
              "Europe/Helsinki",
              "Europe/Kiev",
              "Europe/Mariehamn",
              "Europe/Riga",
              "Europe/Sofia",
              "Europe/Tallinn",
              "Europe/Uzhgorod",
              "Europe/Vilnius",
              "Europe/Zaporozhye"
            ]
          },
          {
            "name": "Turkey Standard Time",
            "abbr": "TDT",
            "offset": 3,
            "isdst": false,
            "text": "(UTC+03:00) Istanbul",
            "utc": [
              "Europe/Istanbul"
            ]
          },
          {
            "name": "Israel Standard Time",
            "abbr": "JDT",
            "offset": 3,
            "isdst": true,
            "text": "(UTC+02:00) Jerusalem",
            "utc": [
              "Asia/Jerusalem"
            ]
          },
          {
            "name": "Libya Standard Time",
            "abbr": "LST",
            "offset": 2,
            "isdst": false,
            "text": "(UTC+02:00) Tripoli",
            "utc": [
              "Africa/Tripoli"
            ]
          },
          {
            "name": "Jordan Standard Time",
            "abbr": "JST",
            "offset": 3,
            "isdst": false,
            "text": "(UTC+03:00) Amman",
            "utc": [
              "Asia/Amman"
            ]
          },
          {
            "name": "Arabic Standard Time",
            "abbr": "AST",
            "offset": 3,
            "isdst": false,
            "text": "(UTC+03:00) Baghdad",
            "utc": [
              "Asia/Baghdad"
            ]
          },
          {
            "name": "Kaliningrad Standard Time",
            "abbr": "KST",
            "offset": 3,
            "isdst": false,
            "text": "(UTC+02:00) Kaliningrad",
            "utc": [
              "Europe/Kaliningrad"
            ]
          },
          {
            "name": "Arab Standard Time",
            "abbr": "AST",
            "offset": 3,
            "isdst": false,
            "text": "(UTC+03:00) Kuwait, Riyadh",
            "utc": [
              "Asia/Aden",
              "Asia/Bahrain",
              "Asia/Kuwait",
              "Asia/Qatar",
              "Asia/Riyadh"
            ]
          },
          {
            "name": "E. Africa Standard Time",
            "abbr": "EAST",
            "offset": 3,
            "isdst": false,
            "text": "(UTC+03:00) Nairobi",
            "utc": [
              "Africa/Addis_Ababa",
              "Africa/Asmera",
              "Africa/Dar_es_Salaam",
              "Africa/Djibouti",
              "Africa/Juba",
              "Africa/Kampala",
              "Africa/Khartoum",
              "Africa/Mogadishu",
              "Africa/Nairobi",
              "Antarctica/Syowa",
              "Etc/GMT-3",
              "Indian/Antananarivo",
              "Indian/Comoro",
              "Indian/Mayotte"
            ]
          },
          {
            "name": "Moscow Standard Time",
            "abbr": "MSK",
            "offset": 3,
            "isdst": false,
            "text": "(UTC+03:00) Moscow, St. Petersburg, Volgograd, Minsk",
            "utc": [
              "Europe/Kirov",
              "Europe/Moscow",
              "Europe/Simferopol",
              "Europe/Volgograd",
              "Europe/Minsk"
            ]
          },
          {
            "name": "Samara Time",
            "abbr": "SAMT",
            "offset": 4,
            "isdst": false,
            "text": "(UTC+04:00) Samara, Ulyanovsk, Saratov",
            "utc": [
              "Europe/Astrakhan",
              "Europe/Samara",
              "Europe/Ulyanovsk"
            ]
          },
          {
            "name": "Iran Standard Time",
            "abbr": "IDT",
            "offset": 4.5,
            "isdst": true,
            "text": "(UTC+03:30) Tehran",
            "utc": [
              "Asia/Tehran"
            ]
          },
          {
            "name": "Arabian Standard Time",
            "abbr": "AST",
            "offset": 4,
            "isdst": false,
            "text": "(UTC+04:00) Abu Dhabi, Muscat",
            "utc": [
              "Asia/Dubai",
              "Asia/Muscat",
              "Etc/GMT-4"
            ]
          },
          {
            "name": "Azerbaijan Standard Time",
            "abbr": "ADT",
            "offset": 5,
            "isdst": true,
            "text": "(UTC+04:00) Baku",
            "utc": [
              "Asia/Baku"
            ]
          },
          {
            "name": "Mauritius Standard Time",
            "abbr": "MST",
            "offset": 4,
            "isdst": false,
            "text": "(UTC+04:00) Port Louis",
            "utc": [
              "Indian/Mahe",
              "Indian/Mauritius",
              "Indian/Reunion"
            ]
          },
          {
            "name": "Georgian Standard Time",
            "abbr": "GET",
            "offset": 4,
            "isdst": false,
            "text": "(UTC+04:00) Tbilisi",
            "utc": [
              "Asia/Tbilisi"
            ]
          },
          {
            "name": "Caucasus Standard Time",
            "abbr": "CST",
            "offset": 4,
            "isdst": false,
            "text": "(UTC+04:00) Yerevan",
            "utc": [
              "Asia/Yerevan"
            ]
          },
          {
            "name": "Afghanistan Standard Time",
            "abbr": "AST",
            "offset": 4.5,
            "isdst": false,
            "text": "(UTC+04:30) Kabul",
            "utc": [
              "Asia/Kabul"
            ]
          },
          {
            "name": "West Asia Standard Time",
            "abbr": "WAST",
            "offset": 5,
            "isdst": false,
            "text": "(UTC+05:00) Ashgabat, Tashkent",
            "utc": [
              "Antarctica/Mawson",
              "Asia/Aqtau",
              "Asia/Aqtobe",
              "Asia/Ashgabat",
              "Asia/Dushanbe",
              "Asia/Oral",
              "Asia/Samarkand",
              "Asia/Tashkent",
              "Etc/GMT-5",
              "Indian/Kerguelen",
              "Indian/Maldives"
            ]
          },
          {
            "name": "Yekaterinburg Time",
            "abbr": "YEKT",
            "offset": 5,
            "isdst": false,
            "text": "(UTC+05:00) Yekaterinburg",
            "utc": [
              "Asia/Yekaterinburg"
            ]
          },
          {
            "name": "Pakistan Standard Time",
            "abbr": "PKT",
            "offset": 5,
            "isdst": false,
            "text": "(UTC+05:00) Islamabad, Karachi",
            "utc": [
              "Asia/Karachi"
            ]
          },
          {
            "name": "India Standard Time",
            "abbr": "IST",
            "offset": 5.5,
            "isdst": false,
            "text": "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi",
            "utc": [
              "Asia/Kolkata"
            ]
          },
          {
            "name": "Sri Lanka Standard Time",
            "abbr": "SLST",
            "offset": 5.5,
            "isdst": false,
            "text": "(UTC+05:30) Sri Jayawardenepura",
            "utc": [
              "Asia/Colombo"
            ]
          },
          {
            "name": "Nepal Standard Time",
            "abbr": "NST",
            "offset": 5.75,
            "isdst": false,
            "text": "(UTC+05:45) Kathmandu",
            "utc": [
              "Asia/Kathmandu"
            ]
          },
          {
            "name": "Central Asia Standard Time",
            "abbr": "CAST",
            "offset": 6,
            "isdst": false,
            "text": "(UTC+06:00) Nur-Sultan (Astana)",
            "utc": [
              "Antarctica/Vostok",
              "Asia/Almaty",
              "Asia/Bishkek",
              "Asia/Qyzylorda",
              "Asia/Urumqi",
              "Etc/GMT-6",
              "Indian/Chagos"
            ]
          },
          {
            "name": "Bangladesh Standard Time",
            "abbr": "BST",
            "offset": 6,
            "isdst": false,
            "text": "(UTC+06:00) Dhaka",
            "utc": [
              "Asia/Dhaka",
              "Asia/Thimphu"
            ]
          },
          {
            "name": "Myanmar Standard Time",
            "abbr": "MST",
            "offset": 6.5,
            "isdst": false,
            "text": "(UTC+06:30) Yangon (Rangoon)",
            "utc": [
              "Asia/Rangoon",
              "Indian/Cocos"
            ]
          },
          {
            "name": "SE Asia Standard Time",
            "abbr": "SAST",
            "offset": 7,
            "isdst": false,
            "text": "(UTC+07:00) Bangkok, Hanoi, Jakarta",
            "utc": [
              "Antarctica/Davis",
              "Asia/Bangkok",
              "Asia/Hovd",
              "Asia/Jakarta",
              "Asia/Phnom_Penh",
              "Asia/Pontianak",
              "Asia/Saigon",
              "Asia/Vientiane",
              "Etc/GMT-7",
              "Indian/Christmas"
            ]
          },
          {
            "name": "N. Central Asia Standard Time",
            "abbr": "NCAST",
            "offset": 7,
            "isdst": false,
            "text": "(UTC+07:00) Novosibirsk",
            "utc": [
              "Asia/Novokuznetsk",
              "Asia/Novosibirsk",
              "Asia/Omsk"
            ]
          },
          {
            "name": "China Standard Time",
            "abbr": "CST",
            "offset": 8,
            "isdst": false,
            "text": "(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
            "utc": [
              "Asia/Hong_Kong",
              "Asia/Macau",
              "Asia/Shanghai"
            ]
          },
          {
            "name": "North Asia Standard Time",
            "abbr": "NAST",
            "offset": 8,
            "isdst": false,
            "text": "(UTC+08:00) Krasnoyarsk",
            "utc": [
              "Asia/Krasnoyarsk"
            ]
          },
          {
            "name": "Singapore Standard Time",
            "abbr": "MPST",
            "offset": 8,
            "isdst": false,
            "text": "(UTC+08:00) Kuala Lumpur, Singapore",
            "utc": [
              "Asia/Brunei",
              "Asia/Kuala_Lumpur",
              "Asia/Kuching",
              "Asia/Makassar",
              "Asia/Manila",
              "Asia/Singapore",
              "Etc/GMT-8"
            ]
          },
          {
            "name": "W. Australia Standard Time",
            "abbr": "WAST",
            "offset": 8,
            "isdst": false,
            "text": "(UTC+08:00) Perth",
            "utc": [
              "Antarctica/Casey",
              "Australia/Perth"
            ]
          },
          {
            "name": "Taipei Standard Time",
            "abbr": "TST",
            "offset": 8,
            "isdst": false,
            "text": "(UTC+08:00) Taipei",
            "utc": [
              "Asia/Taipei"
            ]
          },
          {
            "name": "Ulaanbaatar Standard Time",
            "abbr": "UST",
            "offset": 8,
            "isdst": false,
            "text": "(UTC+08:00) Ulaanbaatar",
            "utc": [
              "Asia/Choibalsan",
              "Asia/Ulaanbaatar"
            ]
          },
          {
            "name": "North Asia East Standard Time",
            "abbr": "NAEST",
            "offset": 8,
            "isdst": false,
            "text": "(UTC+08:00) Irkutsk",
            "utc": [
              "Asia/Irkutsk"
            ]
          },
          {
            "name": "Japan Standard Time",
            "abbr": "JST",
            "offset": 9,
            "isdst": false,
            "text": "(UTC+09:00) Osaka, Sapporo, Tokyo",
            "utc": [
              "Asia/Dili",
              "Asia/Jayapura",
              "Asia/Tokyo",
              "Etc/GMT-9",
              "Pacific/Palau"
            ]
          },
          {
            "name": "Korea Standard Time",
            "abbr": "KST",
            "offset": 9,
            "isdst": false,
            "text": "(UTC+09:00) Seoul",
            "utc": [
              "Asia/Pyongyang",
              "Asia/Seoul"
            ]
          },
          {
            "name": "Cen. Australia Standard Time",
            "abbr": "CAST",
            "offset": 9.5,
            "isdst": false,
            "text": "(UTC+09:30) Adelaide",
            "utc": [
              "Australia/Adelaide",
              "Australia/Broken_Hill"
            ]
          },
          {
            "name": "AUS Central Standard Time",
            "abbr": "ACST",
            "offset": 9.5,
            "isdst": false,
            "text": "(UTC+09:30) Darwin",
            "utc": [
              "Australia/Darwin"
            ]
          },
          {
            "name": "E. Australia Standard Time",
            "abbr": "EAST",
            "offset": 10,
            "isdst": false,
            "text": "(UTC+10:00) Brisbane",
            "utc": [
              "Australia/Brisbane",
              "Australia/Lindeman"
            ]
          },
          {
            "name": "AUS Eastern Standard Time",
            "abbr": "AEST",
            "offset": 10,
            "isdst": false,
            "text": "(UTC+10:00) Canberra, Melbourne, Sydney",
            "utc": [
              "Australia/Melbourne",
              "Australia/Sydney"
            ]
          },
          {
            "name": "West Pacific Standard Time",
            "abbr": "WPST",
            "offset": 10,
            "isdst": false,
            "text": "(UTC+10:00) Guam, Port Moresby",
            "utc": [
              "Antarctica/DumontDUrville",
              "Etc/GMT-10",
              "Pacific/Guam",
              "Pacific/Port_Moresby",
              "Pacific/Saipan",
              "Pacific/Truk"
            ]
          },
          {
            "name": "Tasmania Standard Time",
            "abbr": "TST",
            "offset": 10,
            "isdst": false,
            "text": "(UTC+10:00) Hobart",
            "utc": [
              "Australia/Currie",
              "Australia/Hobart"
            ]
          },
          {
            "name": "Yakutsk Standard Time",
            "abbr": "YST",
            "offset": 9,
            "isdst": false,
            "text": "(UTC+09:00) Yakutsk",
            "utc": [
              "Asia/Chita",
              "Asia/Khandyga",
              "Asia/Yakutsk"
            ]
          },
          {
            "name": "Central Pacific Standard Time",
            "abbr": "CPST",
            "offset": 11,
            "isdst": false,
            "text": "(UTC+11:00) Solomon Is., New Caledonia",
            "utc": [
              "Antarctica/Macquarie",
              "Etc/GMT-11",
              "Pacific/Efate",
              "Pacific/Guadalcanal",
              "Pacific/Kosrae",
              "Pacific/Noumea",
              "Pacific/Ponape"
            ]
          },
          {
            "name": "Vladivostok Standard Time",
            "abbr": "VST",
            "offset": 11,
            "isdst": false,
            "text": "(UTC+11:00) Vladivostok",
            "utc": [
              "Asia/Sakhalin",
              "Asia/Ust-Nera",
              "Asia/Vladivostok"
            ]
          },
          {
            "name": "New Zealand Standard Time",
            "abbr": "NZST",
            "offset": 12,
            "isdst": false,
            "text": "(UTC+12:00) Auckland, Wellington",
            "utc": [
              "Antarctica/McMurdo",
              "Pacific/Auckland"
            ]
          },
          {
            "name": "UTC+12",
            "abbr": "U",
            "offset": 12,
            "isdst": false,
            "text": "(UTC+12:00) Coordinated Universal Time+12",
            "utc": [
              "Etc/GMT-12",
              "Pacific/Funafuti",
              "Pacific/Kwajalein",
              "Pacific/Majuro",
              "Pacific/Nauru",
              "Pacific/Tarawa",
              "Pacific/Wake",
              "Pacific/Wallis"
            ]
          },
          {
            "name": "Fiji Standard Time",
            "abbr": "FST",
            "offset": 12,
            "isdst": false,
            "text": "(UTC+12:00) Fiji",
            "utc": [
              "Pacific/Fiji"
            ]
          },
          {
            "name": "Magadan Standard Time",
            "abbr": "MST",
            "offset": 12,
            "isdst": false,
            "text": "(UTC+12:00) Magadan",
            "utc": [
              "Asia/Anadyr",
              "Asia/Kamchatka",
              "Asia/Magadan",
              "Asia/Srednekolymsk"
            ]
          },
          {
            "name": "Kamchatka Standard Time",
            "abbr": "KDT",
            "offset": 13,
            "isdst": true,
            "text": "(UTC+12:00) Petropavlovsk-Kamchatsky - Old",
            "utc": [
              "Asia/Kamchatka"
            ]
          },
          {
            "name": "Tonga Standard Time",
            "abbr": "TST",
            "offset": 13,
            "isdst": false,
            "text": "(UTC+13:00) Nuku'alofa",
            "utc": [
              "Etc/GMT-13",
              "Pacific/Enderbury",
              "Pacific/Fakaofo",
              "Pacific/Tongatapu"
            ]
          },
          {
            "name": "Samoa Standard Time",
            "abbr": "SST",
            "offset": 13,
            "isdst": false,
            "text": "(UTC+13:00) Samoa",
            "utc": [
              "Pacific/Apia"
            ]
          }
        ],
        //List source: http://answers.google.com/answers/threadview/id/589312.html
        profession: [
          "Airline Pilot",
          "Academic Team",
          "Accountant",
          "Account Executive",
          "Actor",
          "Actuary",
          "Acquisition Analyst",
          "Administrative Asst.",
          "Administrative Analyst",
          "Administrator",
          "Advertising Director",
          "Aerospace Engineer",
          "Agent",
          "Agricultural Inspector",
          "Agricultural Scientist",
          "Air Traffic Controller",
          "Animal Trainer",
          "Anthropologist",
          "Appraiser",
          "Architect",
          "Art Director",
          "Artist",
          "Astronomer",
          "Athletic Coach",
          "Auditor",
          "Author",
          "Baker",
          "Banker",
          "Bankruptcy Attorney",
          "Benefits Manager",
          "Biologist",
          "Bio-feedback Specialist",
          "Biomedical Engineer",
          "Biotechnical Researcher",
          "Broadcaster",
          "Broker",
          "Building Manager",
          "Building Contractor",
          "Building Inspector",
          "Business Analyst",
          "Business Planner",
          "Business Manager",
          "Buyer",
          "Call Center Manager",
          "Career Counselor",
          "Cash Manager",
          "Ceramic Engineer",
          "Chief Executive Officer",
          "Chief Operation Officer",
          "Chef",
          "Chemical Engineer",
          "Chemist",
          "Child Care Manager",
          "Chief Medical Officer",
          "Chiropractor",
          "Cinematographer",
          "City Housing Manager",
          "City Manager",
          "Civil Engineer",
          "Claims Manager",
          "Clinical Research Assistant",
          "Collections Manager",
          "Compliance Manager",
          "Comptroller",
          "Computer Manager",
          "Commercial Artist",
          "Communications Affairs Director",
          "Communications Director",
          "Communications Engineer",
          "Compensation Analyst",
          "Computer Programmer",
          "Computer Ops. Manager",
          "Computer Engineer",
          "Computer Operator",
          "Computer Graphics Specialist",
          "Construction Engineer",
          "Construction Manager",
          "Consultant",
          "Consumer Relations Manager",
          "Contract Administrator",
          "Copyright Attorney",
          "Copywriter",
          "Corporate Planner",
          "Corrections Officer",
          "Cosmetologist",
          "Credit Analyst",
          "Cruise Director",
          "Chief Information Officer",
          "Chief Technology Officer",
          "Customer Service Manager",
          "Cryptologist",
          "Dancer",
          "Data Security Manager",
          "Database Manager",
          "Day Care Instructor",
          "Dentist",
          "Designer",
          "Design Engineer",
          "Desktop Publisher",
          "Developer",
          "Development Officer",
          "Diamond Merchant",
          "Dietitian",
          "Direct Marketer",
          "Director",
          "Distribution Manager",
          "Diversity Manager",
          "Economist",
          "EEO Compliance Manager",
          "Editor",
          "Education Adminator",
          "Electrical Engineer",
          "Electro Optical Engineer",
          "Electronics Engineer",
          "Embassy Management",
          "Employment Agent",
          "Engineer Technician",
          "Entrepreneur",
          "Environmental Analyst",
          "Environmental Attorney",
          "Environmental Engineer",
          "Environmental Specialist",
          "Escrow Officer",
          "Estimator",
          "Executive Assistant",
          "Executive Director",
          "Executive Recruiter",
          "Facilities Manager",
          "Family Counselor",
          "Fashion Events Manager",
          "Fashion Merchandiser",
          "Fast Food Manager",
          "Film Producer",
          "Film Production Assistant",
          "Financial Analyst",
          "Financial Planner",
          "Financier",
          "Fine Artist",
          "Wildlife Specialist",
          "Fitness Consultant",
          "Flight Attendant",
          "Flight Engineer",
          "Floral Designer",
          "Food & Beverage Director",
          "Food Service Manager",
          "Forestry Technician",
          "Franchise Management",
          "Franchise Sales",
          "Fraud Investigator",
          "Freelance Writer",
          "Fund Raiser",
          "General Manager",
          "Geologist",
          "General Counsel",
          "Geriatric Specialist",
          "Gerontologist",
          "Glamour Photographer",
          "Golf Club Manager",
          "Gourmet Chef",
          "Graphic Designer",
          "Grounds Keeper",
          "Hazardous Waste Manager",
          "Health Care Manager",
          "Health Therapist",
          "Health Service Administrator",
          "Hearing Officer",
          "Home Economist",
          "Horticulturist",
          "Hospital Administrator",
          "Hotel Manager",
          "Human Resources Manager",
          "Importer",
          "Industrial Designer",
          "Industrial Engineer",
          "Information Director",
          "Inside Sales",
          "Insurance Adjuster",
          "Interior Decorator",
          "Internal Controls Director",
          "International Acct.",
          "International Courier",
          "International Lawyer",
          "Interpreter",
          "Investigator",
          "Investment Banker",
          "Investment Manager",
          "IT Architect",
          "IT Project Manager",
          "IT Systems Analyst",
          "Jeweler",
          "Joint Venture Manager",
          "Journalist",
          "Labor Negotiator",
          "Labor Organizer",
          "Labor Relations Manager",
          "Lab Services Director",
          "Lab Technician",
          "Land Developer",
          "Landscape Architect",
          "Law Enforcement Officer",
          "Lawyer",
          "Lead Software Engineer",
          "Lead Software Test Engineer",
          "Leasing Manager",
          "Legal Secretary",
          "Library Manager",
          "Litigation Attorney",
          "Loan Officer",
          "Lobbyist",
          "Logistics Manager",
          "Maintenance Manager",
          "Management Consultant",
          "Managed Care Director",
          "Managing Partner",
          "Manufacturing Director",
          "Manpower Planner",
          "Marine Biologist",
          "Market Res. Analyst",
          "Marketing Director",
          "Materials Manager",
          "Mathematician",
          "Membership Chairman",
          "Mechanic",
          "Mechanical Engineer",
          "Media Buyer",
          "Medical Investor",
          "Medical Secretary",
          "Medical Technician",
          "Mental Health Counselor",
          "Merchandiser",
          "Metallurgical Engineering",
          "Meteorologist",
          "Microbiologist",
          "MIS Manager",
          "Motion Picture Director",
          "Multimedia Director",
          "Musician",
          "Network Administrator",
          "Network Specialist",
          "Network Operator",
          "New Product Manager",
          "Novelist",
          "Nuclear Engineer",
          "Nuclear Specialist",
          "Nutritionist",
          "Nursing Administrator",
          "Occupational Therapist",
          "Oceanographer",
          "Office Manager",
          "Operations Manager",
          "Operations Research Director",
          "Optical Technician",
          "Optometrist",
          "Organizational Development Manager",
          "Outplacement Specialist",
          "Paralegal",
          "Park Ranger",
          "Patent Attorney",
          "Payroll Specialist",
          "Personnel Specialist",
          "Petroleum Engineer",
          "Pharmacist",
          "Photographer",
          "Physical Therapist",
          "Physician",
          "Physician Assistant",
          "Physicist",
          "Planning Director",
          "Podiatrist",
          "Political Analyst",
          "Political Scientist",
          "Politician",
          "Portfolio Manager",
          "Preschool Management",
          "Preschool Teacher",
          "Principal",
          "Private Banker",
          "Private Investigator",
          "Probation Officer",
          "Process Engineer",
          "Producer",
          "Product Manager",
          "Product Engineer",
          "Production Engineer",
          "Production Planner",
          "Professional Athlete",
          "Professional Coach",
          "Professor",
          "Project Engineer",
          "Project Manager",
          "Program Manager",
          "Property Manager",
          "Public Administrator",
          "Public Safety Director",
          "PR Specialist",
          "Publisher",
          "Purchasing Agent",
          "Publishing Director",
          "Quality Assurance Specialist",
          "Quality Control Engineer",
          "Quality Control Inspector",
          "Radiology Manager",
          "Railroad Engineer",
          "Real Estate Broker",
          "Recreational Director",
          "Recruiter",
          "Redevelopment Specialist",
          "Regulatory Affairs Manager",
          "Registered Nurse",
          "Rehabilitation Counselor",
          "Relocation Manager",
          "Reporter",
          "Research Specialist",
          "Restaurant Manager",
          "Retail Store Manager",
          "Risk Analyst",
          "Safety Engineer",
          "Sales Engineer",
          "Sales Trainer",
          "Sales Promotion Manager",
          "Sales Representative",
          "Sales Manager",
          "Service Manager",
          "Sanitation Engineer",
          "Scientific Programmer",
          "Scientific Writer",
          "Securities Analyst",
          "Security Consultant",
          "Security Director",
          "Seminar Presenter",
          "Ship's Officer",
          "Singer",
          "Social Director",
          "Social Program Planner",
          "Social Research",
          "Social Scientist",
          "Social Worker",
          "Sociologist",
          "Software Developer",
          "Software Engineer",
          "Software Test Engineer",
          "Soil Scientist",
          "Special Events Manager",
          "Special Education Teacher",
          "Special Projects Director",
          "Speech Pathologist",
          "Speech Writer",
          "Sports Event Manager",
          "Statistician",
          "Store Manager",
          "Strategic Alliance Director",
          "Strategic Planning Director",
          "Stress Reduction Specialist",
          "Stockbroker",
          "Surveyor",
          "Structural Engineer",
          "Superintendent",
          "Supply Chain Director",
          "System Engineer",
          "Systems Analyst",
          "Systems Programmer",
          "System Administrator",
          "Tax Specialist",
          "Teacher",
          "Technical Support Specialist",
          "Technical Illustrator",
          "Technical Writer",
          "Technology Director",
          "Telecom Analyst",
          "Telemarketer",
          "Theatrical Director",
          "Title Examiner",
          "Tour Escort",
          "Tour Guide Director",
          "Traffic Manager",
          "Trainer Translator",
          "Transportation Manager",
          "Travel Agent",
          "Treasurer",
          "TV Programmer",
          "Underwriter",
          "Union Representative",
          "University Administrator",
          "University Dean",
          "Urban Planner",
          "Veterinarian",
          "Vendor Relations Director",
          "Viticulturist",
          "Warehouse Manager"
        ],
        animals: {
          //list of ocean animals comes from https://owlcation.com/stem/list-of-ocean-animals
          "ocean": ["Acantharea", "Anemone", "Angelfish King", "Ahi Tuna", "Albacore", "American Oyster", "Anchovy", "Armored Snail", "Arctic Char", "Atlantic Bluefin Tuna", "Atlantic Cod", "Atlantic Goliath Grouper", "Atlantic Trumpetfish", "Atlantic Wolffish", "Baleen Whale", "Banded Butterflyfish", "Banded Coral Shrimp", "Banded Sea Krait", "Barnacle", "Barndoor Skate", "Barracuda", "Basking Shark", "Bass", "Beluga Whale", "Bluebanded Goby", "Bluehead Wrasse", "Bluefish", "Bluestreak Cleaner-Wrasse", "Blue Marlin", "Blue Shark", "Blue Spiny Lobster", "Blue Tang", "Blue Whale", "Broadclub Cuttlefish", "Bull Shark", "Chambered Nautilus", "Chilean Basket Star", "Chilean Jack Mackerel", "Chinook Salmon", "Christmas Tree Worm", "Clam", "Clown Anemonefish", "Clown Triggerfish", "Cod", "Coelacanth", "Cockscomb Cup Coral", "Common Fangtooth", "Conch", "Cookiecutter Shark", "Copepod", "Coral", "Corydoras", "Cownose Ray", "Crab", "Crown-of-Thorns Starfish", "Cushion Star", "Cuttlefish", "California Sea Otters", "Dolphin", "Dolphinfish", "Dory", "Devil Fish", "Dugong", "Dumbo Octopus", "Dungeness Crab", "Eccentric Sand Dollar", "Edible Sea Cucumber", "Eel", "Elephant Seal", "Elkhorn Coral", "Emperor Shrimp", "Estuarine Crocodile", "Fathead Sculpin", "Fiddler Crab", "Fin Whale", "Flameback", "Flamingo Tongue Snail", "Flashlight Fish", "Flatback Turtle", "Flatfish", "Flying Fish", "Flounder", "Fluke", "French Angelfish", "Frilled Shark", "Fugu (also called Pufferfish)", "Gar", "Geoduck", "Giant Barrel Sponge", "Giant Caribbean Sea Anemone", "Giant Clam", "Giant Isopod", "Giant Kingfish", "Giant Oarfish", "Giant Pacific Octopus", "Giant Pyrosome", "Giant Sea Star", "Giant Squid", "Glowing Sucker Octopus", "Giant Tube Worm", "Goblin Shark", "Goosefish", "Great White Shark", "Greenland Shark", "Grey Atlantic Seal", "Grouper", "Grunion", "Guineafowl Puffer", "Haddock", "Hake", "Halibut", "Hammerhead Shark", "Hapuka", "Harbor Porpoise", "Harbor Seal", "Hatchetfish", "Hawaiian Monk Seal", "Hawksbill Turtle", "Hector's Dolphin", "Hermit Crab", "Herring", "Hoki", "Horn Shark", "Horseshoe Crab", "Humpback Anglerfish", "Humpback Whale", "Icefish", "Imperator Angelfish", "Irukandji Jellyfish", "Isopod", "Ivory Bush Coral", "Japanese Spider Crab", "Jellyfish", "John Dory", "Juan Fernandez Fur Seal", "Killer Whale", "Kiwa Hirsuta", "Krill", "Lagoon Triggerfish", "Lamprey", "Leafy Seadragon", "Leopard Seal", "Limpet", "Ling", "Lionfish", "Lions Mane Jellyfish", "Lobe Coral", "Lobster", "Loggerhead Turtle", "Longnose Sawshark", "Longsnout Seahorse", "Lophelia Coral", "Marrus Orthocanna", "Manatee", "Manta Ray", "Marlin", "Megamouth Shark", "Mexican Lookdown", "Mimic Octopus", "Moon Jelly", "Mollusk", "Monkfish", "Moray Eel", "Mullet", "Mussel", "Megaladon", "Napoleon Wrasse", "Nassau Grouper", "Narwhal", "Nautilus", "Needlefish", "Northern Seahorse", "North Atlantic Right Whale", "Northern Red Snapper", "Norway Lobster", "Nudibranch", "Nurse Shark", "Oarfish", "Ocean Sunfish", "Oceanic Whitetip Shark", "Octopus", "Olive Sea Snake", "Orange Roughy", "Ostracod", "Otter", "Oyster", "Pacific Angelshark", "Pacific Blackdragon", "Pacific Halibut", "Pacific Sardine", "Pacific Sea Nettle Jellyfish", "Pacific White Sided Dolphin", "Pantropical Spotted Dolphin", "Patagonian Toothfish", "Peacock Mantis Shrimp", "Pelagic Thresher Shark", "Penguin", "Peruvian Anchoveta", "Pilchard", "Pink Salmon", "Pinniped", "Plankton", "Porpoise", "Polar Bear", "Portuguese Man o' War", "Pycnogonid Sea Spider", "Quahog", "Queen Angelfish", "Queen Conch", "Queen Parrotfish", "Queensland Grouper", "Ragfish", "Ratfish", "Rattail Fish", "Ray", "Red Drum", "Red King Crab", "Ringed Seal", "Risso's Dolphin", "Ross Seals", "Sablefish", "Salmon", "Sand Dollar", "Sandbar Shark", "Sawfish", "Sarcastic Fringehead", "Scalloped Hammerhead Shark", "Seahorse", "Sea Cucumber", "Sea Lion", "Sea Urchin", "Seal", "Shark", "Shortfin Mako Shark", "Shovelnose Guitarfish", "Shrimp", "Silverside Fish", "Skipjack Tuna", "Slender Snipe Eel", "Smalltooth Sawfish", "Smelts", "Sockeye Salmon", "Southern Stingray", "Sponge", "Spotted Porcupinefish", "Spotted Dolphin", "Spotted Eagle Ray", "Spotted Moray", "Squid", "Squidworm", "Starfish", "Stickleback", "Stonefish", "Stoplight Loosejaw", "Sturgeon", "Swordfish", "Tan Bristlemouth", "Tasseled Wobbegong", "Terrible Claw Lobster", "Threespot Damselfish", "Tiger Prawn", "Tiger Shark", "Tilefish", "Toadfish", "Tropical Two-Wing Flyfish", "Tuna", "Umbrella Squid", "Velvet Crab", "Venus Flytrap Sea Anemone", "Vigtorniella Worm", "Viperfish", "Vampire Squid", "Vaquita", "Wahoo", "Walrus", "West Indian Manatee", "Whale", "Whale Shark", "Whiptail Gulper", "White-Beaked Dolphin", "White-Ring Garden Eel", "White Shrimp", "Wobbegong", "Wrasse", "Wreckfish", "Xiphosura", "Yellowtail Damselfish", "Yelloweye Rockfish", "Yellow Cup Black Coral", "Yellow Tube Sponge", "Yellowfin Tuna", "Zebrashark", "Zooplankton"],
          //list of desert, grassland, and forest animals comes from http://www.skyenimals.com/
          "desert": ["Aardwolf", "Addax", "African Wild Ass", "Ant", "Antelope", "Armadillo", "Baboon", "Badger", "Bat", "Bearded Dragon", "Beetle", "Bird", "Black-footed Cat", "Boa", "Brown Bear", "Bustard", "Butterfly", "Camel", "Caracal", "Caracara", "Caterpillar", "Centipede", "Cheetah", "Chipmunk", "Chuckwalla", "Climbing Mouse", "Coati", "Cobra", "Cotton Rat", "Cougar", "Courser", "Crane Fly", "Crow", "Dassie Rat", "Dove", "Dunnart", "Eagle", "Echidna", "Elephant", "Emu", "Falcon", "Fly", "Fox", "Frogmouth", "Gecko", "Geoffroy's Cat", "Gerbil", "Grasshopper", "Guanaco", "Gundi", "Hamster", "Hawk", "Hedgehog", "Hyena", "Hyrax", "Jackal", "Kangaroo", "Kangaroo Rat", "Kestrel", "Kowari", "Kultarr", "Leopard", "Lion", "Macaw", "Meerkat", "Mouse", "Oryx", "Ostrich", "Owl", "Pronghorn", "Python", "Rabbit", "Raccoon", "Rattlesnake", "Rhinoceros", "Sand Cat", "Spectacled Bear", "Spiny Mouse", "Starling", "Stick Bug", "Tarantula", "Tit", "Toad", "Tortoise", "Tyrant Flycatcher", "Viper", "Vulture", "Waxwing", "Xerus", "Zebra"],
          "grassland": ["Aardvark", "Aardwolf", "Accentor", "African Buffalo", "African Wild Dog", "Alpaca", "Anaconda", "Ant", "Anteater", "Antelope", "Armadillo", "Baboon", "Badger", "Bandicoot", "Barbet", "Bat", "Bee", "Bee-eater", "Beetle", "Bird", "Bison", "Black-footed Cat", "Black-footed Ferret", "Bluebird", "Boa", "Bowerbird", "Brown Bear", "Bush Dog", "Bushshrike", "Bustard", "Butterfly", "Buzzard", "Caracal", "Caracara", "Cardinal", "Caterpillar", "Cheetah", "Chipmunk", "Civet", "Climbing Mouse", "Clouded Leopard", "Coati", "Cobra", "Cockatoo", "Cockroach", "Common Genet", "Cotton Rat", "Cougar", "Courser", "Coyote", "Crane", "Crane Fly", "Cricket", "Crow", "Culpeo", "Death Adder", "Deer", "Deer Mouse", "Dingo", "Dinosaur", "Dove", "Drongo", "Duck", "Duiker", "Dunnart", "Eagle", "Echidna", "Elephant", "Elk", "Emu", "Falcon", "Finch", "Flea", "Fly", "Flying Frog", "Fox", "Frog", "Frogmouth", "Garter Snake", "Gazelle", "Gecko", "Geoffroy's Cat", "Gerbil", "Giant Tortoise", "Giraffe", "Grasshopper", "Grison", "Groundhog", "Grouse", "Guanaco", "Guinea Pig", "Hamster", "Harrier", "Hartebeest", "Hawk", "Hedgehog", "Helmetshrike", "Hippopotamus", "Hornbill", "Hyena", "Hyrax", "Impala", "Jackal", "Jaguar", "Jaguarundi", "Kangaroo", "Kangaroo Rat", "Kestrel", "Kultarr", "Ladybug", "Leopard", "Lion", "Macaw", "Meerkat", "Mouse", "Newt", "Oryx", "Ostrich", "Owl", "Pangolin", "Pheasant", "Prairie Dog", "Pronghorn", "Przewalski's Horse", "Python", "Quoll", "Rabbit", "Raven", "Rhinoceros", "Shelduck", "Sloth Bear", "Spectacled Bear", "Squirrel", "Starling", "Stick Bug", "Tamandua", "Tasmanian Devil", "Thornbill", "Thrush", "Toad", "Tortoise"],
          "forest": ["Agouti", "Anaconda", "Anoa", "Ant", "Anteater", "Antelope", "Armadillo", "Asian Black Bear", "Aye-aye", "Babirusa", "Baboon", "Badger", "Bandicoot", "Banteng", "Barbet", "Basilisk", "Bat", "Bearded Dragon", "Bee", "Bee-eater", "Beetle", "Bettong", "Binturong", "Bird-of-paradise", "Bongo", "Bowerbird", "Bulbul", "Bush Dog", "Bushbaby", "Bushshrike", "Butterfly", "Buzzard", "Caecilian", "Cardinal", "Cassowary", "Caterpillar", "Centipede", "Chameleon", "Chimpanzee", "Cicada", "Civet", "Clouded Leopard", "Coati", "Cobra", "Cockatoo", "Cockroach", "Colugo", "Cotinga", "Cotton Rat", "Cougar", "Crane Fly", "Cricket", "Crocodile", "Crow", "Cuckoo", "Cuscus", "Death Adder", "Deer", "Dhole", "Dingo", "Dinosaur", "Drongo", "Duck", "Duiker", "Eagle", "Echidna", "Elephant", "Finch", "Flat-headed Cat", "Flea", "Flowerpecker", "Fly", "Flying Frog", "Fossa", "Frog", "Frogmouth", "Gaur", "Gecko", "Gorilla", "Grison", "Hawaiian Honeycreeper", "Hawk", "Hedgehog", "Helmetshrike", "Hornbill", "Hyrax", "Iguana", "Jackal", "Jaguar", "Jaguarundi", "Kestrel", "Ladybug", "Lemur", "Leopard", "Lion", "Macaw", "Mandrill", "Margay", "Monkey", "Mouse", "Mouse Deer", "Newt", "Okapi", "Old World Flycatcher", "Orangutan", "Owl", "Pangolin", "Peafowl", "Pheasant", "Possum", "Python", "Quokka", "Rabbit", "Raccoon", "Red Panda", "Red River Hog", "Rhinoceros", "Sloth Bear", "Spectacled Bear", "Squirrel", "Starling", "Stick Bug", "Sun Bear", "Tamandua", "Tamarin", "Tapir", "Tarantula", "Thrush", "Tiger", "Tit", "Toad", "Tortoise", "Toucan", "Trogon", "Trumpeter", "Turaco", "Turtle", "Tyrant Flycatcher", "Viper", "Vulture", "Wallaby", "Warbler", "Wasp", "Waxwing", "Weaver", "Weaver-finch", "Whistler", "White-eye", "Whydah", "Woodswallow", "Worm", "Wren", "Xenops", "Yellowjacket", "Accentor", "African Buffalo", "American Black Bear", "Anole", "Bird", "Bison", "Boa", "Brown Bear", "Chipmunk", "Common Genet", "Copperhead", "Coyote", "Deer Mouse", "Dormouse", "Elk", "Emu", "Fisher", "Fox", "Garter Snake", "Giant Panda", "Giant Tortoise", "Groundhog", "Grouse", "Guanaco", "Himalayan Tahr", "Kangaroo", "Koala", "Numbat", "Quoll", "Raccoon dog", "Tasmanian Devil", "Thornbill", "Turkey", "Vole", "Weasel", "Wildcat", "Wolf", "Wombat", "Woodchuck", "Woodpecker"],
          //list of farm animals comes from https://www.buzzle.com/articles/farm-animals-list.html
          "farm": ["Alpaca", "Buffalo", "Banteng", "Cow", "Cat", "Chicken", "Carp", "Camel", "Donkey", "Dog", "Duck", "Emu", "Goat", "Gayal", "Guinea", "Goose", "Horse", "Honey", "Llama", "Pig", "Pigeon", "Rhea", "Rabbit", "Sheep", "Silkworm", "Turkey", "Yak", "Zebu"],
          //list of pet animals comes from https://www.dogbreedinfo.com/pets/pet.htm
          "pet": ["Bearded Dragon", "Birds", "Burro", "Cats", "Chameleons", "Chickens", "Chinchillas", "Chinese Water Dragon", "Cows", "Dogs", "Donkey", "Ducks", "Ferrets", "Fish", "Geckos", "Geese", "Gerbils", "Goats", "Guinea Fowl", "Guinea Pigs", "Hamsters", "Hedgehogs", "Horses", "Iguanas", "Llamas", "Lizards", "Mice", "Mule", "Peafowl", "Pigs and Hogs", "Pigeons", "Ponies", "Pot Bellied Pig", "Rabbits", "Rats", "Sheep", "Skinks", "Snakes", "Stick Insects", "Sugar Gliders", "Tarantula", "Turkeys", "Turtles"],
          //list of zoo animals comes from https://bronxzoo.com/animals
          "zoo": ["Aardvark", "African Wild Dog", "Aldabra Tortoise", "American Alligator", "American Bison", "Amur Tiger", "Anaconda", "Andean Condor", "Asian Elephant", "Baby Doll Sheep", "Bald Eagle", "Barred Owl", "Blue Iguana", "Boer Goat", "California Sea Lion", "Caribbean Flamingo", "Chinchilla", "Collared Lemur", "Coquerel's Sifaka", "Cuban Amazon Parrot", "Ebony Langur", "Fennec Fox", "Fossa", "Gelada", "Giant Anteater", "Giraffe", "Gorilla", "Grizzly Bear", "Henkel's Leaf-tailed Gecko", "Indian Gharial", "Indian Rhinoceros", "King Cobra", "King Vulture", "Komodo Dragon", "Linne's Two-toed Sloth", "Lion", "Little Penguin", "Madagascar Tree Boa", "Magellanic Penguin", "Malayan Tapir", "Malayan Tiger", "Matschies Tree Kangaroo", "Mini Donkey", "Monarch Butterfly", "Nile crocodile", "North American Porcupine", "Nubian Ibex", "Okapi", "Poison Dart Frog", "Polar Bear", "Pygmy Marmoset", "Radiated Tortoise", "Red Panda", "Red Ruffed Lemur", "Ring-tailed Lemur", "Ring-tailed Mongoose", "Rock Hyrax", "Small Clawed Asian Otter", "Snow Leopard", "Snowy Owl", "Southern White-faced Owl", "Southern White Rhinocerous", "Squirrel Monkey", "Tufted Puffin", "White Cheeked Gibbon", "White-throated Bee Eater", "Zebra"]
        },
        primes: [
          // 1230 first primes, i.e. all primes up to the first one greater than 10000, inclusive.
          2,
          3,
          5,
          7,
          11,
          13,
          17,
          19,
          23,
          29,
          31,
          37,
          41,
          43,
          47,
          53,
          59,
          61,
          67,
          71,
          73,
          79,
          83,
          89,
          97,
          101,
          103,
          107,
          109,
          113,
          127,
          131,
          137,
          139,
          149,
          151,
          157,
          163,
          167,
          173,
          179,
          181,
          191,
          193,
          197,
          199,
          211,
          223,
          227,
          229,
          233,
          239,
          241,
          251,
          257,
          263,
          269,
          271,
          277,
          281,
          283,
          293,
          307,
          311,
          313,
          317,
          331,
          337,
          347,
          349,
          353,
          359,
          367,
          373,
          379,
          383,
          389,
          397,
          401,
          409,
          419,
          421,
          431,
          433,
          439,
          443,
          449,
          457,
          461,
          463,
          467,
          479,
          487,
          491,
          499,
          503,
          509,
          521,
          523,
          541,
          547,
          557,
          563,
          569,
          571,
          577,
          587,
          593,
          599,
          601,
          607,
          613,
          617,
          619,
          631,
          641,
          643,
          647,
          653,
          659,
          661,
          673,
          677,
          683,
          691,
          701,
          709,
          719,
          727,
          733,
          739,
          743,
          751,
          757,
          761,
          769,
          773,
          787,
          797,
          809,
          811,
          821,
          823,
          827,
          829,
          839,
          853,
          857,
          859,
          863,
          877,
          881,
          883,
          887,
          907,
          911,
          919,
          929,
          937,
          941,
          947,
          953,
          967,
          971,
          977,
          983,
          991,
          997,
          1009,
          1013,
          1019,
          1021,
          1031,
          1033,
          1039,
          1049,
          1051,
          1061,
          1063,
          1069,
          1087,
          1091,
          1093,
          1097,
          1103,
          1109,
          1117,
          1123,
          1129,
          1151,
          1153,
          1163,
          1171,
          1181,
          1187,
          1193,
          1201,
          1213,
          1217,
          1223,
          1229,
          1231,
          1237,
          1249,
          1259,
          1277,
          1279,
          1283,
          1289,
          1291,
          1297,
          1301,
          1303,
          1307,
          1319,
          1321,
          1327,
          1361,
          1367,
          1373,
          1381,
          1399,
          1409,
          1423,
          1427,
          1429,
          1433,
          1439,
          1447,
          1451,
          1453,
          1459,
          1471,
          1481,
          1483,
          1487,
          1489,
          1493,
          1499,
          1511,
          1523,
          1531,
          1543,
          1549,
          1553,
          1559,
          1567,
          1571,
          1579,
          1583,
          1597,
          1601,
          1607,
          1609,
          1613,
          1619,
          1621,
          1627,
          1637,
          1657,
          1663,
          1667,
          1669,
          1693,
          1697,
          1699,
          1709,
          1721,
          1723,
          1733,
          1741,
          1747,
          1753,
          1759,
          1777,
          1783,
          1787,
          1789,
          1801,
          1811,
          1823,
          1831,
          1847,
          1861,
          1867,
          1871,
          1873,
          1877,
          1879,
          1889,
          1901,
          1907,
          1913,
          1931,
          1933,
          1949,
          1951,
          1973,
          1979,
          1987,
          1993,
          1997,
          1999,
          2003,
          2011,
          2017,
          2027,
          2029,
          2039,
          2053,
          2063,
          2069,
          2081,
          2083,
          2087,
          2089,
          2099,
          2111,
          2113,
          2129,
          2131,
          2137,
          2141,
          2143,
          2153,
          2161,
          2179,
          2203,
          2207,
          2213,
          2221,
          2237,
          2239,
          2243,
          2251,
          2267,
          2269,
          2273,
          2281,
          2287,
          2293,
          2297,
          2309,
          2311,
          2333,
          2339,
          2341,
          2347,
          2351,
          2357,
          2371,
          2377,
          2381,
          2383,
          2389,
          2393,
          2399,
          2411,
          2417,
          2423,
          2437,
          2441,
          2447,
          2459,
          2467,
          2473,
          2477,
          2503,
          2521,
          2531,
          2539,
          2543,
          2549,
          2551,
          2557,
          2579,
          2591,
          2593,
          2609,
          2617,
          2621,
          2633,
          2647,
          2657,
          2659,
          2663,
          2671,
          2677,
          2683,
          2687,
          2689,
          2693,
          2699,
          2707,
          2711,
          2713,
          2719,
          2729,
          2731,
          2741,
          2749,
          2753,
          2767,
          2777,
          2789,
          2791,
          2797,
          2801,
          2803,
          2819,
          2833,
          2837,
          2843,
          2851,
          2857,
          2861,
          2879,
          2887,
          2897,
          2903,
          2909,
          2917,
          2927,
          2939,
          2953,
          2957,
          2963,
          2969,
          2971,
          2999,
          3001,
          3011,
          3019,
          3023,
          3037,
          3041,
          3049,
          3061,
          3067,
          3079,
          3083,
          3089,
          3109,
          3119,
          3121,
          3137,
          3163,
          3167,
          3169,
          3181,
          3187,
          3191,
          3203,
          3209,
          3217,
          3221,
          3229,
          3251,
          3253,
          3257,
          3259,
          3271,
          3299,
          3301,
          3307,
          3313,
          3319,
          3323,
          3329,
          3331,
          3343,
          3347,
          3359,
          3361,
          3371,
          3373,
          3389,
          3391,
          3407,
          3413,
          3433,
          3449,
          3457,
          3461,
          3463,
          3467,
          3469,
          3491,
          3499,
          3511,
          3517,
          3527,
          3529,
          3533,
          3539,
          3541,
          3547,
          3557,
          3559,
          3571,
          3581,
          3583,
          3593,
          3607,
          3613,
          3617,
          3623,
          3631,
          3637,
          3643,
          3659,
          3671,
          3673,
          3677,
          3691,
          3697,
          3701,
          3709,
          3719,
          3727,
          3733,
          3739,
          3761,
          3767,
          3769,
          3779,
          3793,
          3797,
          3803,
          3821,
          3823,
          3833,
          3847,
          3851,
          3853,
          3863,
          3877,
          3881,
          3889,
          3907,
          3911,
          3917,
          3919,
          3923,
          3929,
          3931,
          3943,
          3947,
          3967,
          3989,
          4001,
          4003,
          4007,
          4013,
          4019,
          4021,
          4027,
          4049,
          4051,
          4057,
          4073,
          4079,
          4091,
          4093,
          4099,
          4111,
          4127,
          4129,
          4133,
          4139,
          4153,
          4157,
          4159,
          4177,
          4201,
          4211,
          4217,
          4219,
          4229,
          4231,
          4241,
          4243,
          4253,
          4259,
          4261,
          4271,
          4273,
          4283,
          4289,
          4297,
          4327,
          4337,
          4339,
          4349,
          4357,
          4363,
          4373,
          4391,
          4397,
          4409,
          4421,
          4423,
          4441,
          4447,
          4451,
          4457,
          4463,
          4481,
          4483,
          4493,
          4507,
          4513,
          4517,
          4519,
          4523,
          4547,
          4549,
          4561,
          4567,
          4583,
          4591,
          4597,
          4603,
          4621,
          4637,
          4639,
          4643,
          4649,
          4651,
          4657,
          4663,
          4673,
          4679,
          4691,
          4703,
          4721,
          4723,
          4729,
          4733,
          4751,
          4759,
          4783,
          4787,
          4789,
          4793,
          4799,
          4801,
          4813,
          4817,
          4831,
          4861,
          4871,
          4877,
          4889,
          4903,
          4909,
          4919,
          4931,
          4933,
          4937,
          4943,
          4951,
          4957,
          4967,
          4969,
          4973,
          4987,
          4993,
          4999,
          5003,
          5009,
          5011,
          5021,
          5023,
          5039,
          5051,
          5059,
          5077,
          5081,
          5087,
          5099,
          5101,
          5107,
          5113,
          5119,
          5147,
          5153,
          5167,
          5171,
          5179,
          5189,
          5197,
          5209,
          5227,
          5231,
          5233,
          5237,
          5261,
          5273,
          5279,
          5281,
          5297,
          5303,
          5309,
          5323,
          5333,
          5347,
          5351,
          5381,
          5387,
          5393,
          5399,
          5407,
          5413,
          5417,
          5419,
          5431,
          5437,
          5441,
          5443,
          5449,
          5471,
          5477,
          5479,
          5483,
          5501,
          5503,
          5507,
          5519,
          5521,
          5527,
          5531,
          5557,
          5563,
          5569,
          5573,
          5581,
          5591,
          5623,
          5639,
          5641,
          5647,
          5651,
          5653,
          5657,
          5659,
          5669,
          5683,
          5689,
          5693,
          5701,
          5711,
          5717,
          5737,
          5741,
          5743,
          5749,
          5779,
          5783,
          5791,
          5801,
          5807,
          5813,
          5821,
          5827,
          5839,
          5843,
          5849,
          5851,
          5857,
          5861,
          5867,
          5869,
          5879,
          5881,
          5897,
          5903,
          5923,
          5927,
          5939,
          5953,
          5981,
          5987,
          6007,
          6011,
          6029,
          6037,
          6043,
          6047,
          6053,
          6067,
          6073,
          6079,
          6089,
          6091,
          6101,
          6113,
          6121,
          6131,
          6133,
          6143,
          6151,
          6163,
          6173,
          6197,
          6199,
          6203,
          6211,
          6217,
          6221,
          6229,
          6247,
          6257,
          6263,
          6269,
          6271,
          6277,
          6287,
          6299,
          6301,
          6311,
          6317,
          6323,
          6329,
          6337,
          6343,
          6353,
          6359,
          6361,
          6367,
          6373,
          6379,
          6389,
          6397,
          6421,
          6427,
          6449,
          6451,
          6469,
          6473,
          6481,
          6491,
          6521,
          6529,
          6547,
          6551,
          6553,
          6563,
          6569,
          6571,
          6577,
          6581,
          6599,
          6607,
          6619,
          6637,
          6653,
          6659,
          6661,
          6673,
          6679,
          6689,
          6691,
          6701,
          6703,
          6709,
          6719,
          6733,
          6737,
          6761,
          6763,
          6779,
          6781,
          6791,
          6793,
          6803,
          6823,
          6827,
          6829,
          6833,
          6841,
          6857,
          6863,
          6869,
          6871,
          6883,
          6899,
          6907,
          6911,
          6917,
          6947,
          6949,
          6959,
          6961,
          6967,
          6971,
          6977,
          6983,
          6991,
          6997,
          7001,
          7013,
          7019,
          7027,
          7039,
          7043,
          7057,
          7069,
          7079,
          7103,
          7109,
          7121,
          7127,
          7129,
          7151,
          7159,
          7177,
          7187,
          7193,
          7207,
          7211,
          7213,
          7219,
          7229,
          7237,
          7243,
          7247,
          7253,
          7283,
          7297,
          7307,
          7309,
          7321,
          7331,
          7333,
          7349,
          7351,
          7369,
          7393,
          7411,
          7417,
          7433,
          7451,
          7457,
          7459,
          7477,
          7481,
          7487,
          7489,
          7499,
          7507,
          7517,
          7523,
          7529,
          7537,
          7541,
          7547,
          7549,
          7559,
          7561,
          7573,
          7577,
          7583,
          7589,
          7591,
          7603,
          7607,
          7621,
          7639,
          7643,
          7649,
          7669,
          7673,
          7681,
          7687,
          7691,
          7699,
          7703,
          7717,
          7723,
          7727,
          7741,
          7753,
          7757,
          7759,
          7789,
          7793,
          7817,
          7823,
          7829,
          7841,
          7853,
          7867,
          7873,
          7877,
          7879,
          7883,
          7901,
          7907,
          7919,
          7927,
          7933,
          7937,
          7949,
          7951,
          7963,
          7993,
          8009,
          8011,
          8017,
          8039,
          8053,
          8059,
          8069,
          8081,
          8087,
          8089,
          8093,
          8101,
          8111,
          8117,
          8123,
          8147,
          8161,
          8167,
          8171,
          8179,
          8191,
          8209,
          8219,
          8221,
          8231,
          8233,
          8237,
          8243,
          8263,
          8269,
          8273,
          8287,
          8291,
          8293,
          8297,
          8311,
          8317,
          8329,
          8353,
          8363,
          8369,
          8377,
          8387,
          8389,
          8419,
          8423,
          8429,
          8431,
          8443,
          8447,
          8461,
          8467,
          8501,
          8513,
          8521,
          8527,
          8537,
          8539,
          8543,
          8563,
          8573,
          8581,
          8597,
          8599,
          8609,
          8623,
          8627,
          8629,
          8641,
          8647,
          8663,
          8669,
          8677,
          8681,
          8689,
          8693,
          8699,
          8707,
          8713,
          8719,
          8731,
          8737,
          8741,
          8747,
          8753,
          8761,
          8779,
          8783,
          8803,
          8807,
          8819,
          8821,
          8831,
          8837,
          8839,
          8849,
          8861,
          8863,
          8867,
          8887,
          8893,
          8923,
          8929,
          8933,
          8941,
          8951,
          8963,
          8969,
          8971,
          8999,
          9001,
          9007,
          9011,
          9013,
          9029,
          9041,
          9043,
          9049,
          9059,
          9067,
          9091,
          9103,
          9109,
          9127,
          9133,
          9137,
          9151,
          9157,
          9161,
          9173,
          9181,
          9187,
          9199,
          9203,
          9209,
          9221,
          9227,
          9239,
          9241,
          9257,
          9277,
          9281,
          9283,
          9293,
          9311,
          9319,
          9323,
          9337,
          9341,
          9343,
          9349,
          9371,
          9377,
          9391,
          9397,
          9403,
          9413,
          9419,
          9421,
          9431,
          9433,
          9437,
          9439,
          9461,
          9463,
          9467,
          9473,
          9479,
          9491,
          9497,
          9511,
          9521,
          9533,
          9539,
          9547,
          9551,
          9587,
          9601,
          9613,
          9619,
          9623,
          9629,
          9631,
          9643,
          9649,
          9661,
          9677,
          9679,
          9689,
          9697,
          9719,
          9721,
          9733,
          9739,
          9743,
          9749,
          9767,
          9769,
          9781,
          9787,
          9791,
          9803,
          9811,
          9817,
          9829,
          9833,
          9839,
          9851,
          9857,
          9859,
          9871,
          9883,
          9887,
          9901,
          9907,
          9923,
          9929,
          9931,
          9941,
          9949,
          9967,
          9973,
          10007
        ],
        emotions: [
          "love",
          "joy",
          "surprise",
          "anger",
          "sadness",
          "fear"
        ],
        music_genres: {
          "general": [
            "Rock",
            "Pop",
            "Hip-Hop",
            "Jazz",
            "Classical",
            "Electronic",
            "Country",
            "R&B",
            "Reggae",
            "Blues",
            "Metal",
            "Folk",
            "Alternative",
            "Punk",
            "Disco",
            "Funk",
            "Techno",
            "Indie",
            "Gospel",
            "Dance",
            "Children's",
            "World"
          ],
          "alternative": [
            "Art Punk",
            "Alternative Rock",
            "Britpunk",
            "College Rock",
            "Crossover Thrash",
            "Crust Punk",
            "Emo / Emocore",
            "Experimental Rock",
            "Folk Punk",
            "Goth / Gothic Rock",
            "Grunge",
            "Hardcore Punk",
            "Hard Rock",
            "Indie Rock",
            "Lo-fi",
            "Musique Concrète",
            "New Wave",
            "Progressive Rock",
            "Punk",
            "Shoegaze",
            "Steampunk"
          ],
          "blues": [
            "Acoustic Blues",
            "African Blues",
            "Blues Rock",
            "Blues Shouter",
            "British Blues",
            "Canadian Blues",
            "Chicago Blues",
            "Classic Blues",
            "Classic Female Blues",
            "Contemporary Blues",
            "Country Blues",
            "Dark Blues",
            "Delta Blues",
            "Detroit Blues",
            "Doom Blues",
            "Electric Blues",
            "Folk Blues",
            "Gospel Blues",
            "Harmonica Blues",
            "Hill Country Blues",
            "Hokum Blues",
            "Jazz Blues",
            "Jump Blues",
            "Kansas City Blues",
            "Louisiana Blues",
            "Memphis Blues",
            "Modern Blues",
            "New Orlean Blues",
            "NY Blues",
            "Piano Blues",
            "Piedmont Blues",
            "Punk Blues",
            "Ragtime Blues",
            "Rhythm Blues",
            "Soul Blues",
            "St.Louis Blues",
            "Soul Blues",
            "Swamp Blues",
            "Texas Blues",
            "Urban Blues",
            "Vandeville",
            "West Coast Blues"
          ],
          "children's": [
            "Lullabies",
            "Sing - Along",
            "Stories"
          ],
          "classical": [
            "Avant-Garde",
            "Ballet",
            "Baroque",
            "Cantata",
            "Chamber Music",
            "String Quartet",
            "Chant",
            "Choral",
            "Classical Crossover",
            "Concerto",
            "Concerto Grosso",
            "Contemporary Classical",
            "Early Music",
            "Expressionist",
            "High Classical",
            "Impressionist",
            "Mass Requiem",
            "Medieval",
            "Minimalism",
            "Modern Composition",
            "Modern Classical",
            "Opera",
            "Oratorio",
            "Orchestral",
            "Organum",
            "Renaissance",
            "Romantic (early period)",
            "Romantic (later period)",
            "Sonata",
            "Symphonic",
            "Symphony",
            "Twelve-tone",
            "Wedding Music"
          ],
          "country": [
            "Alternative Country",
            "Americana",
            "Australian Country",
            "Bakersfield Sound",
            "Bluegrass",
            "Blues Country",
            "Cajun Fiddle Tunes",
            "Christian Country",
            "Classic Country",
            "Close Harmony",
            "Contemporary Bluegrass",
            "Contemporary Country",
            "Country Gospel",
            "Country Pop",
            "Country Rap",
            "Country Rock",
            "Country Soul",
            "Cowboy / Western",
            "Cowpunk",
            "Dansband",
            "Honky Tonk",
            "Franco-Country",
            "Gulf and Western",
            "Hellbilly Music",
            "Honky Tonk",
            "Instrumental Country",
            "Lubbock Sound",
            "Nashville Sound",
            "Neotraditional Country",
            "Outlaw Country",
            "Progressive",
            "Psychobilly / Punkabilly",
            "Red Dirt",
            "Sertanejo",
            "Texas County",
            "Traditional Bluegrass",
            "Traditional Country",
            "Truck-Driving Country",
            "Urban Cowboy",
            "Western Swing"
          ],
          "dance": [
            "Club / Club Dance",
            "Breakcore",
            "Breakbeat / Breakstep",
            "Chillstep",
            "Deep House",
            "Dubstep",
            "Dancehall",
            "Electro House",
            "Electroswing",
            "Exercise",
            "Future Garage",
            "Garage",
            "Glitch Hop",
            "Glitch Pop",
            "Grime",
            "Hardcore",
            "Hard Dance",
            "Hi-NRG / Eurodance",
            "Horrorcore",
            "House",
            "Jackin House",
            "Jungle / Drum n bass",
            "Liquid Dub",
            "Regstep",
            "Speedcore",
            "Techno",
            "Trance",
            "Trap"
          ],
          electronic: [
            "2-Step",
            "8bit",
            "Ambient",
            "Asian Underground",
            "Bassline",
            "Chillwave",
            "Chiptune",
            "Crunk",
            "Downtempo",
            "Drum & Bass",
            "Hard Step",
            "Electro",
            "Electro-swing",
            "Electroacoustic",
            "Electronica",
            "Electronic Rock",
            "Eurodance",
            "Hardstyle",
            "Hi-Nrg",
            "IDM/Experimental",
            "Industrial",
            "Trip Hop",
            "Vaporwave",
            "UK Garage",
            "House",
            "Dubstep",
            "Deep House",
            "EDM",
            "Future Bass",
            "Psychedelic trance"
          ],
          "jazz": [
            "Acid Jazz",
            "Afro-Cuban Jazz",
            "Avant-Garde Jazz",
            "Bebop",
            "Big Band",
            "Blue Note",
            "British Dance Band (Jazz)",
            "Cape Jazz",
            "Chamber Jazz",
            "Contemporary Jazz",
            "Continental Jazz",
            "Cool Jazz",
            "Crossover Jazz",
            "Dark Jazz",
            "Dixieland",
            "Early Jazz",
            "Electro Swing (Jazz)",
            "Ethio-jazz",
            "Ethno-Jazz",
            "European Free Jazz",
            "Free Funk (Avant-Garde / Funk Jazz)",
            "Free Jazz",
            "Fusion",
            "Gypsy Jazz",
            "Hard Bop",
            "Indo Jazz",
            "Jazz Blues",
            "Jazz-Funk (see Free Funk)",
            "Jazz-Fusion",
            "Jazz Rap",
            "Jazz Rock",
            "Kansas City Jazz",
            "Latin Jazz",
            "M-Base Jazz",
            "Mainstream Jazz",
            "Modal Jazz",
            "Neo-Bop",
            "Neo-Swing",
            "Nu Jazz",
            "Orchestral Jazz",
            "Post-Bop",
            "Punk Jazz",
            "Ragtime",
            "Ska Jazz",
            "Skiffle (also Folk)",
            "Smooth Jazz",
            "Soul Jazz",
            "Swing Jazz",
            "Straight-Ahead Jazz",
            "Trad Jazz",
            "Third Stream",
            "Jazz-Funk",
            "Free Jazz",
            "West Coast Jazz"
          ],
          "metal": [
            "Heavy Metal",
            "Speed Metal",
            "Thrash Metal",
            "Power Metal",
            "Death Metal",
            "Black Metal",
            "Pagan Metal",
            "Viking Metal",
            "Folk Metal",
            "Symphonic Metal",
            "Gothic Metal",
            "Glam Metal",
            "Hair Metal",
            "Doom Metal",
            "Groove Metal",
            "Industrial Metal",
            "Modern Metal",
            "Neoclassical Metal",
            "New Wave Of British Heavy Metal",
            "Post Metal",
            "Progressive Metal",
            "Avantgarde Metal",
            "Sludge",
            "Djent",
            "Drone",
            "Kawaii Metal",
            "Pirate Metal",
            "Nu Metal",
            "Neue Deutsche Härte",
            "Math Metal",
            "Crossover",
            "Grindcore",
            "Hardcore",
            "Metalcore",
            "Deathcore",
            "Post Hardcore",
            "Mathcore"
          ],
          "folk": [
            "American Folk Revival",
            "Anti - Folk",
            "British Folk Revival",
            "Contemporary Folk",
            "Filk Music",
            "Freak Folk",
            "Indie Folk",
            "Industrial Folk",
            "Neofolk",
            "Progressive Folk",
            "Psychedelic Folk",
            "Sung Poetry",
            "Techno - Folk",
            "Folk Rock",
            "Old-time Music",
            "Bluegrass",
            "Appalachian",
            "Roots Revival",
            "Celtic",
            "Indie Folk"
          ],
          "pop": [
            "Adult Contemporary",
            "Arab Pop",
            "Baroque",
            "Britpop",
            "Bubblegum Pop",
            "Chamber Pop",
            "Chanson",
            "Christian Pop",
            "Classical Crossover",
            "Europop",
            "Austropop",
            "Balkan Pop",
            "French Pop",
            "Korean Pop",
            "Japanese Pop",
            "Chinese Pop",
            "Latin Pop",
            "Laïkó",
            "Nederpop",
            "Russian Pop",
            "Dance Pop",
            "Dream Pop",
            "Electro Pop",
            "Iranian Pop",
            "Jangle Pop",
            "Latin Ballad",
            "Levenslied",
            "Louisiana Swamp Pop",
            "Mexican Pop",
            "Motorpop",
            "New Romanticism",
            "Orchestral Pop",
            "Pop Rap",
            "Popera",
            "Pop / Rock",
            "Pop Punk",
            "Power Pop",
            "Psychedelic Pop",
            "Russian Pop",
            "Schlager",
            "Soft Rock",
            "Sophisti - Pop",
            "Space Age Pop",
            "Sunshine Pop",
            "Surf Pop",
            "Synthpop",
            "Teen Pop",
            "Traditional Pop Music",
            "Turkish Pop",
            "Vispop",
            "Wonky Pop"
          ],
          "r&b": [
            "(Carolina) Beach Music",
            "Contemporary R & B",
            "Disco",
            "Doo Wop",
            "Funk",
            "Modern Soul",
            "Motown",
            "Neo - Soul",
            "Northern Soul",
            "Psychedelic Soul",
            "Quiet Storm",
            "Soul",
            "Soul Blues",
            "Southern Soul"
          ],
          "reggae": [
            "2 - Tone",
            "Dub",
            "Roots Reggae",
            "Reggae Fusion",
            "Reggae en Español",
            "Spanish Reggae",
            "Reggae 110",
            "Reggae Bultrón",
            "Romantic Flow",
            "Lovers Rock",
            "Raggamuffin",
            "Ragga",
            "Dancehall",
            "Ska"
          ],
          "rock": [
            "Acid Rock",
            "Adult - Oriented Rock",
            "Afro Punk",
            "Adult Alternative",
            "Alternative Rock",
            "American Traditional Rock",
            "Anatolian Rock",
            "Arena Rock",
            "Art Rock",
            "Blues - Rock",
            "British Invasion",
            "Cock Rock",
            "Death Metal / Black Metal",
            "Doom Metal",
            "Glam Rock",
            "Gothic Metal",
            "Grind Core",
            "Hair Metal",
            "Hard Rock",
            "Math Metal",
            "Math Rock",
            "Metal",
            "Metal Core",
            "Noise Rock",
            "Jam Bands",
            "Post Punk",
            "Post Rock",
            "Prog - Rock / Art Rock",
            "Progressive Metal",
            "Psychedelic",
            "Rock & Roll",
            "Rockabilly",
            "Roots Rock",
            "Singer / Songwriter",
            "Southern Rock",
            "Spazzcore",
            "Stoner Metal",
            "Surf",
            "Technical Death Metal",
            "Tex - Mex",
            "Thrash Metal",
            "Time Lord Rock(Trock)",
            "Trip - hop",
            "Yacht Rock",
            "School House Rock"
          ],
          "hip-hop": [
            "Alternative Rap",
            "Avant - Garde",
            "Bounce",
            "Chap Hop",
            "Christian Hip Hop",
            "Conscious Hip Hop",
            "Country - Rap",
            "Grunk",
            "Crunkcore",
            "Cumbia Rap",
            "Dirty South",
            "East Coast",
            "Brick City Club",
            "Hardcore Hip Hop",
            "Mafioso Rap",
            "New Jersey Hip Hop",
            "Freestyle Rap",
            "G - Funk",
            "Gangsta Rap",
            "Golden Age",
            "Grime",
            "Hardcore Rap",
            "Hip - Hop",
            "Hip Pop",
            "Horrorcore",
            "Hyphy",
            "Industrial Hip Hop",
            "Instrumental Hip Hop",
            "Jazz Rap",
            "Latin Rap",
            "Low Bap",
            "Lyrical Hip Hop",
            "Merenrap",
            "Midwest Hip Hop",
            "Chicago Hip Hop",
            "Detroit Hip Hop",
            "Horrorcore",
            "St.Louis Hip Hop",
            "Twin Cities Hip Hop",
            "Motswako",
            "Nerdcore",
            "New Jack Swing",
            "New School Hip Hop",
            "Old School Rap",
            "Rap",
            "Trap",
            "Turntablism",
            "Underground Rap",
            "West Coast Rap",
            "East Coast Rap",
            "Trap",
            "UK Grime",
            "Hyphy",
            "Emo-rap",
            "Cloud rap",
            "G-funk",
            "Boom Bap",
            "Mumble",
            "Drill",
            "UK Drill",
            "Soundcloud Rap",
            "Lo-fi"
          ],
          "punk": [
            "Afro-punk",
            "Anarcho punk",
            "Art punk",
            "Christian punk",
            "Crust punk",
            "Deathrock",
            "Egg punk",
            "Garage punk",
            "Glam punk",
            "Hardcore punk",
            "Horror punk",
            "Incelcore/e-punk",
            "Oi!",
            "Peace punk",
            "Punk pathetique",
            "Queercore",
            "Riot Grrrl",
            "Skate punk",
            "Street punk",
            "Taqwacore",
            "Trallpunk"
          ],
          "disco": [
            "Nu-disco",
            "Disco-funk",
            "Hi-NRG",
            "Italo Disco",
            "Eurodisco",
            "Boogie",
            "Space Disco",
            "Post-disco",
            "Electro Disco",
            "Disco House",
            "Disco Pop",
            "Soulful House"
          ],
          "funk": [
            "Funk Rock",
            "P-Funk (Parliament-Funkadelic)",
            "Psychedelic Funk",
            "Funk Metal",
            "Electro-Funk",
            "Go-go",
            "Boogie-Funk",
            "Jazz-Funk",
            "Soul-Funk",
            "Funky Disco",
            "Nu-Funk",
            "Afrobeat",
            "Latin Funk",
            "G-Funk",
            "Acid Jazz",
            "Funktronica",
            "Folk-Funk",
            "Space Funk",
            "Ambient Funk",
            "Hard Funk",
            "Fusion Funk"
          ],
          "techno": [
            "Acid Techno",
            "Ambient Techno",
            "Detroit Techno",
            "Dub Techno",
            "Minimal Techno",
            "Industrial Techno",
            "Hard Techno",
            "Trance",
            "Progressive Techno",
            "Tech House",
            "Electronica",
            "Breakbeat Techno",
            "Electro Techno",
            "Melodic Techno",
            "Experimental Techno",
            "Dark Techno",
            "Ebm",
            "Hypnotic Techno",
            "Psychedelic Techno",
            "Rave Techno",
            "Techno-Pop"
          ],
          "indie": [
            "Indie Rock",
            "Indie Pop",
            "Indie Folk",
            "Indie Electronic",
            "Indie Punk",
            "Indie Hip-Hop",
            "Dream Pop",
            "Shoegaze",
            "Lo-fi",
            "Chillwave",
            "Freak Folk",
            "Noise Pop",
            "Math Rock",
            "Post-Punk",
            "Garage Rock",
            "Experimental Indie",
            "Surf Rock",
            "Alternative Country",
            "Indie Soul",
            "Art Rock",
            "Indie R&B",
            "Indietronica",
            "Emo",
            "Post-Rock",
            "Indie Pop-Rock",
            "Indie Synthpop",
            "Noise Rock",
            "Psych Folk",
            "Indie Blues"
          ],
          "gospel": [
            "Traditional Gospel",
            "Contemporary Gospel",
            "Southern Gospel",
            "Black Gospel",
            "Urban Contemporary Gospel",
            "Gospel Blues",
            "Bluegrass Gospel",
            "Country Gospel",
            "Praise and Worship",
            "Christian Hip-Hop",
            "Gospel Jazz",
            "Reggae Gospel",
            "African Gospel",
            "Latin Gospel",
            "R&B Gospel",
            "Gospel Choir",
            "Acappella Gospel",
            "Instrumental Gospel",
            "Gospel Rap"
          ],
          "world": [
            "African",
            "Arabic",
            "Asian",
            "Caribbean",
            "Celtic",
            "European",
            "Latin American",
            "Middle Eastern",
            "Native American",
            "Polynesian",
            "Reggae",
            "Ska",
            "Salsa",
            "Flamenco",
            "Bossa Nova",
            "Tango",
            "Fado",
            "Klezmer",
            "Balkan",
            "Afrobeat",
            "Mongolian Throat Singing",
            "Indian Classical",
            "Gamelan",
            "Sufi Music",
            "Zydeco",
            "Kora Music",
            "Andean Music",
            "Irish Traditional",
            "Gypsy Jazz",
            "Bollywood",
            "Bhangra",
            "Jawaiian",
            "Hawaiian Slack Key Guitar",
            "Calypso",
            "Cuban Son",
            "Taiko Drumming",
            "African Highlife",
            "Merengue",
            "Tuvan Throat Singing"
          ]
        },
        // Data sourced from https://unicode.org/emoji/charts/full-emoji-list.html
        emojis: {
          "smileys_and_emotion": [
            "0x1f600",
            "0x1f603",
            "0x1f604",
            "0x1f601",
            "0x1f606",
            "0x1f605",
            "0x1f923",
            "0x1f602",
            "0x1f642",
            "0x1f643",
            "0x1fae0",
            "0x1f609",
            "0x1f60a",
            "0x1f607",
            "0x1f970",
            "0x1f60d",
            "0x1f929",
            "0x1f618",
            "0x1f617",
            "0x263a",
            "0x1f61a",
            "0x1f619",
            "0x1f972",
            "0x1f60b",
            "0x1f61b",
            "0x1f61c",
            "0x1f92a",
            "0x1f61d",
            "0x1f911",
            "0x1f917",
            "0x1f92d",
            "0x1fae2",
            "0x1fae3",
            "0x1f92b",
            "0x1f914",
            "0x1fae1",
            "0x1f910",
            "0x1f928",
            "0x1f610",
            "0x1f611",
            "0x1f636",
            "0x1fae5",
            "0x1f636",
            "0x200d",
            "0x1f32b",
            "0xfe0f",
            "0x1f60f",
            "0x1f612",
            "0x1f644",
            "0x1f62c",
            "0x1f62e",
            "0x200d",
            "0x1f4a8",
            "0x1f925",
            "0x1fae8",
            "0x1f642",
            "0x200d",
            "0x2194",
            "0xfe0f",
            "0x1f642",
            "0x200d",
            "0x2195",
            "0xfe0f",
            "0x1f60c",
            "0x1f614",
            "0x1f62a",
            "0x1f924",
            "0x1f634",
            "0x1f637",
            "0x1f912",
            "0x1f915",
            "0x1f922",
            "0x1f92e",
            "0x1f927",
            "0x1f975",
            "0x1f976",
            "0x1f974",
            "0x1f635",
            "0x1f635",
            "0x200d",
            "0x1f4ab",
            "0x1f92f",
            "0x1f920",
            "0x1f973",
            "0x1f978",
            "0x1f60e",
            "0x1f913",
            "0x1f9d0",
            "0x1f615",
            "0x1fae4",
            "0x1f61f",
            "0x1f641",
            "0x2639",
            "0x1f62e",
            "0x1f62f",
            "0x1f632",
            "0x1f633",
            "0x1f97a",
            "0x1f979",
            "0x1f626",
            "0x1f627",
            "0x1f628",
            "0x1f630",
            "0x1f625",
            "0x1f622",
            "0x1f62d",
            "0x1f631",
            "0x1f616",
            "0x1f623",
            "0x1f61e",
            "0x1f613",
            "0x1f629",
            "0x1f62b",
            "0x1f971",
            "0x1f624",
            "0x1f621",
            "0x1f620",
            "0x1f92c",
            "0x1f608",
            "0x1f47f",
            "0x1f480",
            "0x2620",
            "0x1f4a9",
            "0x1f921",
            "0x1f479",
            "0x1f47a",
            "0x1f47b",
            "0x1f47d",
            "0x1f47e",
            "0x1f916",
            "0x1f63a",
            "0x1f638",
            "0x1f639",
            "0x1f63b",
            "0x1f63c",
            "0x1f63d",
            "0x1f640",
            "0x1f63f",
            "0x1f63e",
            "0x1f648",
            "0x1f649",
            "0x1f64a",
            "0x1f48c",
            "0x1f498",
            "0x1f49d",
            "0x1f496",
            "0x1f497",
            "0x1f493",
            "0x1f49e",
            "0x1f495",
            "0x1f49f",
            "0x2763",
            "0x1f494",
            "0x2764",
            "0xfe0f",
            "0x200d",
            "0x1f525",
            "0x2764",
            "0xfe0f",
            "0x200d",
            "0x1fa79",
            "0x2764",
            "0x1fa77",
            "0x1f9e1",
            "0x1f49b",
            "0x1f49a",
            "0x1f499",
            "0x1fa75",
            "0x1f49c",
            "0x1f90e",
            "0x1f5a4",
            "0x1fa76",
            "0x1f90d",
            "0x1f48b",
            "0x1f4af",
            "0x1f4a2",
            "0x1f4a5",
            "0x1f4ab",
            "0x1f4a6",
            "0x1f4a8",
            "0x1f573",
            "0x1f4ac",
            "0x1f441",
            "0xfe0f",
            "0x200d",
            "0x1f5e8",
            "0xfe0f",
            "0x1f5e8",
            "0x1f5ef",
            "0x1f4ad",
            "0x1f4a4"
          ],
          "people_and_body": [
            "0x1f44b",
            "0x1f91a",
            "0x1f590",
            "0x270b",
            "0x1f596",
            "0x1faf1",
            "0x1faf2",
            "0x1faf3",
            "0x1faf4",
            "0x1faf7",
            "0x1faf8",
            "0x1f44c",
            "0x1f90c",
            "0x1f90f",
            "0x270c",
            "0x1f91e",
            "0x1faf0",
            "0x1f91f",
            "0x1f918",
            "0x1f919",
            "0x1f448",
            "0x1f449",
            "0x1f446",
            "0x1f595",
            "0x1f447",
            "0x261d",
            "0x1faf5",
            "0x1f44d",
            "0x1f44e",
            "0x270a",
            "0x1f44a",
            "0x1f91b",
            "0x1f91c",
            "0x1f44f",
            "0x1f64c",
            "0x1faf6",
            "0x1f450",
            "0x1f932",
            "0x1f91d",
            "0x1f64f",
            "0x270d",
            "0x1f485",
            "0x1f933",
            "0x1f4aa",
            "0x1f9be",
            "0x1f9bf",
            "0x1f9b5",
            "0x1f9b6",
            "0x1f442",
            "0x1f9bb",
            "0x1f443",
            "0x1f9e0",
            "0x1fac0",
            "0x1fac1",
            "0x1f9b7",
            "0x1f9b4",
            "0x1f440",
            "0x1f441",
            "0x1f445",
            "0x1f444",
            "0x1fae6",
            "0x1f476",
            "0x1f9d2",
            "0x1f466",
            "0x1f467",
            "0x1f9d1",
            "0x1f471",
            "0x1f468",
            "0x1f9d4",
            "0x1f9d4",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9d4",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f468",
            "0x200d",
            "0x1f9b0",
            "0x1f468",
            "0x200d",
            "0x1f9b1",
            "0x1f468",
            "0x200d",
            "0x1f9b3",
            "0x1f468",
            "0x200d",
            "0x1f9b2",
            "0x1f469",
            "0x1f469",
            "0x200d",
            "0x1f9b0",
            "0x1f9d1",
            "0x200d",
            "0x1f9b0",
            "0x1f469",
            "0x200d",
            "0x1f9b1",
            "0x1f9d1",
            "0x200d",
            "0x1f9b1",
            "0x1f469",
            "0x200d",
            "0x1f9b3",
            "0x1f9d1",
            "0x200d",
            "0x1f9b3",
            "0x1f469",
            "0x200d",
            "0x1f9b2",
            "0x1f9d1",
            "0x200d",
            "0x1f9b2",
            "0x1f471",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f471",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9d3",
            "0x1f474",
            "0x1f475",
            "0x1f64d",
            "0x1f64d",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f64d",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f64e",
            "0x1f64e",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f64e",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f645",
            "0x1f645",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f645",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f646",
            "0x1f646",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f646",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f481",
            "0x1f481",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f481",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f64b",
            "0x1f64b",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f64b",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9cf",
            "0x1f9cf",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9cf",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f647",
            "0x1f647",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f647",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f926",
            "0x1f926",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f926",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f937",
            "0x1f937",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f937",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9d1",
            "0x200d",
            "0x2695",
            "0xfe0f",
            "0x1f468",
            "0x200d",
            "0x2695",
            "0xfe0f",
            "0x1f469",
            "0x200d",
            "0x2695",
            "0xfe0f",
            "0x1f9d1",
            "0x200d",
            "0x1f393",
            "0x1f468",
            "0x200d",
            "0x1f393",
            "0x1f469",
            "0x200d",
            "0x1f393",
            "0x1f9d1",
            "0x200d",
            "0x1f3eb",
            "0x1f468",
            "0x200d",
            "0x1f3eb",
            "0x1f469",
            "0x200d",
            "0x1f3eb",
            "0x1f9d1",
            "0x200d",
            "0x2696",
            "0xfe0f",
            "0x1f468",
            "0x200d",
            "0x2696",
            "0xfe0f",
            "0x1f469",
            "0x200d",
            "0x2696",
            "0xfe0f",
            "0x1f9d1",
            "0x200d",
            "0x1f33e",
            "0x1f468",
            "0x200d",
            "0x1f33e",
            "0x1f469",
            "0x200d",
            "0x1f33e",
            "0x1f9d1",
            "0x200d",
            "0x1f373",
            "0x1f468",
            "0x200d",
            "0x1f373",
            "0x1f469",
            "0x200d",
            "0x1f373",
            "0x1f9d1",
            "0x200d",
            "0x1f527",
            "0x1f468",
            "0x200d",
            "0x1f527",
            "0x1f469",
            "0x200d",
            "0x1f527",
            "0x1f9d1",
            "0x200d",
            "0x1f3ed",
            "0x1f468",
            "0x200d",
            "0x1f3ed",
            "0x1f469",
            "0x200d",
            "0x1f3ed",
            "0x1f9d1",
            "0x200d",
            "0x1f4bc",
            "0x1f468",
            "0x200d",
            "0x1f4bc",
            "0x1f469",
            "0x200d",
            "0x1f4bc",
            "0x1f9d1",
            "0x200d",
            "0x1f52c",
            "0x1f468",
            "0x200d",
            "0x1f52c",
            "0x1f469",
            "0x200d",
            "0x1f52c",
            "0x1f9d1",
            "0x200d",
            "0x1f4bb",
            "0x1f468",
            "0x200d",
            "0x1f4bb",
            "0x1f469",
            "0x200d",
            "0x1f4bb",
            "0x1f9d1",
            "0x200d",
            "0x1f3a4",
            "0x1f468",
            "0x200d",
            "0x1f3a4",
            "0x1f469",
            "0x200d",
            "0x1f3a4",
            "0x1f9d1",
            "0x200d",
            "0x1f3a8",
            "0x1f468",
            "0x200d",
            "0x1f3a8",
            "0x1f469",
            "0x200d",
            "0x1f3a8",
            "0x1f9d1",
            "0x200d",
            "0x2708",
            "0xfe0f",
            "0x1f468",
            "0x200d",
            "0x2708",
            "0xfe0f",
            "0x1f469",
            "0x200d",
            "0x2708",
            "0xfe0f",
            "0x1f9d1",
            "0x200d",
            "0x1f680",
            "0x1f468",
            "0x200d",
            "0x1f680",
            "0x1f469",
            "0x200d",
            "0x1f680",
            "0x1f9d1",
            "0x200d",
            "0x1f692",
            "0x1f468",
            "0x200d",
            "0x1f692",
            "0x1f469",
            "0x200d",
            "0x1f692",
            "0x1f46e",
            "0x1f46e",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f46e",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f575",
            "0x1f575",
            "0xfe0f",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f575",
            "0xfe0f",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f482",
            "0x1f482",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f482",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f977",
            "0x1f477",
            "0x1f477",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f477",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1fac5",
            "0x1f934",
            "0x1f478",
            "0x1f473",
            "0x1f473",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f473",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f472",
            "0x1f9d5",
            "0x1f935",
            "0x1f935",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f935",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f470",
            "0x1f470",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f470",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f930",
            "0x1fac3",
            "0x1fac4",
            "0x1f931",
            "0x1f469",
            "0x200d",
            "0x1f37c",
            "0x1f468",
            "0x200d",
            "0x1f37c",
            "0x1f9d1",
            "0x200d",
            "0x1f37c",
            "0x1f47c",
            "0x1f385",
            "0x1f936",
            "0x1f9d1",
            "0x200d",
            "0x1f384",
            "0x1f9b8",
            "0x1f9b8",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9b8",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9b9",
            "0x1f9b9",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9b9",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9d9",
            "0x1f9d9",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9d9",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9da",
            "0x1f9da",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9da",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9db",
            "0x1f9db",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9db",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9dc",
            "0x1f9dc",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9dc",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9dd",
            "0x1f9dd",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9dd",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9de",
            "0x1f9de",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9de",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9df",
            "0x1f9df",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9df",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9cc",
            "0x1f486",
            "0x1f486",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f486",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f487",
            "0x1f487",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f487",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f6b6",
            "0x1f6b6",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f6b6",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f6b6",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f6b6",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f6b6",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f9cd",
            "0x1f9cd",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9cd",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9ce",
            "0x1f9ce",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9ce",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9ce",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f9ce",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f9ce",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f9d1",
            "0x200d",
            "0x1f9af",
            "0x1f9d1",
            "0x200d",
            "0x1f9af",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f468",
            "0x200d",
            "0x1f9af",
            "0x1f468",
            "0x200d",
            "0x1f9af",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f469",
            "0x200d",
            "0x1f9af",
            "0x1f469",
            "0x200d",
            "0x1f9af",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f9d1",
            "0x200d",
            "0x1f9bc",
            "0x1f9d1",
            "0x200d",
            "0x1f9bc",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f468",
            "0x200d",
            "0x1f9bc",
            "0x1f468",
            "0x200d",
            "0x1f9bc",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f469",
            "0x200d",
            "0x1f9bc",
            "0x1f469",
            "0x200d",
            "0x1f9bc",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f9d1",
            "0x200d",
            "0x1f9bd",
            "0x1f9d1",
            "0x200d",
            "0x1f9bd",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f468",
            "0x200d",
            "0x1f9bd",
            "0x1f468",
            "0x200d",
            "0x1f9bd",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f469",
            "0x200d",
            "0x1f9bd",
            "0x1f469",
            "0x200d",
            "0x1f9bd",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f3c3",
            "0x1f3c3",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f3c3",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f3c3",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f3c3",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f3c3",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x200d",
            "0x27a1",
            "0xfe0f",
            "0x1f483",
            "0x1f57a",
            "0x1f574",
            "0x1f46f",
            "0x1f46f",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f46f",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9d6",
            "0x1f9d6",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9d6",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9d7",
            "0x1f9d7",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9d7",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f93a",
            "0x1f3c7",
            "0x26f7",
            "0x1f3c2",
            "0x1f3cc",
            "0x1f3cc",
            "0xfe0f",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f3cc",
            "0xfe0f",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f3c4",
            "0x1f3c4",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f3c4",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f6a3",
            "0x1f6a3",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f6a3",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f3ca",
            "0x1f3ca",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f3ca",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x26f9",
            "0x26f9",
            "0xfe0f",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x26f9",
            "0xfe0f",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f3cb",
            "0x1f3cb",
            "0xfe0f",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f3cb",
            "0xfe0f",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f6b4",
            "0x1f6b4",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f6b4",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f6b5",
            "0x1f6b5",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f6b5",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f938",
            "0x1f938",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f938",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f93c",
            "0x1f93c",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f93c",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f93d",
            "0x1f93d",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f93d",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f93e",
            "0x1f93e",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f93e",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f939",
            "0x1f939",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f939",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f9d8",
            "0x1f9d8",
            "0x200d",
            "0x2642",
            "0xfe0f",
            "0x1f9d8",
            "0x200d",
            "0x2640",
            "0xfe0f",
            "0x1f6c0",
            "0x1f6cc",
            "0x1f9d1",
            "0x200d",
            "0x1f91d",
            "0x200d",
            "0x1f9d1",
            "0x1f46d",
            "0x1f46b",
            "0x1f46c",
            "0x1f48f",
            "0x1f469",
            "0x200d",
            "0x2764",
            "0xfe0f",
            "0x200d",
            "0x1f48b",
            "0x200d",
            "0x1f468",
            "0x1f468",
            "0x200d",
            "0x2764",
            "0xfe0f",
            "0x200d",
            "0x1f48b",
            "0x200d",
            "0x1f468",
            "0x1f469",
            "0x200d",
            "0x2764",
            "0xfe0f",
            "0x200d",
            "0x1f48b",
            "0x200d",
            "0x1f469",
            "0x1f491",
            "0x1f469",
            "0x200d",
            "0x2764",
            "0xfe0f",
            "0x200d",
            "0x1f468",
            "0x1f468",
            "0x200d",
            "0x2764",
            "0xfe0f",
            "0x200d",
            "0x1f468",
            "0x1f469",
            "0x200d",
            "0x2764",
            "0xfe0f",
            "0x200d",
            "0x1f469",
            "0x1f468",
            "0x200d",
            "0x1f469",
            "0x200d",
            "0x1f466",
            "0x1f468",
            "0x200d",
            "0x1f469",
            "0x200d",
            "0x1f467",
            "0x1f468",
            "0x200d",
            "0x1f469",
            "0x200d",
            "0x1f467",
            "0x200d",
            "0x1f466",
            "0x1f468",
            "0x200d",
            "0x1f469",
            "0x200d",
            "0x1f466",
            "0x200d",
            "0x1f466",
            "0x1f468",
            "0x200d",
            "0x1f469",
            "0x200d",
            "0x1f467",
            "0x200d",
            "0x1f467",
            "0x1f468",
            "0x200d",
            "0x1f468",
            "0x200d",
            "0x1f466",
            "0x1f468",
            "0x200d",
            "0x1f468",
            "0x200d",
            "0x1f467",
            "0x1f468",
            "0x200d",
            "0x1f468",
            "0x200d",
            "0x1f467",
            "0x200d",
            "0x1f466",
            "0x1f468",
            "0x200d",
            "0x1f468",
            "0x200d",
            "0x1f466",
            "0x200d",
            "0x1f466",
            "0x1f468",
            "0x200d",
            "0x1f468",
            "0x200d",
            "0x1f467",
            "0x200d",
            "0x1f467",
            "0x1f469",
            "0x200d",
            "0x1f469",
            "0x200d",
            "0x1f466",
            "0x1f469",
            "0x200d",
            "0x1f469",
            "0x200d",
            "0x1f467",
            "0x1f469",
            "0x200d",
            "0x1f469",
            "0x200d",
            "0x1f467",
            "0x200d",
            "0x1f466",
            "0x1f469",
            "0x200d",
            "0x1f469",
            "0x200d",
            "0x1f466",
            "0x200d",
            "0x1f466",
            "0x1f469",
            "0x200d",
            "0x1f469",
            "0x200d",
            "0x1f467",
            "0x200d",
            "0x1f467",
            "0x1f468",
            "0x200d",
            "0x1f466",
            "0x1f468",
            "0x200d",
            "0x1f466",
            "0x200d",
            "0x1f466",
            "0x1f468",
            "0x200d",
            "0x1f467",
            "0x1f468",
            "0x200d",
            "0x1f467",
            "0x200d",
            "0x1f466",
            "0x1f468",
            "0x200d",
            "0x1f467",
            "0x200d",
            "0x1f467",
            "0x1f469",
            "0x200d",
            "0x1f466",
            "0x1f469",
            "0x200d",
            "0x1f466",
            "0x200d",
            "0x1f466",
            "0x1f469",
            "0x200d",
            "0x1f467",
            "0x1f469",
            "0x200d",
            "0x1f467",
            "0x200d",
            "0x1f466",
            "0x1f469",
            "0x200d",
            "0x1f467",
            "0x200d",
            "0x1f467",
            "0x1f5e3",
            "0x1f464",
            "0x1f465",
            "0x1fac2",
            "0x1f46a",
            "0x1f9d1",
            "0x200d",
            "0x1f9d1",
            "0x200d",
            "0x1f9d2",
            "0x1f9d1",
            "0x200d",
            "0x1f9d1",
            "0x200d",
            "0x1f9d2",
            "0x200d",
            "0x1f9d2",
            "0x1f9d1",
            "0x200d",
            "0x1f9d2",
            "0x1f9d1",
            "0x200d",
            "0x1f9d2",
            "0x200d",
            "0x1f9d2",
            "0x1f463"
          ],
          "animals_and_nature": [
            "0x1f435",
            "0x1f412",
            "0x1f98d",
            "0x1f9a7",
            "0x1f436",
            "0x1f415",
            "0x1f9ae",
            "0x1f415",
            "0x200d",
            "0x1f9ba",
            "0x1f429",
            "0x1f43a",
            "0x1f98a",
            "0x1f99d",
            "0x1f431",
            "0x1f408",
            "0x1f408",
            "0x200d",
            "0x2b1b",
            "0x1f981",
            "0x1f42f",
            "0x1f405",
            "0x1f406",
            "0x1f434",
            "0x1face",
            "0x1facf",
            "0x1f40e",
            "0x1f984",
            "0x1f993",
            "0x1f98c",
            "0x1f9ac",
            "0x1f42e",
            "0x1f402",
            "0x1f403",
            "0x1f404",
            "0x1f437",
            "0x1f416",
            "0x1f417",
            "0x1f43d",
            "0x1f40f",
            "0x1f411",
            "0x1f410",
            "0x1f42a",
            "0x1f42b",
            "0x1f999",
            "0x1f992",
            "0x1f418",
            "0x1f9a3",
            "0x1f98f",
            "0x1f99b",
            "0x1f42d",
            "0x1f401",
            "0x1f400",
            "0x1f439",
            "0x1f430",
            "0x1f407",
            "0x1f43f",
            "0x1f9ab",
            "0x1f994",
            "0x1f987",
            "0x1f43b",
            "0x1f43b",
            "0x200d",
            "0x2744",
            "0xfe0f",
            "0x1f428",
            "0x1f43c",
            "0x1f9a5",
            "0x1f9a6",
            "0x1f9a8",
            "0x1f998",
            "0x1f9a1",
            "0x1f43e",
            "0x1f983",
            "0x1f414",
            "0x1f413",
            "0x1f423",
            "0x1f424",
            "0x1f425",
            "0x1f426",
            "0x1f427",
            "0x1f54a",
            "0x1f985",
            "0x1f986",
            "0x1f9a2",
            "0x1f989",
            "0x1f9a4",
            "0x1fab6",
            "0x1f9a9",
            "0x1f99a",
            "0x1f99c",
            "0x1fabd",
            "0x1f426",
            "0x200d",
            "0x2b1b",
            "0x1fabf",
            "0x1f426",
            "0x200d",
            "0x1f525",
            "0x1f438",
            "0x1f40a",
            "0x1f422",
            "0x1f98e",
            "0x1f40d",
            "0x1f432",
            "0x1f409",
            "0x1f995",
            "0x1f996",
            "0x1f433",
            "0x1f40b",
            "0x1f42c",
            "0x1f9ad",
            "0x1f41f",
            "0x1f420",
            "0x1f421",
            "0x1f988",
            "0x1f419",
            "0x1f41a",
            "0x1fab8",
            "0x1fabc",
            "0x1f40c",
            "0x1f98b",
            "0x1f41b",
            "0x1f41c",
            "0x1f41d",
            "0x1fab2",
            "0x1f41e",
            "0x1f997",
            "0x1fab3",
            "0x1f577",
            "0x1f578",
            "0x1f982",
            "0x1f99f",
            "0x1fab0",
            "0x1fab1",
            "0x1f9a0",
            "0x1f490",
            "0x1f338",
            "0x1f4ae",
            "0x1fab7",
            "0x1f3f5",
            "0x1f339",
            "0x1f940",
            "0x1f33a",
            "0x1f33b",
            "0x1f33c",
            "0x1f337",
            "0x1fabb",
            "0x1f331",
            "0x1fab4",
            "0x1f332",
            "0x1f333",
            "0x1f334",
            "0x1f335",
            "0x1f33e",
            "0x1f33f",
            "0x2618",
            "0x1f340",
            "0x1f341",
            "0x1f342",
            "0x1f343",
            "0x1fab9",
            "0x1faba",
            "0x1f344"
          ],
          "food_and_drink": [
            "0x1f347",
            "0x1f348",
            "0x1f349",
            "0x1f34a",
            "0x1f34b",
            "0x1f34b",
            "0x200d",
            "0x1f7e9",
            "0x1f34c",
            "0x1f34d",
            "0x1f96d",
            "0x1f34e",
            "0x1f34f",
            "0x1f350",
            "0x1f351",
            "0x1f352",
            "0x1f353",
            "0x1fad0",
            "0x1f95d",
            "0x1f345",
            "0x1fad2",
            "0x1f965",
            "0x1f951",
            "0x1f346",
            "0x1f954",
            "0x1f955",
            "0x1f33d",
            "0x1f336",
            "0x1fad1",
            "0x1f952",
            "0x1f96c",
            "0x1f966",
            "0x1f9c4",
            "0x1f9c5",
            "0x1f95c",
            "0x1fad8",
            "0x1f330",
            "0x1fada",
            "0x1fadb",
            "0x1f344",
            "0x200d",
            "0x1f7eb",
            "0x1f35e",
            "0x1f950",
            "0x1f956",
            "0x1fad3",
            "0x1f968",
            "0x1f96f",
            "0x1f95e",
            "0x1f9c7",
            "0x1f9c0",
            "0x1f356",
            "0x1f357",
            "0x1f969",
            "0x1f953",
            "0x1f354",
            "0x1f35f",
            "0x1f355",
            "0x1f32d",
            "0x1f96a",
            "0x1f32e",
            "0x1f32f",
            "0x1fad4",
            "0x1f959",
            "0x1f9c6",
            "0x1f95a",
            "0x1f373",
            "0x1f958",
            "0x1f372",
            "0x1fad5",
            "0x1f963",
            "0x1f957",
            "0x1f37f",
            "0x1f9c8",
            "0x1f9c2",
            "0x1f96b",
            "0x1f371",
            "0x1f358",
            "0x1f359",
            "0x1f35a",
            "0x1f35b",
            "0x1f35c",
            "0x1f35d",
            "0x1f360",
            "0x1f362",
            "0x1f363",
            "0x1f364",
            "0x1f365",
            "0x1f96e",
            "0x1f361",
            "0x1f95f",
            "0x1f960",
            "0x1f961",
            "0x1f980",
            "0x1f99e",
            "0x1f990",
            "0x1f991",
            "0x1f9aa",
            "0x1f366",
            "0x1f367",
            "0x1f368",
            "0x1f369",
            "0x1f36a",
            "0x1f382",
            "0x1f370",
            "0x1f9c1",
            "0x1f967",
            "0x1f36b",
            "0x1f36c",
            "0x1f36d",
            "0x1f36e",
            "0x1f36f",
            "0x1f37c",
            "0x1f95b",
            "0x2615",
            "0x1fad6",
            "0x1f375",
            "0x1f376",
            "0x1f37e",
            "0x1f377",
            "0x1f378",
            "0x1f379",
            "0x1f37a",
            "0x1f37b",
            "0x1f942",
            "0x1f943",
            "0x1fad7",
            "0x1f964",
            "0x1f9cb",
            "0x1f9c3",
            "0x1f9c9",
            "0x1f9ca",
            "0x1f962",
            "0x1f37d",
            "0x1f374",
            "0x1f944",
            "0x1f52a",
            "0x1fad9",
            "0x1f3fa"
          ],
          "travel_and_places": [
            "0x1f30d",
            "0x1f30e",
            "0x1f30f",
            "0x1f310",
            "0x1f5fa",
            "0x1f5fe",
            "0x1f9ed",
            "0x1f3d4",
            "0x26f0",
            "0x1f30b",
            "0x1f5fb",
            "0x1f3d5",
            "0x1f3d6",
            "0x1f3dc",
            "0x1f3dd",
            "0x1f3de",
            "0x1f3df",
            "0x1f3db",
            "0x1f3d7",
            "0x1f9f1",
            "0x1faa8",
            "0x1fab5",
            "0x1f6d6",
            "0x1f3d8",
            "0x1f3da",
            "0x1f3e0",
            "0x1f3e1",
            "0x1f3e2",
            "0x1f3e3",
            "0x1f3e4",
            "0x1f3e5",
            "0x1f3e6",
            "0x1f3e8",
            "0x1f3e9",
            "0x1f3ea",
            "0x1f3eb",
            "0x1f3ec",
            "0x1f3ed",
            "0x1f3ef",
            "0x1f3f0",
            "0x1f492",
            "0x1f5fc",
            "0x1f5fd",
            "0x26ea",
            "0x1f54c",
            "0x1f6d5",
            "0x1f54d",
            "0x26e9",
            "0x1f54b",
            "0x26f2",
            "0x26fa",
            "0x1f301",
            "0x1f303",
            "0x1f3d9",
            "0x1f304",
            "0x1f305",
            "0x1f306",
            "0x1f307",
            "0x1f309",
            "0x2668",
            "0x1f3a0",
            "0x1f6dd",
            "0x1f3a1",
            "0x1f3a2",
            "0x1f488",
            "0x1f3aa",
            "0x1f682",
            "0x1f683",
            "0x1f684",
            "0x1f685",
            "0x1f686",
            "0x1f687",
            "0x1f688",
            "0x1f689",
            "0x1f68a",
            "0x1f69d",
            "0x1f69e",
            "0x1f68b",
            "0x1f68c",
            "0x1f68d",
            "0x1f68e",
            "0x1f690",
            "0x1f691",
            "0x1f692",
            "0x1f693",
            "0x1f694",
            "0x1f695",
            "0x1f696",
            "0x1f697",
            "0x1f698",
            "0x1f699",
            "0x1f6fb",
            "0x1f69a",
            "0x1f69b",
            "0x1f69c",
            "0x1f3ce",
            "0x1f3cd",
            "0x1f6f5",
            "0x1f9bd",
            "0x1f9bc",
            "0x1f6fa",
            "0x1f6b2",
            "0x1f6f4",
            "0x1f6f9",
            "0x1f6fc",
            "0x1f68f",
            "0x1f6e3",
            "0x1f6e4",
            "0x1f6e2",
            "0x26fd",
            "0x1f6de",
            "0x1f6a8",
            "0x1f6a5",
            "0x1f6a6",
            "0x1f6d1",
            "0x1f6a7",
            "0x2693",
            "0x1f6df",
            "0x26f5",
            "0x1f6f6",
            "0x1f6a4",
            "0x1f6f3",
            "0x26f4",
            "0x1f6e5",
            "0x1f6a2",
            "0x2708",
            "0x1f6e9",
            "0x1f6eb",
            "0x1f6ec",
            "0x1fa82",
            "0x1f4ba",
            "0x1f681",
            "0x1f69f",
            "0x1f6a0",
            "0x1f6a1",
            "0x1f6f0",
            "0x1f680",
            "0x1f6f8",
            "0x1f6ce",
            "0x1f9f3",
            "0x231b",
            "0x23f3",
            "0x231a",
            "0x23f0",
            "0x23f1",
            "0x23f2",
            "0x1f570",
            "0x1f55b",
            "0x1f567",
            "0x1f550",
            "0x1f55c",
            "0x1f551",
            "0x1f55d",
            "0x1f552",
            "0x1f55e",
            "0x1f553",
            "0x1f55f",
            "0x1f554",
            "0x1f560",
            "0x1f555",
            "0x1f561",
            "0x1f556",
            "0x1f562",
            "0x1f557",
            "0x1f563",
            "0x1f558",
            "0x1f564",
            "0x1f559",
            "0x1f565",
            "0x1f55a",
            "0x1f566",
            "0x1f311",
            "0x1f312",
            "0x1f313",
            "0x1f314",
            "0x1f315",
            "0x1f316",
            "0x1f317",
            "0x1f318",
            "0x1f319",
            "0x1f31a",
            "0x1f31b",
            "0x1f31c",
            "0x1f321",
            "0x2600",
            "0x1f31d",
            "0x1f31e",
            "0x1fa90",
            "0x2b50",
            "0x1f31f",
            "0x1f320",
            "0x1f30c",
            "0x2601",
            "0x26c5",
            "0x26c8",
            "0x1f324",
            "0x1f325",
            "0x1f326",
            "0x1f327",
            "0x1f328",
            "0x1f329",
            "0x1f32a",
            "0x1f32b",
            "0x1f32c",
            "0x1f300",
            "0x1f308",
            "0x1f302",
            "0x2602",
            "0x2614",
            "0x26f1",
            "0x26a1",
            "0x2744",
            "0x2603",
            "0x26c4",
            "0x2604",
            "0x1f525",
            "0x1f4a7",
            "0x1f30a"
          ],
          "activities": [
            "0x1f383",
            "0x1f384",
            "0x1f386",
            "0x1f387",
            "0x1f9e8",
            "0x2728",
            "0x1f388",
            "0x1f389",
            "0x1f38a",
            "0x1f38b",
            "0x1f38d",
            "0x1f38e",
            "0x1f38f",
            "0x1f390",
            "0x1f391",
            "0x1f9e7",
            "0x1f380",
            "0x1f381",
            "0x1f397",
            "0x1f39f",
            "0x1f3ab",
            "0x1f396",
            "0x1f3c6",
            "0x1f3c5",
            "0x1f947",
            "0x1f948",
            "0x1f949",
            "0x26bd",
            "0x26be",
            "0x1f94e",
            "0x1f3c0",
            "0x1f3d0",
            "0x1f3c8",
            "0x1f3c9",
            "0x1f3be",
            "0x1f94f",
            "0x1f3b3",
            "0x1f3cf",
            "0x1f3d1",
            "0x1f3d2",
            "0x1f94d",
            "0x1f3d3",
            "0x1f3f8",
            "0x1f94a",
            "0x1f94b",
            "0x1f945",
            "0x26f3",
            "0x26f8",
            "0x1f3a3",
            "0x1f93f",
            "0x1f3bd",
            "0x1f3bf",
            "0x1f6f7",
            "0x1f94c",
            "0x1f3af",
            "0x1fa80",
            "0x1fa81",
            "0x1f52b",
            "0x1f3b1",
            "0x1f52e",
            "0x1fa84",
            "0x1f3ae",
            "0x1f579",
            "0x1f3b0",
            "0x1f3b2",
            "0x1f9e9",
            "0x1f9f8",
            "0x1fa85",
            "0x1faa9",
            "0x1fa86",
            "0x2660",
            "0x2665",
            "0x2666",
            "0x2663",
            "0x265f",
            "0x1f0cf",
            "0x1f004",
            "0x1f3b4",
            "0x1f3ad",
            "0x1f5bc",
            "0x1f3a8",
            "0x1f9f5",
            "0x1faa1",
            "0x1f9f6",
            "0x1faa2"
          ],
          "objects": [
            "0x1f453",
            "0x1f576",
            "0x1f97d",
            "0x1f97c",
            "0x1f9ba",
            "0x1f454",
            "0x1f455",
            "0x1f456",
            "0x1f9e3",
            "0x1f9e4",
            "0x1f9e5",
            "0x1f9e6",
            "0x1f457",
            "0x1f458",
            "0x1f97b",
            "0x1fa71",
            "0x1fa72",
            "0x1fa73",
            "0x1f459",
            "0x1f45a",
            "0x1faad",
            "0x1f45b",
            "0x1f45c",
            "0x1f45d",
            "0x1f6cd",
            "0x1f392",
            "0x1fa74",
            "0x1f45e",
            "0x1f45f",
            "0x1f97e",
            "0x1f97f",
            "0x1f460",
            "0x1f461",
            "0x1fa70",
            "0x1f462",
            "0x1faae",
            "0x1f451",
            "0x1f452",
            "0x1f3a9",
            "0x1f393",
            "0x1f9e2",
            "0x1fa96",
            "0x26d1",
            "0x1f4ff",
            "0x1f484",
            "0x1f48d",
            "0x1f48e",
            "0x1f507",
            "0x1f508",
            "0x1f509",
            "0x1f50a",
            "0x1f4e2",
            "0x1f4e3",
            "0x1f4ef",
            "0x1f514",
            "0x1f515",
            "0x1f3bc",
            "0x1f3b5",
            "0x1f3b6",
            "0x1f399",
            "0x1f39a",
            "0x1f39b",
            "0x1f3a4",
            "0x1f3a7",
            "0x1f4fb",
            "0x1f3b7",
            "0x1fa97",
            "0x1f3b8",
            "0x1f3b9",
            "0x1f3ba",
            "0x1f3bb",
            "0x1fa95",
            "0x1f941",
            "0x1fa98",
            "0x1fa87",
            "0x1fa88",
            "0x1f4f1",
            "0x1f4f2",
            "0x260e",
            "0x1f4de",
            "0x1f4df",
            "0x1f4e0",
            "0x1f50b",
            "0x1faab",
            "0x1f50c",
            "0x1f4bb",
            "0x1f5a5",
            "0x1f5a8",
            "0x2328",
            "0x1f5b1",
            "0x1f5b2",
            "0x1f4bd",
            "0x1f4be",
            "0x1f4bf",
            "0x1f4c0",
            "0x1f9ee",
            "0x1f3a5",
            "0x1f39e",
            "0x1f4fd",
            "0x1f3ac",
            "0x1f4fa",
            "0x1f4f7",
            "0x1f4f8",
            "0x1f4f9",
            "0x1f4fc",
            "0x1f50d",
            "0x1f50e",
            "0x1f56f",
            "0x1f4a1",
            "0x1f526",
            "0x1f3ee",
            "0x1fa94",
            "0x1f4d4",
            "0x1f4d5",
            "0x1f4d6",
            "0x1f4d7",
            "0x1f4d8",
            "0x1f4d9",
            "0x1f4da",
            "0x1f4d3",
            "0x1f4d2",
            "0x1f4c3",
            "0x1f4dc",
            "0x1f4c4",
            "0x1f4f0",
            "0x1f5de",
            "0x1f4d1",
            "0x1f516",
            "0x1f3f7",
            "0x1f4b0",
            "0x1fa99",
            "0x1f4b4",
            "0x1f4b5",
            "0x1f4b6",
            "0x1f4b7",
            "0x1f4b8",
            "0x1f4b3",
            "0x1f9fe",
            "0x1f4b9",
            "0x2709",
            "0x1f4e7",
            "0x1f4e8",
            "0x1f4e9",
            "0x1f4e4",
            "0x1f4e5",
            "0x1f4e6",
            "0x1f4eb",
            "0x1f4ea",
            "0x1f4ec",
            "0x1f4ed",
            "0x1f4ee",
            "0x1f5f3",
            "0x270f",
            "0x2712",
            "0x1f58b",
            "0x1f58a",
            "0x1f58c",
            "0x1f58d",
            "0x1f4dd",
            "0x1f4bc",
            "0x1f4c1",
            "0x1f4c2",
            "0x1f5c2",
            "0x1f4c5",
            "0x1f4c6",
            "0x1f5d2",
            "0x1f5d3",
            "0x1f4c7",
            "0x1f4c8",
            "0x1f4c9",
            "0x1f4ca",
            "0x1f4cb",
            "0x1f4cc",
            "0x1f4cd",
            "0x1f4ce",
            "0x1f587",
            "0x1f4cf",
            "0x1f4d0",
            "0x2702",
            "0x1f5c3",
            "0x1f5c4",
            "0x1f5d1",
            "0x1f512",
            "0x1f513",
            "0x1f50f",
            "0x1f510",
            "0x1f511",
            "0x1f5dd",
            "0x1f528",
            "0x1fa93",
            "0x26cf",
            "0x2692",
            "0x1f6e0",
            "0x1f5e1",
            "0x2694",
            "0x1f4a3",
            "0x1fa83",
            "0x1f3f9",
            "0x1f6e1",
            "0x1fa9a",
            "0x1f527",
            "0x1fa9b",
            "0x1f529",
            "0x2699",
            "0x1f5dc",
            "0x2696",
            "0x1f9af",
            "0x1f517",
            "0x26d3",
            "0xfe0f",
            "0x200d",
            "0x1f4a5",
            "0x26d3",
            "0x1fa9d",
            "0x1f9f0",
            "0x1f9f2",
            "0x1fa9c",
            "0x2697",
            "0x1f9ea",
            "0x1f9eb",
            "0x1f9ec",
            "0x1f52c",
            "0x1f52d",
            "0x1f4e1",
            "0x1f489",
            "0x1fa78",
            "0x1f48a",
            "0x1fa79",
            "0x1fa7c",
            "0x1fa7a",
            "0x1fa7b",
            "0x1f6aa",
            "0x1f6d7",
            "0x1fa9e",
            "0x1fa9f",
            "0x1f6cf",
            "0x1f6cb",
            "0x1fa91",
            "0x1f6bd",
            "0x1faa0",
            "0x1f6bf",
            "0x1f6c1",
            "0x1faa4",
            "0x1fa92",
            "0x1f9f4",
            "0x1f9f7",
            "0x1f9f9",
            "0x1f9fa",
            "0x1f9fb",
            "0x1faa3",
            "0x1f9fc",
            "0x1fae7",
            "0x1faa5",
            "0x1f9fd",
            "0x1f9ef",
            "0x1f6d2",
            "0x1f6ac",
            "0x26b0",
            "0x1faa6",
            "0x26b1",
            "0x1f9ff",
            "0x1faac",
            "0x1f5ff",
            "0x1faa7",
            "0x1faaa"
          ],
          "symbols": [
            "0x1f3e7",
            "0x1f6ae",
            "0x1f6b0",
            "0x267f",
            "0x1f6b9",
            "0x1f6ba",
            "0x1f6bb",
            "0x1f6bc",
            "0x1f6be",
            "0x1f6c2",
            "0x1f6c3",
            "0x1f6c4",
            "0x1f6c5",
            "0x26a0",
            "0x1f6b8",
            "0x26d4",
            "0x1f6ab",
            "0x1f6b3",
            "0x1f6ad",
            "0x1f6af",
            "0x1f6b1",
            "0x1f6b7",
            "0x1f4f5",
            "0x1f51e",
            "0x2622",
            "0x2623",
            "0x2b06",
            "0x2197",
            "0x27a1",
            "0x2198",
            "0x2b07",
            "0x2199",
            "0x2b05",
            "0x2196",
            "0x2195",
            "0x2194",
            "0x21a9",
            "0x21aa",
            "0x2934",
            "0x2935",
            "0x1f503",
            "0x1f504",
            "0x1f519",
            "0x1f51a",
            "0x1f51b",
            "0x1f51c",
            "0x1f51d",
            "0x1f6d0",
            "0x269b",
            "0x1f549",
            "0x2721",
            "0x2638",
            "0x262f",
            "0x271d",
            "0x2626",
            "0x262a",
            "0x262e",
            "0x1f54e",
            "0x1f52f",
            "0x1faaf",
            "0x2648",
            "0x2649",
            "0x264a",
            "0x264b",
            "0x264c",
            "0x264d",
            "0x264e",
            "0x264f",
            "0x2650",
            "0x2651",
            "0x2652",
            "0x2653",
            "0x26ce",
            "0x1f500",
            "0x1f501",
            "0x1f502",
            "0x25b6",
            "0x23e9",
            "0x23ed",
            "0x23ef",
            "0x25c0",
            "0x23ea",
            "0x23ee",
            "0x1f53c",
            "0x23eb",
            "0x1f53d",
            "0x23ec",
            "0x23f8",
            "0x23f9",
            "0x23fa",
            "0x23cf",
            "0x1f3a6",
            "0x1f505",
            "0x1f506",
            "0x1f4f6",
            "0x1f6dc",
            "0x1f4f3",
            "0x1f4f4",
            "0x2640",
            "0x2642",
            "0x26a7",
            "0x2716",
            "0x2795",
            "0x2796",
            "0x2797",
            "0x1f7f0",
            "0x267e",
            "0x203c",
            "0x2049",
            "0x2753",
            "0x2754",
            "0x2755",
            "0x2757",
            "0x3030",
            "0x1f4b1",
            "0x1f4b2",
            "0x2695",
            "0x267b",
            "0x269c",
            "0x1f531",
            "0x1f4db",
            "0x1f530",
            "0x2b55",
            "0x2705",
            "0x2611",
            "0x2714",
            "0x274c",
            "0x274e",
            "0x27b0",
            "0x27bf",
            "0x303d",
            "0x2733",
            "0x2734",
            "0x2747",
            "0x00a9",
            "0x00ae",
            "0x2122",
            "0x0023",
            "0xfe0f",
            "0x20e3",
            "0x002a",
            "0xfe0f",
            "0x20e3",
            "0x0030",
            "0xfe0f",
            "0x20e3",
            "0x0031",
            "0xfe0f",
            "0x20e3",
            "0x0032",
            "0xfe0f",
            "0x20e3",
            "0x0033",
            "0xfe0f",
            "0x20e3",
            "0x0034",
            "0xfe0f",
            "0x20e3",
            "0x0035",
            "0xfe0f",
            "0x20e3",
            "0x0036",
            "0xfe0f",
            "0x20e3",
            "0x0037",
            "0xfe0f",
            "0x20e3",
            "0x0038",
            "0xfe0f",
            "0x20e3",
            "0x0039",
            "0xfe0f",
            "0x20e3",
            "0x1f51f",
            "0x1f520",
            "0x1f521",
            "0x1f522",
            "0x1f523",
            "0x1f524",
            "0x1f170",
            "0x1f18e",
            "0x1f171",
            "0x1f191",
            "0x1f192",
            "0x1f193",
            "0x2139",
            "0x1f194",
            "0x24c2",
            "0x1f195",
            "0x1f196",
            "0x1f17e",
            "0x1f197",
            "0x1f17f",
            "0x1f198",
            "0x1f199",
            "0x1f19a",
            "0x1f201",
            "0x1f202",
            "0x1f237",
            "0x1f236",
            "0x1f22f",
            "0x1f250",
            "0x1f239",
            "0x1f21a",
            "0x1f232",
            "0x1f251",
            "0x1f238",
            "0x1f234",
            "0x1f233",
            "0x3297",
            "0x3299",
            "0x1f23a",
            "0x1f235",
            "0x1f534",
            "0x1f7e0",
            "0x1f7e1",
            "0x1f7e2",
            "0x1f535",
            "0x1f7e3",
            "0x1f7e4",
            "0x26ab",
            "0x26aa",
            "0x1f7e5",
            "0x1f7e7",
            "0x1f7e8",
            "0x1f7e9",
            "0x1f7e6",
            "0x1f7ea",
            "0x1f7eb",
            "0x2b1b",
            "0x2b1c",
            "0x25fc",
            "0x25fb",
            "0x25fe",
            "0x25fd",
            "0x25aa",
            "0x25ab",
            "0x1f536",
            "0x1f537",
            "0x1f538",
            "0x1f539",
            "0x1f53a",
            "0x1f53b",
            "0x1f4a0",
            "0x1f518",
            "0x1f533",
            "0x1f532"
          ],
          "flags": [
            "0x1f3c1",
            "0x1f6a9",
            "0x1f38c",
            "0x1f3f4",
            "0x1f3f3",
            "0x1f3f3",
            "0xfe0f",
            "0x200d",
            "0x1f308",
            "0x1f3f3",
            "0xfe0f",
            "0x200d",
            "0x26a7",
            "0xfe0f",
            "0x1f3f4",
            "0x200d",
            "0x2620",
            "0xfe0f",
            "0x1f1e6",
            "0x1f1e8",
            "0x1f1e6",
            "0x1f1e9",
            "0x1f1e6",
            "0x1f1ea",
            "0x1f1e6",
            "0x1f1eb",
            "0x1f1e6",
            "0x1f1ec",
            "0x1f1e6",
            "0x1f1ee",
            "0x1f1e6",
            "0x1f1f1",
            "0x1f1e6",
            "0x1f1f2",
            "0x1f1e6",
            "0x1f1f4",
            "0x1f1e6",
            "0x1f1f6",
            "0x1f1e6",
            "0x1f1f7",
            "0x1f1e6",
            "0x1f1f8",
            "0x1f1e6",
            "0x1f1f9",
            "0x1f1e6",
            "0x1f1fa",
            "0x1f1e6",
            "0x1f1fc",
            "0x1f1e6",
            "0x1f1fd",
            "0x1f1e6",
            "0x1f1ff",
            "0x1f1e7",
            "0x1f1e6",
            "0x1f1e7",
            "0x1f1e7",
            "0x1f1e7",
            "0x1f1e9",
            "0x1f1e7",
            "0x1f1ea",
            "0x1f1e7",
            "0x1f1eb",
            "0x1f1e7",
            "0x1f1ec",
            "0x1f1e7",
            "0x1f1ed",
            "0x1f1e7",
            "0x1f1ee",
            "0x1f1e7",
            "0x1f1ef",
            "0x1f1e7",
            "0x1f1f1",
            "0x1f1e7",
            "0x1f1f2",
            "0x1f1e7",
            "0x1f1f3",
            "0x1f1e7",
            "0x1f1f4",
            "0x1f1e7",
            "0x1f1f6",
            "0x1f1e7",
            "0x1f1f7",
            "0x1f1e7",
            "0x1f1f8",
            "0x1f1e7",
            "0x1f1f9",
            "0x1f1e7",
            "0x1f1fb",
            "0x1f1e7",
            "0x1f1fc",
            "0x1f1e7",
            "0x1f1fe",
            "0x1f1e7",
            "0x1f1ff",
            "0x1f1e8",
            "0x1f1e6",
            "0x1f1e8",
            "0x1f1e8",
            "0x1f1e8",
            "0x1f1e9",
            "0x1f1e8",
            "0x1f1eb",
            "0x1f1e8",
            "0x1f1ec",
            "0x1f1e8",
            "0x1f1ed",
            "0x1f1e8",
            "0x1f1ee",
            "0x1f1e8",
            "0x1f1f0",
            "0x1f1e8",
            "0x1f1f1",
            "0x1f1e8",
            "0x1f1f2",
            "0x1f1e8",
            "0x1f1f3",
            "0x1f1e8",
            "0x1f1f4",
            "0x1f1e8",
            "0x1f1f5",
            "0x1f1e8",
            "0x1f1f7",
            "0x1f1e8",
            "0x1f1fa",
            "0x1f1e8",
            "0x1f1fb",
            "0x1f1e8",
            "0x1f1fc",
            "0x1f1e8",
            "0x1f1fd",
            "0x1f1e8",
            "0x1f1fe",
            "0x1f1e8",
            "0x1f1ff",
            "0x1f1e9",
            "0x1f1ea",
            "0x1f1e9",
            "0x1f1ec",
            "0x1f1e9",
            "0x1f1ef",
            "0x1f1e9",
            "0x1f1f0",
            "0x1f1e9",
            "0x1f1f2",
            "0x1f1e9",
            "0x1f1f4",
            "0x1f1e9",
            "0x1f1ff",
            "0x1f1ea",
            "0x1f1e6",
            "0x1f1ea",
            "0x1f1e8",
            "0x1f1ea",
            "0x1f1ea",
            "0x1f1ea",
            "0x1f1ec",
            "0x1f1ea",
            "0x1f1ed",
            "0x1f1ea",
            "0x1f1f7",
            "0x1f1ea",
            "0x1f1f8",
            "0x1f1ea",
            "0x1f1f9",
            "0x1f1ea",
            "0x1f1fa",
            "0x1f1eb",
            "0x1f1ee",
            "0x1f1eb",
            "0x1f1ef",
            "0x1f1eb",
            "0x1f1f0",
            "0x1f1eb",
            "0x1f1f2",
            "0x1f1eb",
            "0x1f1f4",
            "0x1f1eb",
            "0x1f1f7",
            "0x1f1ec",
            "0x1f1e6",
            "0x1f1ec",
            "0x1f1e7",
            "0x1f1ec",
            "0x1f1e9",
            "0x1f1ec",
            "0x1f1ea",
            "0x1f1ec",
            "0x1f1eb",
            "0x1f1ec",
            "0x1f1ec",
            "0x1f1ec",
            "0x1f1ed",
            "0x1f1ec",
            "0x1f1ee",
            "0x1f1ec",
            "0x1f1f1",
            "0x1f1ec",
            "0x1f1f2",
            "0x1f1ec",
            "0x1f1f3",
            "0x1f1ec",
            "0x1f1f5",
            "0x1f1ec",
            "0x1f1f6",
            "0x1f1ec",
            "0x1f1f7",
            "0x1f1ec",
            "0x1f1f8",
            "0x1f1ec",
            "0x1f1f9",
            "0x1f1ec",
            "0x1f1fa",
            "0x1f1ec",
            "0x1f1fc",
            "0x1f1ec",
            "0x1f1fe",
            "0x1f1ed",
            "0x1f1f0",
            "0x1f1ed",
            "0x1f1f2",
            "0x1f1ed",
            "0x1f1f3",
            "0x1f1ed",
            "0x1f1f7",
            "0x1f1ed",
            "0x1f1f9",
            "0x1f1ed",
            "0x1f1fa",
            "0x1f1ee",
            "0x1f1e8",
            "0x1f1ee",
            "0x1f1e9",
            "0x1f1ee",
            "0x1f1ea",
            "0x1f1ee",
            "0x1f1f1",
            "0x1f1ee",
            "0x1f1f2",
            "0x1f1ee",
            "0x1f1f3",
            "0x1f1ee",
            "0x1f1f4",
            "0x1f1ee",
            "0x1f1f6",
            "0x1f1ee",
            "0x1f1f7",
            "0x1f1ee",
            "0x1f1f8",
            "0x1f1ee",
            "0x1f1f9",
            "0x1f1ef",
            "0x1f1ea",
            "0x1f1ef",
            "0x1f1f2",
            "0x1f1ef",
            "0x1f1f4",
            "0x1f1ef",
            "0x1f1f5",
            "0x1f1f0",
            "0x1f1ea",
            "0x1f1f0",
            "0x1f1ec",
            "0x1f1f0",
            "0x1f1ed",
            "0x1f1f0",
            "0x1f1ee",
            "0x1f1f0",
            "0x1f1f2",
            "0x1f1f0",
            "0x1f1f3",
            "0x1f1f0",
            "0x1f1f5",
            "0x1f1f0",
            "0x1f1f7",
            "0x1f1f0",
            "0x1f1fc",
            "0x1f1f0",
            "0x1f1fe",
            "0x1f1f0",
            "0x1f1ff",
            "0x1f1f1",
            "0x1f1e6",
            "0x1f1f1",
            "0x1f1e7",
            "0x1f1f1",
            "0x1f1e8",
            "0x1f1f1",
            "0x1f1ee",
            "0x1f1f1",
            "0x1f1f0",
            "0x1f1f1",
            "0x1f1f7",
            "0x1f1f1",
            "0x1f1f8",
            "0x1f1f1",
            "0x1f1f9",
            "0x1f1f1",
            "0x1f1fa",
            "0x1f1f1",
            "0x1f1fb",
            "0x1f1f1",
            "0x1f1fe",
            "0x1f1f2",
            "0x1f1e6",
            "0x1f1f2",
            "0x1f1e8",
            "0x1f1f2",
            "0x1f1e9",
            "0x1f1f2",
            "0x1f1ea",
            "0x1f1f2",
            "0x1f1eb",
            "0x1f1f2",
            "0x1f1ec",
            "0x1f1f2",
            "0x1f1ed",
            "0x1f1f2",
            "0x1f1f0",
            "0x1f1f2",
            "0x1f1f1",
            "0x1f1f2",
            "0x1f1f2",
            "0x1f1f2",
            "0x1f1f3",
            "0x1f1f2",
            "0x1f1f4",
            "0x1f1f2",
            "0x1f1f5",
            "0x1f1f2",
            "0x1f1f6",
            "0x1f1f2",
            "0x1f1f7",
            "0x1f1f2",
            "0x1f1f8",
            "0x1f1f2",
            "0x1f1f9",
            "0x1f1f2",
            "0x1f1fa",
            "0x1f1f2",
            "0x1f1fb",
            "0x1f1f2",
            "0x1f1fc",
            "0x1f1f2",
            "0x1f1fd",
            "0x1f1f2",
            "0x1f1fe",
            "0x1f1f2",
            "0x1f1ff",
            "0x1f1f3",
            "0x1f1e6",
            "0x1f1f3",
            "0x1f1e8",
            "0x1f1f3",
            "0x1f1ea",
            "0x1f1f3",
            "0x1f1eb",
            "0x1f1f3",
            "0x1f1ec",
            "0x1f1f3",
            "0x1f1ee",
            "0x1f1f3",
            "0x1f1f1",
            "0x1f1f3",
            "0x1f1f4",
            "0x1f1f3",
            "0x1f1f5",
            "0x1f1f3",
            "0x1f1f7",
            "0x1f1f3",
            "0x1f1fa",
            "0x1f1f3",
            "0x1f1ff",
            "0x1f1f4",
            "0x1f1f2",
            "0x1f1f5",
            "0x1f1e6",
            "0x1f1f5",
            "0x1f1ea",
            "0x1f1f5",
            "0x1f1eb",
            "0x1f1f5",
            "0x1f1ec",
            "0x1f1f5",
            "0x1f1ed",
            "0x1f1f5",
            "0x1f1f0",
            "0x1f1f5",
            "0x1f1f1",
            "0x1f1f5",
            "0x1f1f2",
            "0x1f1f5",
            "0x1f1f3",
            "0x1f1f5",
            "0x1f1f7",
            "0x1f1f5",
            "0x1f1f8",
            "0x1f1f5",
            "0x1f1f9",
            "0x1f1f5",
            "0x1f1fc",
            "0x1f1f5",
            "0x1f1fe",
            "0x1f1f6",
            "0x1f1e6",
            "0x1f1f7",
            "0x1f1ea",
            "0x1f1f7",
            "0x1f1f4",
            "0x1f1f7",
            "0x1f1f8",
            "0x1f1f7",
            "0x1f1fa",
            "0x1f1f7",
            "0x1f1fc",
            "0x1f1f8",
            "0x1f1e6",
            "0x1f1f8",
            "0x1f1e7",
            "0x1f1f8",
            "0x1f1e8",
            "0x1f1f8",
            "0x1f1e9",
            "0x1f1f8",
            "0x1f1ea",
            "0x1f1f8",
            "0x1f1ec",
            "0x1f1f8",
            "0x1f1ed",
            "0x1f1f8",
            "0x1f1ee",
            "0x1f1f8",
            "0x1f1ef",
            "0x1f1f8",
            "0x1f1f0",
            "0x1f1f8",
            "0x1f1f1",
            "0x1f1f8",
            "0x1f1f2",
            "0x1f1f8",
            "0x1f1f3",
            "0x1f1f8",
            "0x1f1f4",
            "0x1f1f8",
            "0x1f1f7",
            "0x1f1f8",
            "0x1f1f8",
            "0x1f1f8",
            "0x1f1f9",
            "0x1f1f8",
            "0x1f1fb",
            "0x1f1f8",
            "0x1f1fd",
            "0x1f1f8",
            "0x1f1fe",
            "0x1f1f8",
            "0x1f1ff",
            "0x1f1f9",
            "0x1f1e6",
            "0x1f1f9",
            "0x1f1e8",
            "0x1f1f9",
            "0x1f1e9",
            "0x1f1f9",
            "0x1f1eb",
            "0x1f1f9",
            "0x1f1ec",
            "0x1f1f9",
            "0x1f1ed",
            "0x1f1f9",
            "0x1f1ef",
            "0x1f1f9",
            "0x1f1f0",
            "0x1f1f9",
            "0x1f1f1",
            "0x1f1f9",
            "0x1f1f2",
            "0x1f1f9",
            "0x1f1f3",
            "0x1f1f9",
            "0x1f1f4",
            "0x1f1f9",
            "0x1f1f7",
            "0x1f1f9",
            "0x1f1f9",
            "0x1f1f9",
            "0x1f1fb",
            "0x1f1f9",
            "0x1f1fc",
            "0x1f1f9",
            "0x1f1ff",
            "0x1f1fa",
            "0x1f1e6",
            "0x1f1fa",
            "0x1f1ec",
            "0x1f1fa",
            "0x1f1f2",
            "0x1f1fa",
            "0x1f1f3",
            "0x1f1fa",
            "0x1f1f8",
            "0x1f1fa",
            "0x1f1fe",
            "0x1f1fa",
            "0x1f1ff",
            "0x1f1fb",
            "0x1f1e6",
            "0x1f1fb",
            "0x1f1e8",
            "0x1f1fb",
            "0x1f1ea",
            "0x1f1fb",
            "0x1f1ec",
            "0x1f1fb",
            "0x1f1ee",
            "0x1f1fb",
            "0x1f1f3",
            "0x1f1fb",
            "0x1f1fa",
            "0x1f1fc",
            "0x1f1eb",
            "0x1f1fc",
            "0x1f1f8",
            "0x1f1fd",
            "0x1f1f0",
            "0x1f1fe",
            "0x1f1ea",
            "0x1f1fe",
            "0x1f1f9",
            "0x1f1ff",
            "0x1f1e6",
            "0x1f1ff",
            "0x1f1f2",
            "0x1f1ff",
            "0x1f1fc",
            "0x1f3f4",
            "0xe0067",
            "0xe0062",
            "0xe0065",
            "0xe006e",
            "0xe0067",
            "0xe007f",
            "0x1f3f4",
            "0xe0067",
            "0xe0062",
            "0xe0073",
            "0xe0063",
            "0xe0074",
            "0xe007f",
            "0x1f3f4",
            "0xe0067",
            "0xe0062",
            "0xe0077",
            "0xe006c",
            "0xe0073",
            "0xe007f"
          ]
        }
      };
      var o_hasOwnProperty = Object.prototype.hasOwnProperty;
      var o_keys = Object.keys || function(obj) {
        var result = [];
        for (var key in obj) {
          if (o_hasOwnProperty.call(obj, key)) {
            result.push(key);
          }
        }
        return result;
      };
      function _copyObject(source, target) {
        var keys = o_keys(source);
        var key;
        for (var i2 = 0, l = keys.length; i2 < l; i2++) {
          key = keys[i2];
          target[key] = source[key] || target[key];
        }
      }
      function _copyArray(source, target) {
        for (var i2 = 0, l = source.length; i2 < l; i2++) {
          target[i2] = source[i2];
        }
      }
      function copyObject(source, _target) {
        var isArray = Array.isArray(source);
        var target = _target || (isArray ? new Array(source.length) : {});
        if (isArray) {
          _copyArray(source, target);
        } else {
          _copyObject(source, target);
        }
        return target;
      }
      Chance2.prototype.get = function(name) {
        return copyObject(data[name]);
      };
      Chance2.prototype.mac_address = function(options) {
        options = initOptions(options);
        if (!options.separator) {
          options.separator = options.networkVersion ? "." : ":";
        }
        var mac_pool = "ABCDEF1234567890", mac = "";
        if (!options.networkVersion) {
          mac = this.n(this.string, 6, { pool: mac_pool, length: 2 }).join(options.separator);
        } else {
          mac = this.n(this.string, 3, { pool: mac_pool, length: 4 }).join(options.separator);
        }
        return mac;
      };
      Chance2.prototype.normal = function(options) {
        options = initOptions(options, { mean: 0, dev: 1, pool: [] });
        testRange(
          options.pool.constructor !== Array,
          "Chance: The pool option must be a valid array."
        );
        testRange(
          typeof options.mean !== "number",
          "Chance: Mean (mean) must be a number"
        );
        testRange(
          typeof options.dev !== "number",
          "Chance: Standard deviation (dev) must be a number"
        );
        if (options.pool.length > 0) {
          return this.normal_pool(options);
        }
        var s, u, v, norm, mean = options.mean, dev = options.dev;
        do {
          u = this.random() * 2 - 1;
          v = this.random() * 2 - 1;
          s = u * u + v * v;
        } while (s >= 1);
        norm = u * Math.sqrt(-2 * Math.log(s) / s);
        return dev * norm + mean;
      };
      Chance2.prototype.normal_pool = function(options) {
        var performanceCounter = 0;
        do {
          var idx = Math.round(this.normal({ mean: options.mean, dev: options.dev }));
          if (idx < options.pool.length && idx >= 0) {
            return options.pool[idx];
          } else {
            performanceCounter++;
          }
        } while (performanceCounter < 100);
        throw new RangeError("Chance: Your pool is too small for the given mean and standard deviation. Please adjust.");
      };
      Chance2.prototype.radio = function(options) {
        options = initOptions(options, { side: "?" });
        var fl = "";
        switch (options.side.toLowerCase()) {
          case "east":
          case "e":
            fl = "W";
            break;
          case "west":
          case "w":
            fl = "K";
            break;
          default:
            fl = this.character({ pool: "KW" });
            break;
        }
        return fl + this.character({ alpha: true, casing: "upper" }) + this.character({ alpha: true, casing: "upper" }) + this.character({ alpha: true, casing: "upper" });
      };
      Chance2.prototype.set = function(name, values) {
        if (typeof name === "string") {
          data[name] = values;
        } else {
          data = copyObject(name, data);
        }
      };
      Chance2.prototype.tv = function(options) {
        return this.radio(options);
      };
      Chance2.prototype.cnpj = function() {
        var n = this.n(this.natural, 8, { max: 9 });
        var d1 = 2 + n[7] * 6 + n[6] * 7 + n[5] * 8 + n[4] * 9 + n[3] * 2 + n[2] * 3 + n[1] * 4 + n[0] * 5;
        d1 = 11 - d1 % 11;
        if (d1 >= 10) {
          d1 = 0;
        }
        var d2 = d1 * 2 + 3 + n[7] * 7 + n[6] * 8 + n[5] * 9 + n[4] * 2 + n[3] * 3 + n[2] * 4 + n[1] * 5 + n[0] * 6;
        d2 = 11 - d2 % 11;
        if (d2 >= 10) {
          d2 = 0;
        }
        return "" + n[0] + n[1] + "." + n[2] + n[3] + n[4] + "." + n[5] + n[6] + n[7] + "/0001-" + d1 + d2;
      };
      Chance2.prototype.emotion = function() {
        return this.pick(this.get("emotions"));
      };
      Chance2.prototype.mersenne_twister = function(seed) {
        return new MersenneTwister(seed);
      };
      Chance2.prototype.blueimp_md5 = function() {
        return new BlueImpMD5();
      };
      var MersenneTwister = function(seed) {
        if (seed === void 0) {
          seed = Math.floor(Math.random() * Math.pow(10, 13));
        }
        this.N = 624;
        this.M = 397;
        this.MATRIX_A = 2567483615;
        this.UPPER_MASK = 2147483648;
        this.LOWER_MASK = 2147483647;
        this.mt = new Array(this.N);
        this.mti = this.N + 1;
        this.init_genrand(seed);
      };
      MersenneTwister.prototype.init_genrand = function(s) {
        this.mt[0] = s >>> 0;
        for (this.mti = 1; this.mti < this.N; this.mti++) {
          s = this.mt[this.mti - 1] ^ this.mt[this.mti - 1] >>> 30;
          this.mt[this.mti] = (((s & 4294901760) >>> 16) * 1812433253 << 16) + (s & 65535) * 1812433253 + this.mti;
          this.mt[this.mti] >>>= 0;
        }
      };
      MersenneTwister.prototype.init_by_array = function(init_key, key_length) {
        var i2 = 1, j = 0, k2, s;
        this.init_genrand(19650218);
        k2 = this.N > key_length ? this.N : key_length;
        for (; k2; k2--) {
          s = this.mt[i2 - 1] ^ this.mt[i2 - 1] >>> 30;
          this.mt[i2] = (this.mt[i2] ^ (((s & 4294901760) >>> 16) * 1664525 << 16) + (s & 65535) * 1664525) + init_key[j] + j;
          this.mt[i2] >>>= 0;
          i2++;
          j++;
          if (i2 >= this.N) {
            this.mt[0] = this.mt[this.N - 1];
            i2 = 1;
          }
          if (j >= key_length) {
            j = 0;
          }
        }
        for (k2 = this.N - 1; k2; k2--) {
          s = this.mt[i2 - 1] ^ this.mt[i2 - 1] >>> 30;
          this.mt[i2] = (this.mt[i2] ^ (((s & 4294901760) >>> 16) * 1566083941 << 16) + (s & 65535) * 1566083941) - i2;
          this.mt[i2] >>>= 0;
          i2++;
          if (i2 >= this.N) {
            this.mt[0] = this.mt[this.N - 1];
            i2 = 1;
          }
        }
        this.mt[0] = 2147483648;
      };
      MersenneTwister.prototype.genrand_int32 = function() {
        var y;
        var mag01 = new Array(0, this.MATRIX_A);
        if (this.mti >= this.N) {
          var kk;
          if (this.mti === this.N + 1) {
            this.init_genrand(5489);
          }
          for (kk = 0; kk < this.N - this.M; kk++) {
            y = this.mt[kk] & this.UPPER_MASK | this.mt[kk + 1] & this.LOWER_MASK;
            this.mt[kk] = this.mt[kk + this.M] ^ y >>> 1 ^ mag01[y & 1];
          }
          for (; kk < this.N - 1; kk++) {
            y = this.mt[kk] & this.UPPER_MASK | this.mt[kk + 1] & this.LOWER_MASK;
            this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ y >>> 1 ^ mag01[y & 1];
          }
          y = this.mt[this.N - 1] & this.UPPER_MASK | this.mt[0] & this.LOWER_MASK;
          this.mt[this.N - 1] = this.mt[this.M - 1] ^ y >>> 1 ^ mag01[y & 1];
          this.mti = 0;
        }
        y = this.mt[this.mti++];
        y ^= y >>> 11;
        y ^= y << 7 & 2636928640;
        y ^= y << 15 & 4022730752;
        y ^= y >>> 18;
        return y >>> 0;
      };
      MersenneTwister.prototype.genrand_int31 = function() {
        return this.genrand_int32() >>> 1;
      };
      MersenneTwister.prototype.genrand_real1 = function() {
        return this.genrand_int32() * (1 / 4294967295);
      };
      MersenneTwister.prototype.random = function() {
        return this.genrand_int32() * (1 / 4294967296);
      };
      MersenneTwister.prototype.genrand_real3 = function() {
        return (this.genrand_int32() + 0.5) * (1 / 4294967296);
      };
      MersenneTwister.prototype.genrand_res53 = function() {
        var a = this.genrand_int32() >>> 5, b = this.genrand_int32() >>> 6;
        return (a * 67108864 + b) * (1 / 9007199254740992);
      };
      var BlueImpMD5 = function() {
      };
      BlueImpMD5.prototype.VERSION = "1.0.1";
      BlueImpMD5.prototype.safe_add = function safe_add(x, y) {
        var lsw = (x & 65535) + (y & 65535), msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return msw << 16 | lsw & 65535;
      };
      BlueImpMD5.prototype.bit_roll = function(num, cnt) {
        return num << cnt | num >>> 32 - cnt;
      };
      BlueImpMD5.prototype.md5_cmn = function(q, a, b, x, s, t) {
        return this.safe_add(this.bit_roll(this.safe_add(this.safe_add(a, q), this.safe_add(x, t)), s), b);
      };
      BlueImpMD5.prototype.md5_ff = function(a, b, c, d, x, s, t) {
        return this.md5_cmn(b & c | ~b & d, a, b, x, s, t);
      };
      BlueImpMD5.prototype.md5_gg = function(a, b, c, d, x, s, t) {
        return this.md5_cmn(b & d | c & ~d, a, b, x, s, t);
      };
      BlueImpMD5.prototype.md5_hh = function(a, b, c, d, x, s, t) {
        return this.md5_cmn(b ^ c ^ d, a, b, x, s, t);
      };
      BlueImpMD5.prototype.md5_ii = function(a, b, c, d, x, s, t) {
        return this.md5_cmn(c ^ (b | ~d), a, b, x, s, t);
      };
      BlueImpMD5.prototype.binl_md5 = function(x, len) {
        x[len >> 5] |= 128 << len % 32;
        x[(len + 64 >>> 9 << 4) + 14] = len;
        var i2, olda, oldb, oldc, oldd, a = 1732584193, b = -271733879, c = -1732584194, d = 271733878;
        for (i2 = 0; i2 < x.length; i2 += 16) {
          olda = a;
          oldb = b;
          oldc = c;
          oldd = d;
          a = this.md5_ff(a, b, c, d, x[i2], 7, -680876936);
          d = this.md5_ff(d, a, b, c, x[i2 + 1], 12, -389564586);
          c = this.md5_ff(c, d, a, b, x[i2 + 2], 17, 606105819);
          b = this.md5_ff(b, c, d, a, x[i2 + 3], 22, -1044525330);
          a = this.md5_ff(a, b, c, d, x[i2 + 4], 7, -176418897);
          d = this.md5_ff(d, a, b, c, x[i2 + 5], 12, 1200080426);
          c = this.md5_ff(c, d, a, b, x[i2 + 6], 17, -1473231341);
          b = this.md5_ff(b, c, d, a, x[i2 + 7], 22, -45705983);
          a = this.md5_ff(a, b, c, d, x[i2 + 8], 7, 1770035416);
          d = this.md5_ff(d, a, b, c, x[i2 + 9], 12, -1958414417);
          c = this.md5_ff(c, d, a, b, x[i2 + 10], 17, -42063);
          b = this.md5_ff(b, c, d, a, x[i2 + 11], 22, -1990404162);
          a = this.md5_ff(a, b, c, d, x[i2 + 12], 7, 1804603682);
          d = this.md5_ff(d, a, b, c, x[i2 + 13], 12, -40341101);
          c = this.md5_ff(c, d, a, b, x[i2 + 14], 17, -1502002290);
          b = this.md5_ff(b, c, d, a, x[i2 + 15], 22, 1236535329);
          a = this.md5_gg(a, b, c, d, x[i2 + 1], 5, -165796510);
          d = this.md5_gg(d, a, b, c, x[i2 + 6], 9, -1069501632);
          c = this.md5_gg(c, d, a, b, x[i2 + 11], 14, 643717713);
          b = this.md5_gg(b, c, d, a, x[i2], 20, -373897302);
          a = this.md5_gg(a, b, c, d, x[i2 + 5], 5, -701558691);
          d = this.md5_gg(d, a, b, c, x[i2 + 10], 9, 38016083);
          c = this.md5_gg(c, d, a, b, x[i2 + 15], 14, -660478335);
          b = this.md5_gg(b, c, d, a, x[i2 + 4], 20, -405537848);
          a = this.md5_gg(a, b, c, d, x[i2 + 9], 5, 568446438);
          d = this.md5_gg(d, a, b, c, x[i2 + 14], 9, -1019803690);
          c = this.md5_gg(c, d, a, b, x[i2 + 3], 14, -187363961);
          b = this.md5_gg(b, c, d, a, x[i2 + 8], 20, 1163531501);
          a = this.md5_gg(a, b, c, d, x[i2 + 13], 5, -1444681467);
          d = this.md5_gg(d, a, b, c, x[i2 + 2], 9, -51403784);
          c = this.md5_gg(c, d, a, b, x[i2 + 7], 14, 1735328473);
          b = this.md5_gg(b, c, d, a, x[i2 + 12], 20, -1926607734);
          a = this.md5_hh(a, b, c, d, x[i2 + 5], 4, -378558);
          d = this.md5_hh(d, a, b, c, x[i2 + 8], 11, -2022574463);
          c = this.md5_hh(c, d, a, b, x[i2 + 11], 16, 1839030562);
          b = this.md5_hh(b, c, d, a, x[i2 + 14], 23, -35309556);
          a = this.md5_hh(a, b, c, d, x[i2 + 1], 4, -1530992060);
          d = this.md5_hh(d, a, b, c, x[i2 + 4], 11, 1272893353);
          c = this.md5_hh(c, d, a, b, x[i2 + 7], 16, -155497632);
          b = this.md5_hh(b, c, d, a, x[i2 + 10], 23, -1094730640);
          a = this.md5_hh(a, b, c, d, x[i2 + 13], 4, 681279174);
          d = this.md5_hh(d, a, b, c, x[i2], 11, -358537222);
          c = this.md5_hh(c, d, a, b, x[i2 + 3], 16, -722521979);
          b = this.md5_hh(b, c, d, a, x[i2 + 6], 23, 76029189);
          a = this.md5_hh(a, b, c, d, x[i2 + 9], 4, -640364487);
          d = this.md5_hh(d, a, b, c, x[i2 + 12], 11, -421815835);
          c = this.md5_hh(c, d, a, b, x[i2 + 15], 16, 530742520);
          b = this.md5_hh(b, c, d, a, x[i2 + 2], 23, -995338651);
          a = this.md5_ii(a, b, c, d, x[i2], 6, -198630844);
          d = this.md5_ii(d, a, b, c, x[i2 + 7], 10, 1126891415);
          c = this.md5_ii(c, d, a, b, x[i2 + 14], 15, -1416354905);
          b = this.md5_ii(b, c, d, a, x[i2 + 5], 21, -57434055);
          a = this.md5_ii(a, b, c, d, x[i2 + 12], 6, 1700485571);
          d = this.md5_ii(d, a, b, c, x[i2 + 3], 10, -1894986606);
          c = this.md5_ii(c, d, a, b, x[i2 + 10], 15, -1051523);
          b = this.md5_ii(b, c, d, a, x[i2 + 1], 21, -2054922799);
          a = this.md5_ii(a, b, c, d, x[i2 + 8], 6, 1873313359);
          d = this.md5_ii(d, a, b, c, x[i2 + 15], 10, -30611744);
          c = this.md5_ii(c, d, a, b, x[i2 + 6], 15, -1560198380);
          b = this.md5_ii(b, c, d, a, x[i2 + 13], 21, 1309151649);
          a = this.md5_ii(a, b, c, d, x[i2 + 4], 6, -145523070);
          d = this.md5_ii(d, a, b, c, x[i2 + 11], 10, -1120210379);
          c = this.md5_ii(c, d, a, b, x[i2 + 2], 15, 718787259);
          b = this.md5_ii(b, c, d, a, x[i2 + 9], 21, -343485551);
          a = this.safe_add(a, olda);
          b = this.safe_add(b, oldb);
          c = this.safe_add(c, oldc);
          d = this.safe_add(d, oldd);
        }
        return [a, b, c, d];
      };
      BlueImpMD5.prototype.binl2rstr = function(input) {
        var i2, output = "";
        for (i2 = 0; i2 < input.length * 32; i2 += 8) {
          output += String.fromCharCode(input[i2 >> 5] >>> i2 % 32 & 255);
        }
        return output;
      };
      BlueImpMD5.prototype.rstr2binl = function(input) {
        var i2, output = [];
        output[(input.length >> 2) - 1] = void 0;
        for (i2 = 0; i2 < output.length; i2 += 1) {
          output[i2] = 0;
        }
        for (i2 = 0; i2 < input.length * 8; i2 += 8) {
          output[i2 >> 5] |= (input.charCodeAt(i2 / 8) & 255) << i2 % 32;
        }
        return output;
      };
      BlueImpMD5.prototype.rstr_md5 = function(s) {
        return this.binl2rstr(this.binl_md5(this.rstr2binl(s), s.length * 8));
      };
      BlueImpMD5.prototype.rstr_hmac_md5 = function(key, data2) {
        var i2, bkey = this.rstr2binl(key), ipad = [], opad = [], hash;
        ipad[15] = opad[15] = void 0;
        if (bkey.length > 16) {
          bkey = this.binl_md5(bkey, key.length * 8);
        }
        for (i2 = 0; i2 < 16; i2 += 1) {
          ipad[i2] = bkey[i2] ^ 909522486;
          opad[i2] = bkey[i2] ^ 1549556828;
        }
        hash = this.binl_md5(ipad.concat(this.rstr2binl(data2)), 512 + data2.length * 8);
        return this.binl2rstr(this.binl_md5(opad.concat(hash), 512 + 128));
      };
      BlueImpMD5.prototype.rstr2hex = function(input) {
        var hex_tab = "0123456789abcdef", output = "", x, i2;
        for (i2 = 0; i2 < input.length; i2 += 1) {
          x = input.charCodeAt(i2);
          output += hex_tab.charAt(x >>> 4 & 15) + hex_tab.charAt(x & 15);
        }
        return output;
      };
      BlueImpMD5.prototype.str2rstr_utf8 = function(input) {
        return unescape(encodeURIComponent(input));
      };
      BlueImpMD5.prototype.raw_md5 = function(s) {
        return this.rstr_md5(this.str2rstr_utf8(s));
      };
      BlueImpMD5.prototype.hex_md5 = function(s) {
        return this.rstr2hex(this.raw_md5(s));
      };
      BlueImpMD5.prototype.raw_hmac_md5 = function(k2, d) {
        return this.rstr_hmac_md5(this.str2rstr_utf8(k2), this.str2rstr_utf8(d));
      };
      BlueImpMD5.prototype.hex_hmac_md5 = function(k2, d) {
        return this.rstr2hex(this.raw_hmac_md5(k2, d));
      };
      BlueImpMD5.prototype.md5 = function(string, key, raw) {
        if (!key) {
          if (!raw) {
            return this.hex_md5(string);
          }
          return this.raw_md5(string);
        }
        if (!raw) {
          return this.hex_hmac_md5(key, string);
        }
        return this.raw_hmac_md5(key, string);
      };
      if (typeof exports !== "undefined") {
        if (typeof module !== "undefined" && module.exports) {
          exports = module.exports = Chance2;
        }
        exports.Chance = Chance2;
      }
      if (typeof define === "function" && define.amd) {
        define([], function() {
          return Chance2;
        });
      }
      if (typeof importScripts !== "undefined") {
        chance = new Chance2();
        self.Chance = Chance2;
      }
      if (typeof window === "object" && typeof window.document === "object") {
        window.Chance = Chance2;
        window.chance = new Chance2();
      }
    })();
  }
});

// node_modules/@mui/x-data-grid-generator/renderer/renderAvatar.js
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
function renderAvatar(params) {
  if (params.value == null) {
    return "";
  }
  return (0, import_jsx_runtime.jsx)(Avatar_default, {
    style: {
      backgroundColor: params.value.color
    },
    children: params.value.name.toUpperCase().substring(0, 1)
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderCountry.js
var React2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var Country = React2.memo(function Country2(props) {
  const {
    value
  } = props;
  return (0, import_jsx_runtime2.jsxs)(Box_default, {
    sx: {
      width: "100%",
      display: "flex",
      alignItems: "center",
      "&  > img": {
        mr: 0.5,
        flexShrink: 0,
        width: "20px"
      }
    },
    children: [(0, import_jsx_runtime2.jsx)("img", {
      loading: "lazy",
      width: "20",
      src: `https://flagcdn.com/w20/${value.code.toLowerCase()}.png`,
      srcSet: `https://flagcdn.com/w40/${value.code.toLowerCase()}.png 2x`,
      alt: ""
    }), (0, import_jsx_runtime2.jsx)(Box_default, {
      component: "span",
      sx: {
        overflow: "hidden",
        textOverflow: "ellipsis"
      },
      children: value.label
    })]
  });
});
function renderCountry(params) {
  if (params.value == null) {
    return "";
  }
  if (params.aggregation && !params.aggregation.hasCellUnit) {
    return null;
  }
  return (0, import_jsx_runtime2.jsx)(Country, {
    value: params.value
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEmail.js
var React4 = __toESM(require_react());

// node_modules/@mui/x-data-grid-generator/renderer/renderLink.js
var React3 = __toESM(require_react());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var Link = styled_default2("a")({
  textOverflow: "ellipsis",
  whiteSpace: "nowrap",
  overflow: "hidden",
  color: "inherit"
});
var DemoLink = React3.memo(function DemoLink2(props) {
  const handleClick = (event) => {
    event.preventDefault();
    event.stopPropagation();
  };
  return (0, import_jsx_runtime3.jsx)(Link, {
    tabIndex: props.tabIndex,
    onClick: handleClick,
    href: props.href,
    children: props.children
  });
});
function renderLink(params) {
  if (params.value == null) {
    return "";
  }
  return (0, import_jsx_runtime3.jsx)(DemoLink, {
    href: params.value,
    tabIndex: params.tabIndex,
    children: params.value
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEmail.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
function renderEmail(params) {
  const email = params.value ?? "";
  return (0, import_jsx_runtime4.jsx)(DemoLink, {
    href: `mailto:${email}`,
    tabIndex: params.tabIndex,
    children: email
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderIncoterm.js
var React5 = __toESM(require_react());
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var Incoterm = React5.memo(function Incoterm2(props) {
  const {
    value
  } = props;
  if (!value) {
    return null;
  }
  const valueStr = value.toString();
  const tooltip = valueStr.slice(valueStr.indexOf("(") + 1, valueStr.indexOf(")"));
  const code = valueStr.slice(0, valueStr.indexOf("(")).trim();
  return (0, import_jsx_runtime5.jsxs)(Box_default, {
    sx: {
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between"
    },
    children: [(0, import_jsx_runtime5.jsx)("span", {
      children: code
    }), (0, import_jsx_runtime5.jsx)(Tooltip_default, {
      title: tooltip,
      children: (0, import_jsx_runtime5.jsx)(Info_default, {
        sx: {
          color: "#2196f3",
          alignSelf: "center",
          ml: "8px"
        }
      })
    })]
  });
});
function renderIncoterm(params) {
  return (0, import_jsx_runtime5.jsx)(Incoterm, {
    value: params.value
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderPnl.js
var React6 = __toESM(require_react());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var Value = styled_default2("div")(({
  theme
}) => ({
  width: "100%",
  fontVariantNumeric: "tabular-nums",
  "&.positive": _extends({
    color: theme.palette.success.light
  }, theme.applyStyles("light", {
    color: theme.palette.success.dark
  })),
  "&.negative": _extends({
    color: theme.palette.error.light
  }, theme.applyStyles("light", {
    color: theme.palette.error.dark
  }))
}));
function pnlFormatter(value) {
  return value < 0 ? `(${Math.abs(value).toLocaleString()})` : value.toLocaleString();
}
var Pnl = React6.memo(function Pnl2(props) {
  const {
    value
  } = props;
  return (0, import_jsx_runtime6.jsx)(Value, {
    className: clsx_default(value > 0 && "positive", value < 0 && "negative"),
    children: pnlFormatter(value)
  });
});
function renderPnl(params) {
  if (params.value == null) {
    return "";
  }
  return (0, import_jsx_runtime6.jsx)(Pnl, {
    value: params.value
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderProgress.js
var React7 = __toESM(require_react());
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var Center = styled_default2("div")({
  height: "100%",
  display: "flex",
  alignItems: "center"
});
var Element = styled_default2("div")(({
  theme
}) => ({
  border: `1px solid ${(theme.vars || theme).palette.divider}`,
  position: "relative",
  overflow: "hidden",
  width: "100%",
  height: 26,
  borderRadius: 2
}));
var Value2 = styled_default2("div")({
  position: "absolute",
  lineHeight: "24px",
  width: "100%",
  display: "flex",
  justifyContent: "center"
});
var Bar = styled_default2("div")({
  height: "100%",
  "&.low": {
    backgroundColor: "#f44336"
  },
  "&.medium": {
    backgroundColor: "#efbb5aa3"
  },
  "&.high": {
    backgroundColor: "#088208a3"
  }
});
var ProgressBar = React7.memo(function ProgressBar2(props) {
  const {
    value
  } = props;
  const valueInPercent = value * 100;
  return (0, import_jsx_runtime7.jsxs)(Element, {
    children: [(0, import_jsx_runtime7.jsx)(Value2, {
      children: `${valueInPercent.toLocaleString()} %`
    }), (0, import_jsx_runtime7.jsx)(Bar, {
      className: clsx_default(valueInPercent < 30 && "low", valueInPercent >= 30 && valueInPercent <= 70 && "medium", valueInPercent > 70 && "high"),
      style: {
        maxWidth: `${valueInPercent}%`
      }
    })]
  });
});
function renderProgress(params) {
  if (params.value == null) {
    return "";
  }
  if (params.aggregation && !params.aggregation.hasCellUnit) {
    return null;
  }
  return (0, import_jsx_runtime7.jsx)(Center, {
    children: (0, import_jsx_runtime7.jsx)(ProgressBar, {
      value: params.value
    })
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderRating.js
var React8 = __toESM(require_react());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var RatingValue = React8.memo(function RatingValue2(props) {
  const {
    value
  } = props;
  return (0, import_jsx_runtime8.jsxs)(Box_default, {
    sx: {
      display: "flex",
      alignItems: "center",
      lineHeight: "24px",
      color: "text.secondary"
    },
    children: [(0, import_jsx_runtime8.jsx)(Rating_default, {
      value,
      sx: {
        mr: 1
      },
      readOnly: true
    }), " ", Math.round(Number(value) * 10) / 10]
  });
});
function renderRating(params) {
  if (params.value == null) {
    return "";
  }
  if (params.aggregation && !params.aggregation.hasCellUnit) {
    return null;
  }
  return (0, import_jsx_runtime8.jsx)(RatingValue, {
    value: params.value
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderStatus.js
var React9 = __toESM(require_react());
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var StyledChip = styled_default2(Chip_default)(({
  theme
}) => ({
  justifyContent: "left",
  "& .icon": {
    color: "inherit"
  },
  "&.Open": {
    color: (theme.vars || theme).palette.info.dark,
    border: `1px solid ${(theme.vars || theme).palette.info.main}`
  },
  "&.Filled": {
    color: (theme.vars || theme).palette.success.dark,
    border: `1px solid ${(theme.vars || theme).palette.success.main}`
  },
  "&.PartiallyFilled": {
    color: (theme.vars || theme).palette.warning.dark,
    border: `1px solid ${(theme.vars || theme).palette.warning.main}`
  },
  "&.Rejected": {
    color: (theme.vars || theme).palette.error.dark,
    border: `1px solid ${(theme.vars || theme).palette.error.main}`
  }
}));
var Status = React9.memo((props) => {
  const {
    status
  } = props;
  let icon = null;
  if (status === "Rejected") {
    icon = (0, import_jsx_runtime9.jsx)(ReportProblem_default, {
      className: "icon"
    });
  } else if (status === "Open") {
    icon = (0, import_jsx_runtime9.jsx)(Info_default, {
      className: "icon"
    });
  } else if (status === "PartiallyFilled") {
    icon = (0, import_jsx_runtime9.jsx)(Autorenew_default, {
      className: "icon"
    });
  } else if (status === "Filled") {
    icon = (0, import_jsx_runtime9.jsx)(Done_default, {
      className: "icon"
    });
  }
  let label = status;
  if (status === "PartiallyFilled") {
    label = "Partially Filled";
  }
  return (0, import_jsx_runtime9.jsx)(StyledChip, {
    className: status,
    icon,
    size: "small",
    label,
    variant: "outlined"
  });
});
function renderStatus(params) {
  if (params.value == null) {
    return "";
  }
  return (0, import_jsx_runtime9.jsx)(Status, {
    status: params.value
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderTotalPrice.js
var React10 = __toESM(require_react());
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var Value3 = styled_default2("div")(({
  theme
}) => ({
  width: "100%",
  height: "100%",
  lineHeight: "100%",
  paddingRight: 8,
  fontVariantNumeric: "tabular-nums",
  display: "flex",
  alignItems: "center",
  justifyContent: "flex-end",
  "&.good": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.success.mainChannel} /  0.3)` : alpha(theme.palette.success.main, 0.3)
  },
  "&.bad": {
    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.error.mainChannel} /  0.3)` : alpha(theme.palette.error.main, 0.3)
  }
}));
var currencyFormatter = new Intl.NumberFormat("en-US", {
  style: "currency",
  currency: "USD"
});
var TotalPrice = React10.memo(function TotalPrice2(props) {
  const {
    value
  } = props;
  return (0, import_jsx_runtime10.jsx)(Value3, {
    className: clsx_default(value > 1e6 && "good", value < 1e6 && "bad"),
    children: currencyFormatter.format(value)
  });
});
function renderTotalPrice(params) {
  if (params.value == null) {
    return "";
  }
  if (params.aggregation && !params.aggregation.hasCellUnit) {
    return null;
  }
  return (0, import_jsx_runtime10.jsx)(TotalPrice, {
    value: params.value
  });
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEditCurrency.js
var React78 = __toESM(require_react());

// node_modules/@mui/x-license/encoding/md5.js
var k = [];
var i = 0;
for (; i < 64; ) {
  k[i] = 0 | Math.sin(++i % Math.PI) * 4294967296;
}
function md5(s) {
  const words = [];
  let b, c, d, j = unescape(encodeURI(s)) + "", a = j.length;
  const h = [b = 1732584193, c = 4023233417, ~b, ~c];
  s = --a / 4 + 2 | 15;
  words[--s] = a * 8;
  for (; ~a; ) {
    words[a >> 2] |= j.charCodeAt(a) << 8 * a--;
  }
  for (i = j = 0; i < s; i += 16) {
    a = h;
    for (; j < 64; a = [d = a[3], b + ((d = a[0] + [b & c | ~b & d, d & b | ~d & c, b ^ c ^ d, c ^ (b | ~d)][a = j >> 4] + k[j] + ~~words[i | [j, 5 * j + 1, 3 * j + 5, 7 * j][a] & 15]) << (a = [7, 12, 17, 22, 5, 9, 14, 20, 4, 11, 16, 23, 6, 10, 15, 21][4 * a + j++ % 4]) | d >>> -a), b, c]) {
      b = a[1] | 0;
      c = a[2];
    }
    for (j = 4; j; ) h[--j] += a[j];
  }
  for (s = ""; j < 32; ) {
    s += (h[j >> 3] >> (1 ^ j++) * 4 & 15).toString(16);
  }
  return s;
}

// node_modules/@mui/x-license/encoding/base64.js
var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var base64Decode = (input) => {
  let output = "";
  let chr1, chr2, chr3;
  let enc1, enc2, enc3, enc4;
  let i2 = 0;
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
  while (i2 < input.length) {
    enc1 = _keyStr.indexOf(input.charAt(i2++));
    enc2 = _keyStr.indexOf(input.charAt(i2++));
    enc3 = _keyStr.indexOf(input.charAt(i2++));
    enc4 = _keyStr.indexOf(input.charAt(i2++));
    chr1 = enc1 << 2 | enc2 >> 4;
    chr2 = (enc2 & 15) << 4 | enc3 >> 2;
    chr3 = (enc3 & 3) << 6 | enc4;
    output = output + String.fromCharCode(chr1);
    if (enc3 != 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 != 64) {
      output = output + String.fromCharCode(chr3);
    }
  }
  return output;
};

// node_modules/@mui/x-license/utils/plan.js
var PLAN_SCOPES = ["pro", "premium"];

// node_modules/@mui/x-license/utils/licenseModel.js
var LICENSE_MODELS = [
  /**
   * A license is outdated if the current version of the software was released after the expiry date of the license.
   * But the license can be used indefinitely with an older version of the software.
   */
  "perpetual",
  /**
   * On development, a license is outdated if the expiry date has been reached
   * On production, a license is outdated if the current version of the software was released after the expiry date of the license (see "perpetual")
   */
  "annual",
  /**
   * Legacy. The previous name for 'annual'.
   * Can be removed once old license keys generated with 'subscription' are no longer supported.
   * To support for a while. We need more years of backward support and we sell multi year licenses.
   */
  "subscription"
];

// node_modules/@mui/x-license/utils/licenseErrorMessageUtils.js
var isCodeSandbox = typeof window !== "undefined" && window.location.hostname.endsWith(".csb.app");
function showError(message) {
  const logger = isCodeSandbox ? console.log : console.error;
  logger(["*************************************************************", "", ...message, "", "*************************************************************"].join("\n"));
}
function showInvalidLicenseKeyError() {
  showError(["MUI X: Invalid license key.", "", "Your MUI X license key format isn't valid. It could be because the license key is missing a character or has a typo.", "", "To solve the issue, you need to double check that `setLicenseKey()` is called with the right argument", "Please check the license key installation https://mui.com/r/x-license-key-installation."]);
}
function showLicenseKeyPlanMismatchError() {
  showError(["MUI X: License key plan mismatch.", "", "Your use of MUI X is not compatible with the plan of your license key. The feature you are trying to use is not included in the plan of your license key. This happens if you try to use Data Grid Premium with a license key for the Pro plan.", "", "To solve the issue, you can upgrade your plan from Pro to Premium at https://mui.com/r/x-get-license?scope=premium.", "Of if you didn't intend to use Premium features, you can replace the import of `@mui/x-data-grid-premium` with `@mui/x-data-grid-pro`."]);
}
function showNotAvailableInInitialProPlanError() {
  showError(["MUI X: Component not included in your license.", "", "The component you are trying to use is not included in the Pro Plan you purchased.", "", "Your license is from an old version of the Pro Plan that is only compatible with the `@mui/x-data-grid-pro` and `@mui/x-date-pickers-pro` commercial packages.", "", "To start using another Pro package, please consider reaching to our sales team to upgrade your license or visit https://mui.com/r/x-get-license to get a new license key."]);
}
function showMissingLicenseKeyError({
  plan,
  packageName
}) {
  showError(["MUI X: Missing license key.", "", `The license key is missing. You might not be allowed to use \`${packageName}\` which is part of MUI X ${plan}.`, "", "To solve the issue, you can check the free trial conditions: https://mui.com/r/x-license-trial.", "If you are eligible no actions are required. If you are not eligible to the free trial, you need to purchase a license https://mui.com/r/x-get-license or stop using the software immediately."]);
}
function showExpiredPackageVersionError({
  packageName
}) {
  showError(["MUI X: Expired package version.", "", `You have installed a version of \`${packageName}\` that is outside of the maintenance plan of your license key. By default, commercial licenses provide access to new versions released during the first year after the purchase.`, "", "To solve the issue, you can renew your license https://mui.com/r/x-get-license or install an older version of the npm package that is compatible with your license key."]);
}
function showExpiredAnnualGraceLicenseKeyError({
  plan,
  licenseKey,
  expiryTimestamp
}) {
  showError(["MUI X: Expired license key.", "", `Your annual license key to use MUI X ${plan} in non-production environments has expired. If you are seeing this development console message, you might be close to breach the license terms by making direct or indirect changes to the frontend of an app that render a MUI X ${plan} component (more details in https://mui.com/r/x-license-annual).`, "", "To solve the problem you can either:", "", "- Renew your license https://mui.com/r/x-get-license and use the new key", `- Stop making changes to code depending directly or indirectly on MUI X ${plan}'s APIs`, "", "Note that your license is perpetual in production environments with any version released before your license term ends.", "", `- License key expiry timestamp: ${new Date(expiryTimestamp)}`, `- Installed license key: ${licenseKey}`, ""]);
}
function showExpiredAnnualLicenseKeyError({
  plan,
  licenseKey,
  expiryTimestamp
}) {
  throw new Error(["MUI X: Expired license key.", "", `Your annual license key to use MUI X ${plan} in non-production environments has expired. If you are seeing this development console message, you might be close to breach the license terms by making direct or indirect changes to the frontend of an app that render a MUI X ${plan} component (more details in https://mui.com/r/x-license-annual).`, "", "To solve the problem you can either:", "", "- Renew your license https://mui.com/r/x-get-license and use the new key", `- Stop making changes to code depending directly or indirectly on MUI X ${plan}'s APIs`, "", "Note that your license is perpetual in production environments with any version released before your license term ends.", "", `- License key expiry timestamp: ${new Date(expiryTimestamp)}`, `- Installed license key: ${licenseKey}`, ""].join("\n"));
}

// node_modules/@mui/x-license/utils/licenseInfo.js
ponyfillGlobal_default.__MUI_LICENSE_INFO__ = ponyfillGlobal_default.__MUI_LICENSE_INFO__ || {
  key: void 0
};
var LicenseInfo = class _LicenseInfo {
  static getLicenseInfo() {
    return ponyfillGlobal_default.__MUI_LICENSE_INFO__;
  }
  static getLicenseKey() {
    return _LicenseInfo.getLicenseInfo().key;
  }
  static setLicenseKey(key) {
    const licenseInfo = _LicenseInfo.getLicenseInfo();
    licenseInfo.key = key;
  }
};

// node_modules/@mui/x-license/utils/licenseStatus.js
var LICENSE_STATUS = function(LICENSE_STATUS2) {
  LICENSE_STATUS2["NotFound"] = "NotFound";
  LICENSE_STATUS2["Invalid"] = "Invalid";
  LICENSE_STATUS2["ExpiredAnnual"] = "ExpiredAnnual";
  LICENSE_STATUS2["ExpiredAnnualGrace"] = "ExpiredAnnualGrace";
  LICENSE_STATUS2["ExpiredVersion"] = "ExpiredVersion";
  LICENSE_STATUS2["Valid"] = "Valid";
  LICENSE_STATUS2["OutOfScope"] = "OutOfScope";
  LICENSE_STATUS2["NotAvailableInInitialProPlan"] = "NotAvailableInInitialProPlan";
  return LICENSE_STATUS2;
}({});

// node_modules/@mui/x-license/verifyLicense/verifyLicense.js
function isPlanScopeSufficient(packageName, planScope) {
  let acceptedScopes;
  if (packageName.includes("-pro")) {
    acceptedScopes = ["pro", "premium"];
  } else if (packageName.includes("-premium")) {
    acceptedScopes = ["premium"];
  } else {
    acceptedScopes = [];
  }
  return acceptedScopes.includes(planScope);
}
var expiryReg = /^.*EXPIRY=([0-9]+),.*$/;
var PRO_PACKAGES_AVAILABLE_IN_INITIAL_PRO_PLAN = ["x-data-grid-pro", "x-date-pickers-pro"];
var decodeLicenseVersion1 = (license) => {
  let expiryTimestamp;
  try {
    expiryTimestamp = parseInt(license.match(expiryReg)[1], 10);
    if (!expiryTimestamp || Number.isNaN(expiryTimestamp)) {
      expiryTimestamp = null;
    }
  } catch (err) {
    expiryTimestamp = null;
  }
  return {
    planScope: "pro",
    licenseModel: "perpetual",
    expiryTimestamp,
    planVersion: "initial"
  };
};
var decodeLicenseVersion2 = (license) => {
  const licenseInfo = {
    planScope: null,
    licenseModel: null,
    expiryTimestamp: null,
    planVersion: "initial"
  };
  license.split(",").map((token) => token.split("=")).filter((el) => el.length === 2).forEach(([key, value]) => {
    if (key === "S") {
      licenseInfo.planScope = value;
    }
    if (key === "LM") {
      licenseInfo.licenseModel = value;
    }
    if (key === "E") {
      const expiryTimestamp = parseInt(value, 10);
      if (expiryTimestamp && !Number.isNaN(expiryTimestamp)) {
        licenseInfo.expiryTimestamp = expiryTimestamp;
      }
    }
    if (key === "PV") {
      licenseInfo.planVersion = value;
    }
  });
  return licenseInfo;
};
var decodeLicense = (encodedLicense) => {
  const license = base64Decode(encodedLicense);
  if (license.includes("KEYVERSION=1")) {
    return decodeLicenseVersion1(license);
  }
  if (license.includes("KV=2")) {
    return decodeLicenseVersion2(license);
  }
  return null;
};
function verifyLicense({
  releaseInfo: releaseInfo3,
  licenseKey,
  packageName
}) {
  if (!releaseInfo3) {
    throw new Error("MUI X: The release information is missing. Not able to validate license.");
  }
  if (!licenseKey) {
    return {
      status: LICENSE_STATUS.NotFound
    };
  }
  const hash = licenseKey.substr(0, 32);
  const encoded = licenseKey.substr(32);
  if (hash !== md5(encoded)) {
    return {
      status: LICENSE_STATUS.Invalid
    };
  }
  const license = decodeLicense(encoded);
  if (license == null) {
    console.error("MUI X: Error checking license. Key version not found!");
    return {
      status: LICENSE_STATUS.Invalid
    };
  }
  if (license.licenseModel == null || !LICENSE_MODELS.includes(license.licenseModel)) {
    console.error("MUI X: Error checking license. Licensing model not found or invalid!");
    return {
      status: LICENSE_STATUS.Invalid
    };
  }
  if (license.expiryTimestamp == null) {
    console.error("MUI X: Error checking license. Expiry timestamp not found or invalid!");
    return {
      status: LICENSE_STATUS.Invalid
    };
  }
  if (license.licenseModel === "perpetual" || false) {
    const pkgTimestamp = parseInt(base64Decode(releaseInfo3), 10);
    if (Number.isNaN(pkgTimestamp)) {
      throw new Error("MUI X: The release information is invalid. Not able to validate license.");
    }
    if (license.expiryTimestamp < pkgTimestamp) {
      return {
        status: LICENSE_STATUS.ExpiredVersion
      };
    }
  } else if (license.licenseModel === "subscription" || license.licenseModel === "annual") {
    if ((/* @__PURE__ */ new Date()).getTime() > license.expiryTimestamp) {
      if (
        // 30 days grace
        (/* @__PURE__ */ new Date()).getTime() < license.expiryTimestamp + 1e3 * 3600 * 24 * 30 || false
      ) {
        return {
          status: LICENSE_STATUS.ExpiredAnnualGrace,
          meta: {
            expiryTimestamp: license.expiryTimestamp,
            licenseKey
          }
        };
      }
      return {
        status: LICENSE_STATUS.ExpiredAnnual,
        meta: {
          expiryTimestamp: license.expiryTimestamp,
          licenseKey
        }
      };
    }
  }
  if (license.planScope == null || !PLAN_SCOPES.includes(license.planScope)) {
    console.error("MUI X: Error checking license. planScope not found or invalid!");
    return {
      status: LICENSE_STATUS.Invalid
    };
  }
  if (!isPlanScopeSufficient(packageName, license.planScope)) {
    return {
      status: LICENSE_STATUS.OutOfScope
    };
  }
  if (license.planVersion === "initial" && license.planScope === "pro" && !PRO_PACKAGES_AVAILABLE_IN_INITIAL_PRO_PLAN.includes(packageName)) {
    return {
      status: LICENSE_STATUS.NotAvailableInInitialProPlan
    };
  }
  return {
    status: LICENSE_STATUS.Valid
  };
}

// node_modules/@mui/x-license/useLicenseVerifier/useLicenseVerifier.js
var React12 = __toESM(require_react());

// node_modules/@mui/x-license/Unstable_LicenseInfoProvider/MuiLicenseInfoContext.js
var React11 = __toESM(require_react());
var MuiLicenseInfoContext = React11.createContext({
  key: void 0
});
if (true) {
  MuiLicenseInfoContext.displayName = "MuiLicenseInfoContext";
}
var MuiLicenseInfoContext_default = MuiLicenseInfoContext;

// node_modules/@mui/x-license/useLicenseVerifier/useLicenseVerifier.js
var sharedLicenseStatuses = {};
function useLicenseVerifier(packageName, releaseInfo3) {
  const {
    key: contextKey
  } = React12.useContext(MuiLicenseInfoContext_default);
  return React12.useMemo(() => {
    const licenseKey = contextKey ?? LicenseInfo.getLicenseKey();
    if (sharedLicenseStatuses[packageName] && sharedLicenseStatuses[packageName].key === licenseKey) {
      return sharedLicenseStatuses[packageName].licenseVerifier;
    }
    const plan = packageName.includes("premium") ? "Premium" : "Pro";
    const licenseStatus = verifyLicense({
      releaseInfo: releaseInfo3,
      licenseKey,
      packageName
    });
    const fullPackageName = `@mui/${packageName}`;
    if (licenseStatus.status === LICENSE_STATUS.Valid) {
    } else if (licenseStatus.status === LICENSE_STATUS.Invalid) {
      showInvalidLicenseKeyError();
    } else if (licenseStatus.status === LICENSE_STATUS.NotAvailableInInitialProPlan) {
      showNotAvailableInInitialProPlanError();
    } else if (licenseStatus.status === LICENSE_STATUS.OutOfScope) {
      showLicenseKeyPlanMismatchError();
    } else if (licenseStatus.status === LICENSE_STATUS.NotFound) {
      showMissingLicenseKeyError({
        plan,
        packageName: fullPackageName
      });
    } else if (licenseStatus.status === LICENSE_STATUS.ExpiredAnnualGrace) {
      showExpiredAnnualGraceLicenseKeyError(_extends({
        plan
      }, licenseStatus.meta));
    } else if (licenseStatus.status === LICENSE_STATUS.ExpiredAnnual) {
      showExpiredAnnualLicenseKeyError(_extends({
        plan
      }, licenseStatus.meta));
    } else if (licenseStatus.status === LICENSE_STATUS.ExpiredVersion) {
      showExpiredPackageVersionError({
        packageName: fullPackageName
      });
    } else if (true) {
      throw new Error("missing status handler");
    }
    sharedLicenseStatuses[packageName] = {
      key: licenseKey,
      licenseVerifier: licenseStatus
    };
    return licenseStatus;
  }, [packageName, releaseInfo3, contextKey]);
}

// node_modules/@mui/x-license/Watermark/Watermark.js
var React13 = __toESM(require_react());
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
function getLicenseErrorMessage(licenseStatus) {
  switch (licenseStatus) {
    case LICENSE_STATUS.ExpiredAnnualGrace:
    case LICENSE_STATUS.ExpiredAnnual:
      return "MUI X Expired license key";
    case LICENSE_STATUS.ExpiredVersion:
      return "MUI X Expired package version";
    case LICENSE_STATUS.Invalid:
      return "MUI X Invalid license key";
    case LICENSE_STATUS.OutOfScope:
      return "MUI X License key plan mismatch";
    case LICENSE_STATUS.NotAvailableInInitialProPlan:
      return "MUI X Product not covered by plan";
    case LICENSE_STATUS.NotFound:
      return "MUI X Missing license key";
    default:
      throw new Error("Unhandled MUI X license status.");
  }
}
function Watermark(props) {
  const {
    packageName,
    releaseInfo: releaseInfo3
  } = props;
  const licenseStatus = useLicenseVerifier(packageName, releaseInfo3);
  if (licenseStatus.status === LICENSE_STATUS.Valid) {
    return null;
  }
  return (0, import_jsx_runtime11.jsx)("div", {
    style: {
      position: "absolute",
      pointerEvents: "none",
      color: "#8282829e",
      zIndex: 1e5,
      width: "100%",
      textAlign: "center",
      bottom: "50%",
      right: 0,
      letterSpacing: 5,
      fontSize: 24
    },
    children: getLicenseErrorMessage(licenseStatus.status)
  });
}
var MemoizedWatermark = fastMemo(Watermark);

// node_modules/@mui/x-license/Unstable_LicenseInfoProvider/LicenseInfoProvider.js
var React14 = __toESM(require_react());
var import_jsx_runtime12 = __toESM(require_jsx_runtime());

// node_modules/@mui/x-data-grid-pro/esm/components/GridTreeDataGroupingCell.js
var React15 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid-pro/esm/hooks/utils/useGridRootProps.js
var useGridRootProps2 = useGridRootProps;

// node_modules/@mui/x-data-grid-pro/esm/hooks/utils/useGridApiContext.js
var useGridApiContext2 = useGridApiContext;

// node_modules/@mui/x-data-grid-pro/esm/components/GridTreeDataGroupingCell.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var useUtilityClasses = (ownerState) => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ["treeDataGroupingCell"],
    toggle: ["treeDataGroupingCellToggle"]
  };
  return composeClasses(slots, getDataGridUtilityClass, classes);
};
function GridTreeDataGroupingCell(props) {
  var _a3;
  const {
    id,
    field,
    formattedValue,
    rowNode,
    hideDescendantCount,
    offsetMultiplier = 2
  } = props;
  const rootProps = useGridRootProps2();
  const apiRef2 = useGridApiContext2();
  const classes = useUtilityClasses(rootProps);
  const filteredDescendantCountLookup = useGridSelector(apiRef2, gridFilteredDescendantCountLookupSelector);
  const filteredDescendantCount = filteredDescendantCountLookup[rowNode.id] ?? 0;
  const Icon = rowNode.childrenExpanded ? rootProps.slots.treeDataCollapseIcon : rootProps.slots.treeDataExpandIcon;
  const handleClick = (event) => {
    apiRef2.current.setRowChildrenExpansion(id, !rowNode.childrenExpanded);
    apiRef2.current.setCellFocus(id, field);
    event.stopPropagation();
  };
  return (0, import_jsx_runtime13.jsxs)(Box_default, {
    className: classes.root,
    sx: {
      ml: rowNode.depth * offsetMultiplier
    },
    children: [(0, import_jsx_runtime13.jsx)("div", {
      className: classes.toggle,
      children: filteredDescendantCount > 0 && (0, import_jsx_runtime13.jsx)(rootProps.slots.baseIconButton, _extends({
        size: "small",
        onClick: handleClick,
        tabIndex: -1,
        "aria-label": rowNode.childrenExpanded ? apiRef2.current.getLocaleText("treeDataCollapse") : apiRef2.current.getLocaleText("treeDataExpand")
      }, (_a3 = rootProps == null ? void 0 : rootProps.slotProps) == null ? void 0 : _a3.baseIconButton, {
        children: (0, import_jsx_runtime13.jsx)(Icon, {
          fontSize: "inherit"
        })
      }))
    }), (0, import_jsx_runtime13.jsxs)("span", {
      children: [formattedValue === void 0 ? rowNode.groupingKey : formattedValue, !hideDescendantCount && filteredDescendantCount > 0 ? ` (${filteredDescendantCount})` : ""]
    })]
  });
}
true ? GridTreeDataGroupingCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types.default.oneOf(["edit", "view"]).isRequired,
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types.default.string.isRequired,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the element that should receive focus.
   * @ignore - do not document.
   */
  focusElementRef: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.shape({
    current: import_prop_types.default.shape({
      focus: import_prop_types.default.func.isRequired
    })
  })]),
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types.default.bool.isRequired,
  hideDescendantCount: import_prop_types.default.bool,
  /**
   * The grid row id.
   */
  id: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types.default.bool,
  /**
   * The cell offset multiplier used for calculating cell offset (`rowNode.depth * offsetMultiplier` px).
   * @default 2
   */
  offsetMultiplier: import_prop_types.default.number,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types.default.any
} : void 0;

// node_modules/@mui/x-data-grid-pro/esm/components/GridColumnMenuPinningItem.js
var React16 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
function GridColumnMenuPinningItem(props) {
  const {
    colDef,
    onClick
  } = props;
  const apiRef2 = useGridApiContext2();
  const rootProps = useGridRootProps2();
  const isRtl = useRtl();
  const pinColumn = React16.useCallback((side2) => (event) => {
    apiRef2.current.pinColumn(colDef.field, side2);
    onClick(event);
  }, [apiRef2, colDef.field, onClick]);
  const unpinColumn = (event) => {
    apiRef2.current.unpinColumn(colDef.field);
    onClick(event);
  };
  const pinToLeftMenuItem = (0, import_jsx_runtime14.jsxs)(MenuItem_default, {
    onClick: pinColumn(GridPinnedColumnPosition.LEFT),
    children: [(0, import_jsx_runtime14.jsx)(ListItemIcon_default, {
      children: (0, import_jsx_runtime14.jsx)(rootProps.slots.columnMenuPinLeftIcon, {
        fontSize: "small"
      })
    }), (0, import_jsx_runtime14.jsx)(ListItemText_default, {
      children: apiRef2.current.getLocaleText("pinToLeft")
    })]
  });
  const pinToRightMenuItem = (0, import_jsx_runtime14.jsxs)(MenuItem_default, {
    onClick: pinColumn(GridPinnedColumnPosition.RIGHT),
    children: [(0, import_jsx_runtime14.jsx)(ListItemIcon_default, {
      children: (0, import_jsx_runtime14.jsx)(rootProps.slots.columnMenuPinRightIcon, {
        fontSize: "small"
      })
    }), (0, import_jsx_runtime14.jsx)(ListItemText_default, {
      children: apiRef2.current.getLocaleText("pinToRight")
    })]
  });
  if (!colDef) {
    return null;
  }
  const side = apiRef2.current.isColumnPinned(colDef.field);
  if (side) {
    const otherSide = side === GridPinnedColumnPosition.RIGHT ? GridPinnedColumnPosition.LEFT : GridPinnedColumnPosition.RIGHT;
    const label = otherSide === GridPinnedColumnPosition.RIGHT ? "pinToRight" : "pinToLeft";
    const Icon = side === GridPinnedColumnPosition.RIGHT ? rootProps.slots.columnMenuPinLeftIcon : rootProps.slots.columnMenuPinRightIcon;
    return (0, import_jsx_runtime14.jsxs)(React16.Fragment, {
      children: [(0, import_jsx_runtime14.jsxs)(MenuItem_default, {
        onClick: pinColumn(otherSide),
        children: [(0, import_jsx_runtime14.jsx)(ListItemIcon_default, {
          children: (0, import_jsx_runtime14.jsx)(Icon, {
            fontSize: "small"
          })
        }), (0, import_jsx_runtime14.jsx)(ListItemText_default, {
          children: apiRef2.current.getLocaleText(label)
        })]
      }), (0, import_jsx_runtime14.jsxs)(MenuItem_default, {
        onClick: unpinColumn,
        children: [(0, import_jsx_runtime14.jsx)(ListItemIcon_default, {}), (0, import_jsx_runtime14.jsx)(ListItemText_default, {
          children: apiRef2.current.getLocaleText("unpin")
        })]
      })]
    });
  }
  if (isRtl) {
    return (0, import_jsx_runtime14.jsxs)(React16.Fragment, {
      children: [pinToRightMenuItem, pinToLeftMenuItem]
    });
  }
  return (0, import_jsx_runtime14.jsxs)(React16.Fragment, {
    children: [pinToLeftMenuItem, pinToRightMenuItem]
  });
}
true ? GridColumnMenuPinningItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types2.default.object.isRequired,
  onClick: import_prop_types2.default.func.isRequired
} : void 0;

// node_modules/@mui/x-data-grid-pro/esm/components/GridDetailPanelToggleCell.js
var React18 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid/hooks/features/headerFiltering/useGridHeaderFiltering.js
var React17 = __toESM(require_react());
var headerFilteringStateInitializer = (state, props) => _extends({}, state, {
  headerFiltering: {
    enabled: props.headerFilters ?? false,
    editing: null,
    menuOpen: null
  }
});
var useGridHeaderFiltering = (apiRef2, props) => {
  const logger = useGridLogger(apiRef2, "useGridHeaderFiltering");
  const setHeaderFilterState = React17.useCallback((headerFilterState) => {
    apiRef2.current.setState((state) => {
      if (props.signature === "DataGrid") {
        return state;
      }
      return _extends({}, state, {
        headerFiltering: {
          enabled: props.headerFilters ?? false,
          editing: headerFilterState.editing ?? null,
          menuOpen: headerFilterState.menuOpen ?? null
        }
      });
    });
    apiRef2.current.forceUpdate();
  }, [apiRef2, props.signature, props.headerFilters]);
  const startHeaderFilterEditMode = React17.useCallback((field) => {
    logger.debug(`Starting edit mode on header filter for field: ${field}`);
    apiRef2.current.setHeaderFilterState({
      editing: field
    });
  }, [apiRef2, logger]);
  const stopHeaderFilterEditMode = React17.useCallback(() => {
    logger.debug(`Stopping edit mode on header filter`);
    apiRef2.current.setHeaderFilterState({
      editing: null
    });
  }, [apiRef2, logger]);
  const showHeaderFilterMenu = React17.useCallback((field) => {
    logger.debug(`Opening header filter menu for field: ${field}`);
    apiRef2.current.setHeaderFilterState({
      menuOpen: field
    });
  }, [apiRef2, logger]);
  const hideHeaderFilterMenu = React17.useCallback(() => {
    logger.debug(`Hiding header filter menu for active field`);
    let fieldToFocus = apiRef2.current.state.headerFiltering.menuOpen;
    if (fieldToFocus) {
      const columnLookup = gridColumnLookupSelector(apiRef2);
      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef2);
      const orderedFields = gridColumnFieldsSelector(apiRef2);
      if (!columnLookup[fieldToFocus]) {
        fieldToFocus = orderedFields[0];
      }
      if (columnVisibilityModel[fieldToFocus] === false) {
        const visibleOrderedFields = orderedFields.filter((field) => {
          if (field === fieldToFocus) {
            return true;
          }
          return columnVisibilityModel[field] !== false;
        });
        const fieldIndex = visibleOrderedFields.indexOf(fieldToFocus);
        fieldToFocus = visibleOrderedFields[fieldIndex + 1] || visibleOrderedFields[fieldIndex - 1];
      }
      apiRef2.current.setHeaderFilterState({
        menuOpen: null
      });
      apiRef2.current.setColumnHeaderFilterFocus(fieldToFocus);
    }
  }, [apiRef2, logger]);
  const headerFilterPrivateApi = {
    setHeaderFilterState
  };
  const headerFilterApi = {
    startHeaderFilterEditMode,
    stopHeaderFilterEditMode,
    showHeaderFilterMenu,
    hideHeaderFilterMenu
  };
  useGridApiMethod(apiRef2, headerFilterApi, "public");
  useGridApiMethod(apiRef2, headerFilterPrivateApi, "private");
  const isFirstRender = React17.useRef(true);
  React17.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else {
      apiRef2.current.setHeaderFilterState({
        enabled: props.headerFilters ?? false
      });
    }
  }, [apiRef2, props.headerFilters]);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/detailPanel/gridDetailPanelSelector.js
var gridDetailPanelExpandedRowIdsSelector = (state) => state.detailPanel.expandedRowIds;
var gridDetailPanelExpandedRowsContentCacheSelector = (state) => state.detailPanel.contentCache;
var gridDetailPanelRawHeightCacheSelector = (state) => state.detailPanel.heightCache;
var gridDetailPanelExpandedRowsHeightCacheSelector = createSelectorMemoized(gridDetailPanelRawHeightCacheSelector, (heightCache) => Object.entries(heightCache).reduce((acc, [id, {
  height
}]) => {
  acc[id] = height || 0;
  return acc;
}, {}));

// node_modules/@mui/x-data-grid-pro/esm/components/GridDetailPanelToggleCell.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var useUtilityClasses2 = (ownerState) => {
  const {
    classes,
    isExpanded
  } = ownerState;
  const slots = {
    root: ["detailPanelToggleCell", isExpanded && "detailPanelToggleCell--expanded"]
  };
  return composeClasses(slots, getDataGridUtilityClass, classes);
};
var isExpandedSelector = createSelectorV8(gridDetailPanelExpandedRowIdsSelector, (expandedRowIds, rowId) => {
  return expandedRowIds.includes(rowId);
});
function GridDetailPanelToggleCell(props) {
  var _a3;
  const {
    id,
    row,
    api
  } = props;
  const rowId = api.getRowId(row);
  const isExpanded = useGridSelectorV8({
    current: api
  }, isExpandedSelector, rowId);
  const rootProps = useGridRootProps2();
  const apiRef2 = useGridApiContext2();
  const ownerState = {
    classes: rootProps.classes,
    isExpanded
  };
  const classes = useUtilityClasses2(ownerState);
  const contentCache = useGridSelector(apiRef2, gridDetailPanelExpandedRowsContentCacheSelector);
  const hasContent = React18.isValidElement(contentCache[id]);
  const Icon = isExpanded ? rootProps.slots.detailPanelCollapseIcon : rootProps.slots.detailPanelExpandIcon;
  return (0, import_jsx_runtime15.jsx)(rootProps.slots.baseIconButton, _extends({
    size: "small",
    tabIndex: -1,
    disabled: !hasContent,
    className: classes.root,
    "aria-label": isExpanded ? apiRef2.current.getLocaleText("collapseDetailPanel") : apiRef2.current.getLocaleText("expandDetailPanel")
  }, (_a3 = rootProps.slotProps) == null ? void 0 : _a3.baseIconButton, {
    children: (0, import_jsx_runtime15.jsx)(Icon, {
      fontSize: "inherit"
    })
  }));
}
true ? GridDetailPanelToggleCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types3.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types3.default.oneOf(["edit", "view"]).isRequired,
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types3.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types3.default.string.isRequired,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the element that should receive focus.
   * @ignore - do not document.
   */
  focusElementRef: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.shape({
    current: import_prop_types3.default.shape({
      focus: import_prop_types3.default.func.isRequired
    })
  })]),
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types3.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types3.default.bool.isRequired,
  /**
   * The grid row id.
   */
  id: import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types3.default.bool,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types3.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types3.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types3.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types3.default.any
} : void 0;

// node_modules/@mui/x-data-grid-pro/esm/components/GridRowReorderCell.js
var React19 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var useUtilityClasses3 = (ownerState) => {
  const {
    isDraggable,
    classes
  } = ownerState;
  const slots = {
    root: ["rowReorderCell", isDraggable && "rowReorderCell--draggable"],
    placeholder: ["rowReorderCellPlaceholder"]
  };
  return composeClasses(slots, getDataGridUtilityClass, classes);
};
function GridRowReorderCell(params) {
  const apiRef2 = useGridApiContext();
  const rootProps = useGridRootProps2();
  const sortModel = useGridSelector(apiRef2, gridSortModelSelector);
  const treeDepth = useGridSelector(apiRef2, gridRowMaximumTreeDepthSelector);
  const editRowsState = useGridSelector(apiRef2, gridEditRowsStateSelector);
  const cellValue = params.row.__reorder__ || params.id;
  const isDraggable = React19.useMemo(() => !!rootProps.rowReordering && !sortModel.length && treeDepth === 1 && Object.keys(editRowsState).length === 0, [rootProps.rowReordering, sortModel, treeDepth, editRowsState]);
  const ownerState = {
    isDraggable,
    classes: rootProps.classes
  };
  const classes = useUtilityClasses3(ownerState);
  const publish = React19.useCallback((eventName, propHandler) => (event) => {
    if (isEventTargetInPortal(event)) {
      return;
    }
    if (!apiRef2.current.getRow(params.id)) {
      return;
    }
    apiRef2.current.publishEvent(eventName, apiRef2.current.getRowParams(params.id), event);
    if (propHandler) {
      propHandler(event);
    }
  }, [apiRef2, params.id]);
  const draggableEventHandlers = isDraggable ? {
    onDragStart: publish("rowDragStart"),
    onDragOver: publish("rowDragOver"),
    onDragEnd: publish("rowDragEnd")
  } : null;
  if (params.rowNode.type === "footer") {
    return null;
  }
  return (0, import_jsx_runtime16.jsxs)("div", _extends({
    className: classes.root,
    draggable: isDraggable
  }, draggableEventHandlers, {
    children: [(0, import_jsx_runtime16.jsx)(rootProps.slots.rowReorderIcon, {}), (0, import_jsx_runtime16.jsx)("div", {
      className: classes.placeholder,
      children: cellValue
    })]
  }));
}
true ? GridRowReorderCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: import_prop_types4.default.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: import_prop_types4.default.oneOf(["edit", "view"]).isRequired,
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: import_prop_types4.default.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: import_prop_types4.default.string.isRequired,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the element that should receive focus.
   * @ignore - do not document.
   */
  focusElementRef: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.shape({
    current: import_prop_types4.default.shape({
      focus: import_prop_types4.default.func.isRequired
    })
  })]),
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: import_prop_types4.default.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: import_prop_types4.default.bool.isRequired,
  /**
   * The grid row id.
   */
  id: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: import_prop_types4.default.bool,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: import_prop_types4.default.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: import_prop_types4.default.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: import_prop_types4.default.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: import_prop_types4.default.any
} : void 0;
var renderRowReorderCell = (params) => {
  if (params.rowNode.type === "footer" || params.rowNode.type === "pinnedRow") {
    return null;
  }
  return (0, import_jsx_runtime16.jsx)(GridRowReorderCell, _extends({}, params));
};

// node_modules/@mui/x-data-grid-pro/esm/material/icons.js
var React20 = __toESM(require_react());
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var GridPushPinRightIcon = createSvgIcon((0, import_jsx_runtime17.jsx)("g", {
  transform: "rotate(-30 15 10)",
  children: (0, import_jsx_runtime17.jsx)("path", {
    d: "M16,9V4l1,0c0.55,0,1-0.45,1-1v0c0-0.55-0.45-1-1-1H7C6.45,2,6,2.45,6,3v0 c0,0.55,0.45,1,1,1l1,0v5c0,1.66-1.34,3-3,3h0v2h5.97v7l1,1l1-1v-7H19v-2h0C17.34,12,16,10.66,16,9z",
    fillRule: "evenodd"
  })
}), "PushPinRight");
var GridPushPinLeftIcon = createSvgIcon((0, import_jsx_runtime17.jsx)("g", {
  transform: "rotate(30 8 12)",
  children: (0, import_jsx_runtime17.jsx)("path", {
    d: "M16,9V4l1,0c0.55,0,1-0.45,1-1v0c0-0.55-0.45-1-1-1H7C6.45,2,6,2.45,6,3v0 c0,0.55,0.45,1,1,1l1,0v5c0,1.66-1.34,3-3,3h0v2h5.97v7l1,1l1-1v-7H19v-2h0C17.34,12,16,10.66,16,9z",
    fillRule: "evenodd"
  })
}), "PushPinLeft");

// node_modules/@mui/x-data-grid-pro/esm/components/headerFiltering/GridHeaderFilterMenuContainer.js
var React21 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var _excluded = ["operators", "item", "field", "buttonRef", "headerFilterMenuRef", "disabled"];
var sx = {
  width: 22,
  height: 22,
  margin: "auto 0 10px 5px"
};
function GridHeaderFilterMenuContainer(props) {
  var _a3;
  const {
    operators,
    item,
    field,
    buttonRef,
    headerFilterMenuRef,
    disabled = false
  } = props, others = _objectWithoutPropertiesLoose(props, _excluded);
  const buttonId = useId();
  const menuId = useId();
  const rootProps = useGridRootProps2();
  const apiRef2 = useGridApiContext();
  const menuOpenField = useGridSelector(apiRef2, gridHeaderFilteringMenuSelector);
  const open = Boolean(menuOpenField === field && headerFilterMenuRef.current);
  const handleClick = (event) => {
    headerFilterMenuRef.current = event.currentTarget;
    apiRef2.current.showHeaderFilterMenu(field);
  };
  if (!rootProps.slots.headerFilterMenu) {
    return null;
  }
  const label = apiRef2.current.getLocaleText("filterPanelOperator");
  const labelString = label ? String(label) : void 0;
  return (0, import_jsx_runtime18.jsxs)(React21.Fragment, {
    children: [(0, import_jsx_runtime18.jsx)(rootProps.slots.baseIconButton, _extends({
      id: buttonId,
      ref: buttonRef,
      "aria-label": labelString,
      title: labelString,
      "aria-controls": menuId,
      "aria-expanded": open ? "true" : void 0,
      "aria-haspopup": "true",
      tabIndex: -1,
      size: "small",
      onClick: handleClick,
      sx,
      disabled
    }, (_a3 = rootProps.slotProps) == null ? void 0 : _a3.baseIconButton, {
      children: (0, import_jsx_runtime18.jsx)(rootProps.slots.openFilterButtonIcon, {
        fontSize: "small"
      })
    })), (0, import_jsx_runtime18.jsx)(rootProps.slots.headerFilterMenu, _extends({
      field,
      open,
      item,
      target: headerFilterMenuRef.current,
      operators,
      labelledBy: buttonId,
      id: menuId
    }, others))]
  });
}
true ? GridHeaderFilterMenuContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  applyFilterChanges: import_prop_types5.default.func.isRequired,
  buttonRef: refType_default,
  disabled: import_prop_types5.default.bool,
  field: import_prop_types5.default.string.isRequired,
  headerFilterMenuRef: import_prop_types5.default.shape({
    current: import_prop_types5.default.object
  }).isRequired,
  item: import_prop_types5.default.shape({
    field: import_prop_types5.default.string.isRequired,
    id: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.string]),
    operator: import_prop_types5.default.string.isRequired,
    value: import_prop_types5.default.any
  }).isRequired,
  operators: import_prop_types5.default.arrayOf(import_prop_types5.default.shape({
    getApplyFilterFn: import_prop_types5.default.func.isRequired,
    getValueAsString: import_prop_types5.default.func,
    headerLabel: import_prop_types5.default.string,
    InputComponent: import_prop_types5.default.elementType,
    InputComponentProps: import_prop_types5.default.object,
    label: import_prop_types5.default.string,
    requiresFilterValue: import_prop_types5.default.bool,
    value: import_prop_types5.default.string.isRequired
  })).isRequired
} : void 0;

// node_modules/@mui/x-data-grid-pro/esm/components/headerFiltering/GridHeaderFilterCell.js
var React23 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid-pro/esm/components/headerFiltering/GridHeaderFilterClearButton.js
var React22 = __toESM(require_react());
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var sx2 = {
  padding: "2px"
};
function GridHeaderFilterClearButton(props) {
  var _a3;
  const rootProps = useGridRootProps2();
  return (0, import_jsx_runtime19.jsx)(rootProps.slots.baseIconButton, _extends({
    tabIndex: -1,
    "aria-label": "Clear filter",
    size: "small",
    sx: sx2
  }, props, (_a3 = rootProps.slotProps) == null ? void 0 : _a3.baseIconButton, {
    children: (0, import_jsx_runtime19.jsx)(rootProps.slots.columnMenuClearIcon, {
      fontSize: "inherit"
    })
  }));
}

// node_modules/@mui/x-data-grid-pro/esm/components/headerFiltering/GridHeaderFilterCell.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var _excluded2 = ["colIndex", "height", "hasFocus", "width", "headerClassName", "colDef", "item", "headerFilterMenuRef", "InputComponentProps", "showClearIcon", "pinnedPosition", "pinnedOffset", "style", "showLeftBorder", "showRightBorder"];
var useUtilityClasses4 = (ownerState) => {
  const {
    colDef,
    classes,
    showRightBorder,
    showLeftBorder,
    pinnedPosition
  } = ownerState;
  const slots = {
    root: ["columnHeader", colDef.headerAlign === "left" && "columnHeader--alignLeft", colDef.headerAlign === "center" && "columnHeader--alignCenter", colDef.headerAlign === "right" && "columnHeader--alignRight", "withBorderColor", showRightBorder && "columnHeader--withRightBorder", showLeftBorder && "columnHeader--withLeftBorder", pinnedPosition === PinnedColumnPosition.LEFT && "columnHeader--pinnedLeft", pinnedPosition === PinnedColumnPosition.RIGHT && "columnHeader--pinnedRight"]
  };
  return composeClasses(slots, getDataGridUtilityClass, classes);
};
var emptyFieldSx = {
  [`& input[value=""]:not(:focus)`]: {
    color: "transparent"
  }
};
var defaultInputComponents = {
  string: GridFilterInputValue,
  number: GridFilterInputValue,
  date: GridFilterInputDate,
  dateTime: GridFilterInputDate,
  boolean: GridFilterInputBoolean,
  singleSelect: GridFilterInputSingleSelect,
  actions: null,
  custom: null
};
var GridHeaderFilterCell = forwardRef((props, ref) => {
  const {
    colIndex,
    height,
    hasFocus,
    width,
    headerClassName,
    colDef,
    item,
    headerFilterMenuRef,
    InputComponentProps,
    showClearIcon = true,
    pinnedPosition,
    pinnedOffset,
    style: styleProp,
    showLeftBorder,
    showRightBorder
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const apiRef2 = useGridPrivateApiContext();
  const isRtl = useRtl();
  const columnFields = useGridSelector(apiRef2, gridVisibleColumnFieldsSelector);
  const rootProps = useGridRootProps2();
  const cellRef = React23.useRef(null);
  const handleRef = useForkRef(ref, cellRef);
  const inputRef = React23.useRef(null);
  const buttonRef = React23.useRef(null);
  const editingField = useGridSelector(apiRef2, gridHeaderFilteringEditFieldSelector);
  const isEditing = editingField === colDef.field;
  const menuOpenField = useGridSelector(apiRef2, gridHeaderFilteringMenuSelector);
  const isMenuOpen = menuOpenField === colDef.field;
  const filterOperators = React23.useMemo(() => {
    if (!colDef.filterOperators) {
      return [];
    }
    return colDef.filterOperators.filter((operator) => operator.value !== "isAnyOf");
  }, [colDef.filterOperators]);
  const filterModel = useGridSelector(apiRef2, gridFilterModelSelector);
  const filterableColumnsLookup = useGridSelector(apiRef2, gridFilterableColumnLookupSelector);
  const isFilterReadOnly = React23.useMemo(() => {
    if (!(filterModel == null ? void 0 : filterModel.items.length)) {
      return false;
    }
    const filterModelItem = filterModel.items.find((it) => it.field === colDef.field);
    return filterModelItem ? !filterableColumnsLookup[filterModelItem.field] : false;
  }, [colDef.field, filterModel, filterableColumnsLookup]);
  const currentOperator = React23.useMemo(() => filterOperators.find((operator) => operator.value === item.operator) ?? filterOperators[0], [item.operator, filterOperators]);
  const InputComponent = colDef.filterable || isFilterReadOnly ? currentOperator.InputComponent ?? defaultInputComponents[colDef.type] : null;
  const clearFilterItem = React23.useCallback(() => {
    apiRef2.current.deleteFilterItem(item);
  }, [apiRef2, item]);
  let headerFilterComponent;
  if (colDef.renderHeaderFilter) {
    headerFilterComponent = colDef.renderHeaderFilter(_extends({}, props, {
      inputRef
    }));
  }
  React23.useLayoutEffect(() => {
    if (hasFocus && !isMenuOpen) {
      let focusableElement = cellRef.current.querySelector('[tabindex="0"]');
      if (isEditing && InputComponent) {
        focusableElement = inputRef.current;
      }
      const elementToFocus = focusableElement || cellRef.current;
      elementToFocus == null ? void 0 : elementToFocus.focus();
      if (apiRef2.current.columnHeadersContainerRef.current) {
        apiRef2.current.columnHeadersContainerRef.current.scrollLeft = 0;
      }
    }
  }, [InputComponent, apiRef2, hasFocus, isEditing, isMenuOpen]);
  const onKeyDown = React23.useCallback((event) => {
    if (isMenuOpen || isNavigationKey(event.key) || isFilterReadOnly) {
      return;
    }
    switch (event.key) {
      case "Escape":
        if (isEditing) {
          apiRef2.current.stopHeaderFilterEditMode();
        }
        break;
      case "Enter":
        if (isEditing) {
          if (!event.defaultPrevented) {
            apiRef2.current.stopHeaderFilterEditMode();
            break;
          }
        }
        if (event.metaKey || event.ctrlKey) {
          headerFilterMenuRef.current = buttonRef.current;
          apiRef2.current.showHeaderFilterMenu(colDef.field);
          break;
        }
        apiRef2.current.startHeaderFilterEditMode(colDef.field);
        break;
      case "Tab": {
        if (isEditing) {
          const fieldToFocus = columnFields[colIndex + (event.shiftKey ? -1 : 1)] ?? null;
          if (fieldToFocus) {
            apiRef2.current.startHeaderFilterEditMode(fieldToFocus);
            apiRef2.current.setColumnHeaderFilterFocus(fieldToFocus, event);
          }
        }
        break;
      }
      default:
        if (isEditing || event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) {
          break;
        }
        apiRef2.current.startHeaderFilterEditMode(colDef.field);
        break;
    }
  }, [apiRef2, colDef.field, colIndex, columnFields, headerFilterMenuRef, isEditing, isFilterReadOnly, isMenuOpen]);
  const publish = React23.useCallback((eventName, propHandler) => (event) => {
    apiRef2.current.publishEvent(eventName, apiRef2.current.getColumnHeaderParams(colDef.field), event);
    if (propHandler) {
      propHandler(event);
    }
  }, [apiRef2, colDef.field]);
  const onMouseDown = React23.useCallback((event) => {
    var _a3, _b2;
    if (!hasFocus) {
      if ((_b2 = (_a3 = inputRef.current) == null ? void 0 : _a3.contains) == null ? void 0 : _b2.call(_a3, event.target)) {
        inputRef.current.focus();
      }
      apiRef2.current.setColumnHeaderFilterFocus(colDef.field, event);
    }
  }, [apiRef2, colDef.field, hasFocus]);
  const mouseEventsHandlers = React23.useMemo(() => ({
    onKeyDown: publish("headerFilterKeyDown", onKeyDown),
    onClick: publish("headerFilterClick"),
    onMouseDown: publish("headerFilterMouseDown", onMouseDown),
    onBlur: publish("headerFilterBlur")
  }), [onMouseDown, onKeyDown, publish]);
  const ownerState = _extends({}, rootProps, {
    pinnedPosition,
    colDef,
    showLeftBorder,
    showRightBorder
  });
  const classes = useUtilityClasses4(ownerState);
  const isNoInputOperator = currentOperator.requiresFilterValue === false;
  const isApplied = (item == null ? void 0 : item.value) !== void 0 || isNoInputOperator;
  const label = currentOperator.headerLabel ?? apiRef2.current.getLocaleText(`headerFilterOperator${capitalize(item.operator)}`);
  const isFilterActive = isApplied || hasFocus;
  return (0, import_jsx_runtime20.jsxs)("div", _extends({
    className: clsx_default(classes.root, headerClassName),
    style: attachPinnedStyle(_extends({
      height,
      width
    }, styleProp), isRtl, pinnedPosition, pinnedOffset),
    role: "columnheader",
    "aria-colindex": colIndex + 1,
    "aria-label": headerFilterComponent == null ? colDef.headerName ?? colDef.field : void 0
  }, other, mouseEventsHandlers, {
    ref: handleRef,
    children: [headerFilterComponent, InputComponent && headerFilterComponent === void 0 ? (0, import_jsx_runtime20.jsxs)(React23.Fragment, {
      children: [(0, import_jsx_runtime20.jsx)(InputComponent, _extends({
        apiRef: apiRef2,
        item,
        inputRef,
        applyValue: apiRef2.current.upsertFilterItem,
        onFocus: () => apiRef2.current.startHeaderFilterEditMode(colDef.field),
        onBlur: (event) => {
          var _a3;
          apiRef2.current.stopHeaderFilterEditMode();
          if (!((_a3 = event.relatedTarget) == null ? void 0 : _a3.className.includes("columnHeader"))) {
            apiRef2.current.setState((state) => _extends({}, state, {
              focus: {
                cell: null,
                columnHeader: null,
                columnHeaderFilter: null,
                columnGroupHeader: null
              }
            }));
          }
        },
        label: capitalize(label),
        placeholder: "",
        isFilterActive,
        clearButton: showClearIcon && isApplied ? (0, import_jsx_runtime20.jsx)(GridHeaderFilterClearButton, {
          onClick: clearFilterItem,
          disabled: isFilterReadOnly
        }) : null,
        disabled: isFilterReadOnly || isNoInputOperator,
        tabIndex: -1,
        InputLabelProps: null,
        sx: colDef.type === "date" || colDef.type === "dateTime" || colDef.type === "number" ? emptyFieldSx : void 0
      }, isNoInputOperator ? {
        value: ""
      } : {}, currentOperator == null ? void 0 : currentOperator.InputComponentProps, InputComponentProps)), (0, import_jsx_runtime20.jsx)(GridHeaderFilterMenuContainer, {
        operators: filterOperators,
        item,
        field: colDef.field,
        disabled: isFilterReadOnly,
        applyFilterChanges: apiRef2.current.upsertFilterItem,
        headerFilterMenuRef,
        buttonRef
      })]
    }) : null]
  }));
});
true ? GridHeaderFilterCell.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types6.default.object.isRequired,
  colIndex: import_prop_types6.default.number.isRequired,
  hasFocus: import_prop_types6.default.bool,
  /**
   * Class name added to the column header cell.
   */
  headerClassName: import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.string]),
  headerFilterMenuRef: import_prop_types6.default.shape({
    current: import_prop_types6.default.object
  }).isRequired,
  height: import_prop_types6.default.number.isRequired,
  InputComponentProps: import_prop_types6.default.object,
  item: import_prop_types6.default.shape({
    field: import_prop_types6.default.string.isRequired,
    id: import_prop_types6.default.oneOfType([import_prop_types6.default.number, import_prop_types6.default.string]),
    operator: import_prop_types6.default.string.isRequired,
    value: import_prop_types6.default.any
  }).isRequired,
  pinnedOffset: import_prop_types6.default.number,
  pinnedPosition: import_prop_types6.default.oneOf([0, 1, 2, 3]),
  showClearIcon: import_prop_types6.default.bool,
  showLeftBorder: import_prop_types6.default.bool.isRequired,
  showRightBorder: import_prop_types6.default.bool.isRequired,
  sortIndex: import_prop_types6.default.number,
  style: import_prop_types6.default.object,
  tabIndex: import_prop_types6.default.oneOf([-1, 0]).isRequired,
  width: import_prop_types6.default.number.isRequired
} : void 0;
var Memoized = fastMemo(GridHeaderFilterCell);

// node_modules/@mui/x-data-grid-pro/esm/components/headerFiltering/GridHeaderFilterMenu.js
var React24 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
function GridHeaderFilterMenu({
  open,
  field,
  target,
  applyFilterChanges,
  operators,
  item,
  id,
  labelledBy
}) {
  const apiRef2 = useGridApiContext();
  const hideMenu = React24.useCallback(() => {
    apiRef2.current.hideHeaderFilterMenu();
  }, [apiRef2]);
  const handleListKeyDown = React24.useCallback((event) => {
    if (event.key === "Tab") {
      event.preventDefault();
    }
    if (event.key === "Escape" || event.key === "Tab") {
      hideMenu();
    }
  }, [hideMenu]);
  if (!target) {
    return null;
  }
  return (0, import_jsx_runtime21.jsx)(GridMenu, {
    placement: "bottom-end",
    open,
    target,
    onClose: hideMenu,
    children: (0, import_jsx_runtime21.jsx)(MenuList_default, {
      "aria-labelledby": labelledBy,
      id,
      onKeyDown: handleListKeyDown,
      children: operators.map((op, i2) => {
        const label = (op == null ? void 0 : op.headerLabel) ?? apiRef2.current.getLocaleText(`headerFilterOperator${capitalize(op.value)}`);
        return (0, import_jsx_runtime21.jsx)(MenuItem_default, {
          onClick: () => {
            applyFilterChanges(_extends({}, item, {
              operator: op.value
            }));
            hideMenu();
          },
          autoFocus: i2 === 0 ? open : false,
          selected: op.value === item.operator,
          children: label
        }, `${field}-${op.value}`);
      })
    })
  });
}
true ? GridHeaderFilterMenu.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  applyFilterChanges: import_prop_types7.default.func.isRequired,
  field: import_prop_types7.default.string.isRequired,
  id: import_prop_types7.default.string.isRequired,
  item: import_prop_types7.default.shape({
    field: import_prop_types7.default.string.isRequired,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    operator: import_prop_types7.default.string.isRequired,
    value: import_prop_types7.default.any
  }).isRequired,
  labelledBy: import_prop_types7.default.string.isRequired,
  open: import_prop_types7.default.bool.isRequired,
  operators: import_prop_types7.default.arrayOf(import_prop_types7.default.shape({
    getApplyFilterFn: import_prop_types7.default.func.isRequired,
    getValueAsString: import_prop_types7.default.func,
    headerLabel: import_prop_types7.default.string,
    InputComponent: import_prop_types7.default.elementType,
    InputComponentProps: import_prop_types7.default.object,
    label: import_prop_types7.default.string,
    requiresFilterValue: import_prop_types7.default.bool,
    value: import_prop_types7.default.string.isRequired
  })).isRequired,
  target: HTMLElementType
} : void 0;

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/columnReorder/columnReorderSelector.js
var gridColumnReorderSelector = (state) => state.columnReorder;
var gridColumnReorderDragColSelector = createSelector(gridColumnReorderSelector, (columnReorder) => columnReorder.dragCol);

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/rowReorder/gridRowReorderColDef.js
var GRID_REORDER_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
  type: "custom",
  field: "__reorder__",
  sortable: false,
  filterable: false,
  width: 50,
  align: "center",
  headerAlign: "center",
  disableColumnMenu: true,
  disableExport: true,
  disableReorder: true,
  resizable: false,
  // @ts-ignore
  aggregable: false,
  renderHeader: () => " ",
  renderCell: renderRowReorderCell
});

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/treeData/gridTreeDataGroupColDef.js
var GRID_TREE_DATA_GROUPING_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
  type: "custom",
  sortable: false,
  filterable: false,
  disableColumnMenu: true,
  disableReorder: true,
  align: "left",
  width: 200,
  valueGetter: (value, row, column, apiRef2) => {
    const rowId = apiRef2.current.getRowId(row);
    const rowNode = apiRef2.current.getRowNode(rowId);
    return (rowNode == null ? void 0 : rowNode.type) === "group" || (rowNode == null ? void 0 : rowNode.type) === "leaf" ? rowNode.groupingKey : void 0;
  }
});
var GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES = {
  field: GRID_TREE_DATA_GROUPING_FIELD,
  editable: false,
  groupable: false
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/detailPanel/gridDetailPanelToggleColDef.js
var React25 = __toESM(require_react());
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var GRID_DETAIL_PANEL_TOGGLE_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
  type: "custom",
  field: GRID_DETAIL_PANEL_TOGGLE_FIELD,
  editable: false,
  sortable: false,
  filterable: false,
  resizable: false,
  // @ts-ignore
  aggregable: false,
  disableColumnMenu: true,
  disableReorder: true,
  disableExport: true,
  align: "left",
  width: 40,
  valueGetter: (value, row, column, apiRef2) => {
    const rowId = apiRef2.current.getRowId(row);
    const expandedRowIds = gridDetailPanelExpandedRowIdsSelector(apiRef2.current.state);
    return expandedRowIds.includes(rowId);
  },
  renderCell: (params) => (0, import_jsx_runtime22.jsx)(GridDetailPanelToggleCell, _extends({}, params)),
  renderHeader: ({
    colDef
  }) => (0, import_jsx_runtime22.jsx)("div", {
    "aria-label": colDef.headerName
  })
});

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/dataSource/cache.js
function getKey(params) {
  return JSON.stringify([params.paginationModel, params.filterModel, params.sortModel, params.groupKeys, params.groupFields]);
}
var GridDataSourceCacheDefault = class {
  constructor({
    ttl = 3e5
  }) {
    this.cache = void 0;
    this.ttl = void 0;
    this.cache = {};
    this.ttl = ttl;
  }
  set(key, value) {
    const keyString = getKey(key);
    const expiry = Date.now() + this.ttl;
    this.cache[keyString] = {
      value,
      expiry
    };
  }
  get(key) {
    const keyString = getKey(key);
    const entry = this.cache[keyString];
    if (!entry) {
      return void 0;
    }
    if (Date.now() > entry.expiry) {
      delete this.cache[keyString];
      return void 0;
    }
    return entry.value;
  }
  clear() {
    this.cache = {};
  }
};

// node_modules/@mui/x-data-grid-pro/esm/utils/tree/utils.js
var getGroupRowIdFromPath = (path) => {
  const pathStr = path.map((groupingCriteria) => `${groupingCriteria.field}/${groupingCriteria.key}`).join("-");
  return `auto-generated-row-${pathStr}`;
};
var getNodePathInTree = ({
  id,
  tree
}) => {
  const path = [];
  let node = tree[id];
  while (node.id !== GRID_ROOT_GROUP_ID) {
    path.push({
      field: node.type === "leaf" ? null : node.groupingField,
      key: node.groupingKey
    });
    node = tree[node.parent];
  }
  path.reverse();
  return path;
};
var checkGroupChildrenExpansion = (node, defaultGroupingExpansionDepth, isGroupExpandedByDefault) => {
  let childrenExpanded;
  if (node.id === GRID_ROOT_GROUP_ID) {
    childrenExpanded = true;
  } else if (isGroupExpandedByDefault) {
    childrenExpanded = isGroupExpandedByDefault(node);
  } else {
    childrenExpanded = defaultGroupingExpansionDepth === -1 || defaultGroupingExpansionDepth > node.depth;
  }
  return childrenExpanded;
};
var updateGroupDefaultExpansion = (node, defaultGroupingExpansionDepth, isGroupExpandedByDefault) => {
  const childrenExpanded = checkGroupChildrenExpansion(node, defaultGroupingExpansionDepth, isGroupExpandedByDefault);
  node.childrenExpanded = childrenExpanded;
  return node;
};
var insertNodeInTree = (node, tree, treeDepths, previousTree) => {
  var _a3;
  tree[node.id] = node;
  treeDepths[node.depth] = (treeDepths[node.depth] ?? 0) + 1;
  const parentNode = tree[node.parent];
  if (node.type === "group" || node.type === "leaf") {
    const groupingFieldName = node.groupingField ?? "__no_field__";
    const groupingKeyName = node.groupingKey ?? "__no_key__";
    const groupingField = (_a3 = parentNode.childrenFromPath) == null ? void 0 : _a3[groupingFieldName];
    if (previousTree !== null && previousTree[parentNode.id] === tree[parentNode.id]) {
      parentNode.children = [...parentNode.children, node.id];
    } else {
      parentNode.children.push(node.id);
    }
    if (groupingField == null) {
      parentNode.childrenFromPath[groupingFieldName] = {
        [groupingKeyName.toString()]: node.id
      };
    } else {
      groupingField[groupingKeyName.toString()] = node.id;
    }
  } else if (node.type === "footer") {
    parentNode.footerId = node.id;
  }
};
var removeNodeFromTree = ({
  node,
  tree,
  treeDepths
}) => {
  delete tree[node.id];
  const nodeDepth = node.depth;
  const currentNodeCount = treeDepths[nodeDepth];
  if (currentNodeCount === 1) {
    delete treeDepths[nodeDepth];
  } else {
    treeDepths[nodeDepth] = currentNodeCount - 1;
  }
  const parentNode = tree[node.parent];
  if (node.type === "footer") {
    tree[parentNode.id] = _extends({}, parentNode, {
      footerId: null
    });
  } else {
    const groupingField = node.groupingField ?? "__no_field__";
    const groupingKey = node.groupingKey ?? "__no_key__";
    const children = parentNode.children.filter((childId) => childId !== node.id);
    const childrenFromPath = parentNode.childrenFromPath;
    delete childrenFromPath[groupingField][groupingKey.toString()];
    tree[parentNode.id] = _extends({}, parentNode, {
      children,
      childrenFromPath
    });
  }
};
var updateGroupNodeIdAndAutoGenerated = ({
  node,
  updatedNode,
  previousTree,
  tree,
  treeDepths
}) => {
  node.children.forEach((childId) => {
    tree[childId] = _extends({}, tree[childId], {
      parent: updatedNode.id
    });
  });
  removeNodeFromTree({
    node,
    tree,
    treeDepths
  });
  const groupNode = _extends({}, node, updatedNode);
  insertNodeInTree(groupNode, tree, treeDepths, previousTree);
};
var createUpdatedGroupsManager = () => ({
  value: {},
  addAction(groupId, action) {
    if (!this.value[groupId]) {
      this.value[groupId] = {};
    }
    this.value[groupId][action] = true;
  }
});
var getVisibleRowsLookup = ({
  tree,
  filteredRowsLookup
}) => {
  if (!filteredRowsLookup) {
    return {};
  }
  const visibleRowsLookup = {};
  const handleTreeNode = (node, areAncestorsExpanded) => {
    const isPassingFiltering = filteredRowsLookup[node.id] !== false;
    if (node.type === "group") {
      node.children.forEach((childId) => {
        const childNode = tree[childId];
        handleTreeNode(childNode, areAncestorsExpanded && !!node.childrenExpanded);
      });
    }
    visibleRowsLookup[node.id] = isPassingFiltering && areAncestorsExpanded;
    if (node.type === "group" && node.footerId != null) {
      visibleRowsLookup[node.footerId] = isPassingFiltering && areAncestorsExpanded && !!node.childrenExpanded;
    }
  };
  const nodes = Object.values(tree);
  for (let i2 = 0; i2 < nodes.length; i2 += 1) {
    const node = nodes[i2];
    if (node.depth === 0) {
      handleTreeNode(node, true);
    }
  }
  return visibleRowsLookup;
};

// node_modules/@mui/x-data-grid-premium/esm/DataGridPremium/DataGridPremium.js
var React76 = __toESM(require_react());
var import_prop_types12 = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid-pro/esm/DataGridPro/DataGridPro.js
var React52 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/infiniteLoader/useGridInfiniteLoader.js
var React26 = __toESM(require_react());
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var InfiniteLoadingTriggerElement = styled_default("div")({
  position: "sticky",
  left: 0,
  width: 0,
  height: 0
});
var useGridInfiniteLoader = (apiRef2, props) => {
  const visibleColumns = useGridSelector(apiRef2, gridVisibleColumnDefinitionsSelector);
  const currentPage = useGridVisibleRows(apiRef2, props);
  const observer = React26.useRef(null);
  const updateTargetTimeout = useTimeout();
  const triggerElement = React26.useRef(null);
  const isEnabled = props.rowsLoadingMode === "client" && !!props.onRowsScrollEnd;
  const handleLoadMoreRows = useEventCallback_default(([entry]) => {
    var _a3;
    const currentRatio = entry.intersectionRatio;
    const isIntersecting = entry.isIntersecting;
    if (isIntersecting && currentRatio === 1) {
      const viewportPageSize = apiRef2.current.getViewportPageSize();
      const rowScrollEndParams = {
        visibleColumns,
        viewportPageSize,
        visibleRowsCount: currentPage.rows.length
      };
      apiRef2.current.publishEvent("rowsScrollEnd", rowScrollEndParams);
      (_a3 = observer.current) == null ? void 0 : _a3.disconnect();
      triggerElement.current = null;
    }
  });
  React26.useEffect(() => {
    var _a3;
    const virtualScroller = apiRef2.current.virtualScrollerRef.current;
    if (!isEnabled) {
      return;
    }
    if (!virtualScroller) {
      return;
    }
    (_a3 = observer.current) == null ? void 0 : _a3.disconnect();
    const horizontalScrollbarHeight = gridHorizontalScrollbarHeightSelector(apiRef2.current.state);
    const marginBottom = props.scrollEndThreshold - horizontalScrollbarHeight;
    observer.current = new IntersectionObserver(handleLoadMoreRows, {
      threshold: 1,
      root: virtualScroller,
      rootMargin: `0px 0px ${marginBottom}px 0px`
    });
    if (triggerElement.current) {
      observer.current.observe(triggerElement.current);
    }
  }, [apiRef2, handleLoadMoreRows, isEnabled, props.scrollEndThreshold]);
  const updateTarget = (node) => {
    var _a3, _b2;
    if (triggerElement.current !== node) {
      (_a3 = observer.current) == null ? void 0 : _a3.disconnect();
      triggerElement.current = node;
      if (triggerElement.current) {
        (_b2 = observer.current) == null ? void 0 : _b2.observe(triggerElement.current);
      }
    }
  };
  const triggerRef = React26.useCallback((node) => {
    if (!isEnabled) {
      return;
    }
    updateTargetTimeout.start(0, () => updateTarget(node));
  }, [isEnabled, updateTargetTimeout]);
  const getInfiniteLoadingTriggerElement = React26.useCallback(({
    lastRowId
  }) => {
    if (!isEnabled) {
      return null;
    }
    return (0, import_jsx_runtime23.jsx)(InfiniteLoadingTriggerElement, {
      ref: triggerRef,
      role: "presentation"
    }, `trigger-${lastRowId}`);
  }, [isEnabled, triggerRef]);
  const infiniteLoaderPrivateApi = {
    getInfiniteLoadingTriggerElement
  };
  useGridApiMethod(apiRef2, infiniteLoaderPrivateApi, "private");
  useGridApiOptionHandler(apiRef2, "rowsScrollEnd", props.onRowsScrollEnd);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/columnReorder/useGridColumnReorder.js
var React27 = __toESM(require_react());
var CURSOR_MOVE_DIRECTION_LEFT = "left";
var CURSOR_MOVE_DIRECTION_RIGHT = "right";
var getCursorMoveDirectionX = (currentCoordinates, nextCoordinates) => {
  return currentCoordinates.x <= nextCoordinates.x ? CURSOR_MOVE_DIRECTION_RIGHT : CURSOR_MOVE_DIRECTION_LEFT;
};
var hasCursorPositionChanged = (currentCoordinates, nextCoordinates) => currentCoordinates.x !== nextCoordinates.x || currentCoordinates.y !== nextCoordinates.y;
var useUtilityClasses5 = (ownerState) => {
  const {
    classes
  } = ownerState;
  const slots = {
    columnHeaderDragging: ["columnHeader--dragging"]
  };
  return composeClasses(slots, getDataGridUtilityClass, classes);
};
var columnReorderStateInitializer = (state) => _extends({}, state, {
  columnReorder: {
    dragCol: ""
  }
});
var useGridColumnReorder = (apiRef2, props) => {
  const logger = useGridLogger(apiRef2, "useGridColumnReorder");
  const dragColNode = React27.useRef(null);
  const cursorPosition = React27.useRef({
    x: 0,
    y: 0
  });
  const originColumnIndex = React27.useRef(null);
  const forbiddenIndexes = React27.useRef({});
  const removeDnDStylesTimeout = React27.useRef(void 0);
  const ownerState = {
    classes: props.classes
  };
  const classes = useUtilityClasses5(ownerState);
  const isRtl = useRtl();
  React27.useEffect(() => {
    return () => {
      clearTimeout(removeDnDStylesTimeout.current);
    };
  }, []);
  const handleDragStart = React27.useCallback((params, event) => {
    if (props.disableColumnReorder || params.colDef.disableReorder) {
      return;
    }
    logger.debug(`Start dragging col ${params.field}`);
    event.stopPropagation();
    dragColNode.current = event.currentTarget;
    dragColNode.current.classList.add(classes.columnHeaderDragging);
    if (event.dataTransfer) {
      event.dataTransfer.effectAllowed = "move";
    }
    apiRef2.current.setState((state) => _extends({}, state, {
      columnReorder: _extends({}, state.columnReorder, {
        dragCol: params.field
      })
    }));
    apiRef2.current.forceUpdate();
    removeDnDStylesTimeout.current = setTimeout(() => {
      dragColNode.current.classList.remove(classes.columnHeaderDragging);
    });
    originColumnIndex.current = apiRef2.current.getColumnIndex(params.field, false);
    const draggingColumnGroupPath = apiRef2.current.getColumnGroupPath(params.field);
    const columnIndex = originColumnIndex.current;
    const allColumns = apiRef2.current.getAllColumns();
    const groupsLookup = apiRef2.current.getAllGroupDetails();
    const getGroupPathFromColumnIndex = (colIndex) => {
      const field = allColumns[colIndex].field;
      return apiRef2.current.getColumnGroupPath(field);
    };
    let limitingGroupId = null;
    draggingColumnGroupPath.forEach((groupId) => {
      var _a3;
      if (!((_a3 = groupsLookup[groupId]) == null ? void 0 : _a3.freeReordering)) {
        if (columnIndex > 0 && getGroupPathFromColumnIndex(columnIndex - 1).includes(groupId)) {
          limitingGroupId = groupId;
        } else if (columnIndex + 1 < allColumns.length && getGroupPathFromColumnIndex(columnIndex + 1).includes(groupId)) {
          limitingGroupId = groupId;
        }
      }
    });
    forbiddenIndexes.current = {};
    for (let indexToForbid = 0; indexToForbid < allColumns.length; indexToForbid += 1) {
      const leftIndex = indexToForbid <= columnIndex ? indexToForbid - 1 : indexToForbid;
      const rightIndex = indexToForbid < columnIndex ? indexToForbid : indexToForbid + 1;
      if (limitingGroupId !== null) {
        let allowIndex = false;
        if (leftIndex >= 0 && getGroupPathFromColumnIndex(leftIndex).includes(limitingGroupId)) {
          allowIndex = true;
        } else if (rightIndex < allColumns.length && getGroupPathFromColumnIndex(rightIndex).includes(limitingGroupId)) {
          allowIndex = true;
        }
        if (!allowIndex) {
          forbiddenIndexes.current[indexToForbid] = true;
        }
      }
      if (leftIndex >= 0 && rightIndex < allColumns.length) {
        getGroupPathFromColumnIndex(rightIndex).forEach((groupId) => {
          var _a3;
          if (getGroupPathFromColumnIndex(leftIndex).includes(groupId)) {
            if (!draggingColumnGroupPath.includes(groupId)) {
              if (!((_a3 = groupsLookup[groupId]) == null ? void 0 : _a3.freeReordering)) {
                forbiddenIndexes.current[indexToForbid] = true;
              }
            }
          }
        });
      }
    }
  }, [props.disableColumnReorder, classes.columnHeaderDragging, logger, apiRef2]);
  const handleDragEnter = React27.useCallback((params, event) => {
    event.preventDefault();
    event.stopPropagation();
  }, []);
  const handleDragOver = React27.useCallback((params, event) => {
    const dragColField = gridColumnReorderDragColSelector(apiRef2);
    if (!dragColField) {
      return;
    }
    logger.debug(`Dragging over col ${params.field}`);
    event.preventDefault();
    event.stopPropagation();
    const coordinates = {
      x: event.clientX,
      y: event.clientY
    };
    if (params.field !== dragColField && hasCursorPositionChanged(cursorPosition.current, coordinates)) {
      const targetColIndex = apiRef2.current.getColumnIndex(params.field, false);
      const targetColVisibleIndex = apiRef2.current.getColumnIndex(params.field, true);
      const targetCol = apiRef2.current.getColumn(params.field);
      const dragColIndex = apiRef2.current.getColumnIndex(dragColField, false);
      const visibleColumns = apiRef2.current.getVisibleColumns();
      const allColumns = apiRef2.current.getAllColumns();
      const cursorMoveDirectionX = getCursorMoveDirectionX(cursorPosition.current, coordinates);
      const hasMovedLeft = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_LEFT && (isRtl ? dragColIndex < targetColIndex : targetColIndex < dragColIndex);
      const hasMovedRight = cursorMoveDirectionX === CURSOR_MOVE_DIRECTION_RIGHT && (isRtl ? targetColIndex < dragColIndex : dragColIndex < targetColIndex);
      if (hasMovedLeft || hasMovedRight) {
        let canBeReordered;
        let indexOffsetInHiddenColumns = 0;
        if (!targetCol.disableReorder) {
          canBeReordered = true;
        } else if (hasMovedLeft) {
          canBeReordered = targetColVisibleIndex > 0 && !visibleColumns[targetColVisibleIndex - 1].disableReorder;
        } else {
          canBeReordered = targetColVisibleIndex < visibleColumns.length - 1 && !visibleColumns[targetColVisibleIndex + 1].disableReorder;
        }
        if (forbiddenIndexes.current[targetColIndex]) {
          let nextVisibleColumnField;
          let indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;
          if (hasMovedLeft) {
            nextVisibleColumnField = targetColVisibleIndex > 0 ? visibleColumns[targetColVisibleIndex - 1].field : null;
            while (indexWithOffset > 0 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {
              indexOffsetInHiddenColumns -= 1;
              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;
            }
          } else {
            nextVisibleColumnField = targetColVisibleIndex + 1 < visibleColumns.length ? visibleColumns[targetColVisibleIndex + 1].field : null;
            while (indexWithOffset < allColumns.length - 1 && allColumns[indexWithOffset].field !== nextVisibleColumnField && forbiddenIndexes.current[indexWithOffset]) {
              indexOffsetInHiddenColumns += 1;
              indexWithOffset = targetColIndex + indexOffsetInHiddenColumns;
            }
          }
          if (forbiddenIndexes.current[indexWithOffset] || allColumns[indexWithOffset].field === nextVisibleColumnField) {
            canBeReordered = false;
          }
        }
        const canBeReorderedProcessed = apiRef2.current.unstable_applyPipeProcessors("canBeReordered", canBeReordered, {
          targetIndex: targetColVisibleIndex
        });
        if (canBeReorderedProcessed) {
          apiRef2.current.setColumnIndex(dragColField, targetColIndex + indexOffsetInHiddenColumns);
        }
      }
      cursorPosition.current = coordinates;
    }
  }, [apiRef2, logger, isRtl]);
  const handleDragEnd = React27.useCallback((params, event) => {
    const dragColField = gridColumnReorderDragColSelector(apiRef2);
    if (props.disableColumnReorder || !dragColField) {
      return;
    }
    logger.debug("End dragging col");
    event.preventDefault();
    event.stopPropagation();
    clearTimeout(removeDnDStylesTimeout.current);
    if (dragColNode.current.classList.contains(classes.columnHeaderDragging)) {
      dragColNode.current.classList.remove(classes.columnHeaderDragging);
    }
    dragColNode.current = null;
    if (event.dataTransfer.dropEffect === "none" && !props.keepColumnPositionIfDraggedOutside) {
      apiRef2.current.setColumnIndex(dragColField, originColumnIndex.current);
      originColumnIndex.current = null;
    } else {
      const columnOrderChangeParams = {
        column: apiRef2.current.getColumn(dragColField),
        targetIndex: apiRef2.current.getColumnIndexRelativeToVisibleColumns(dragColField),
        oldIndex: originColumnIndex.current
      };
      apiRef2.current.publishEvent("columnOrderChange", columnOrderChangeParams);
    }
    apiRef2.current.setState((state) => _extends({}, state, {
      columnReorder: _extends({}, state.columnReorder, {
        dragCol: ""
      })
    }));
    apiRef2.current.forceUpdate();
  }, [apiRef2, props.disableColumnReorder, props.keepColumnPositionIfDraggedOutside, logger, classes.columnHeaderDragging]);
  useGridApiEventHandler(apiRef2, "columnHeaderDragStart", handleDragStart);
  useGridApiEventHandler(apiRef2, "columnHeaderDragEnter", handleDragEnter);
  useGridApiEventHandler(apiRef2, "columnHeaderDragOver", handleDragOver);
  useGridApiEventHandler(apiRef2, "columnHeaderDragEnd", handleDragEnd);
  useGridApiEventHandler(apiRef2, "cellDragEnter", handleDragEnter);
  useGridApiEventHandler(apiRef2, "cellDragOver", handleDragOver);
  useGridApiOptionHandler(apiRef2, "columnOrderChange", props.onColumnOrderChange);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/treeData/useGridTreeData.js
var React28 = __toESM(require_react());
var useGridTreeData = (apiRef2, props) => {
  const handleCellKeyDown = React28.useCallback((params, event) => {
    const cellParams = apiRef2.current.getCellParams(params.id, params.field);
    if (cellParams.colDef.field === GRID_TREE_DATA_GROUPING_FIELD && (event.key === " " || event.key === "Enter") && !event.shiftKey) {
      if (params.rowNode.type !== "group") {
        return;
      }
      if (props.unstable_dataSource && !params.rowNode.childrenExpanded) {
        apiRef2.current.unstable_dataSource.fetchRows(params.id);
        return;
      }
      apiRef2.current.setRowChildrenExpansion(params.id, !params.rowNode.childrenExpanded);
    }
  }, [apiRef2, props.unstable_dataSource]);
  useGridApiEventHandler(apiRef2, "cellKeyDown", handleCellKeyDown);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/treeData/useGridTreeDataPreProcessors.js
var React29 = __toESM(require_react());

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/treeData/gridTreeDataUtils.js
var TreeDataStrategy = function(TreeDataStrategy2) {
  TreeDataStrategy2["Default"] = "tree-data";
  TreeDataStrategy2["DataSource"] = "tree-data-source";
  return TreeDataStrategy2;
}({});
var filterRowTreeFromTreeData = (params) => {
  const {
    apiRef: apiRef2,
    rowTree,
    disableChildrenFiltering,
    isRowMatchingFilters
  } = params;
  const filteredRowsLookup = {};
  const filteredChildrenCountLookup = {};
  const filteredDescendantCountLookup = {};
  const filterCache = {};
  const filterResults = {
    passingFilterItems: null,
    passingQuickFilterValues: null
  };
  const filterTreeNode = (node, isParentMatchingFilters, areAncestorsExpanded) => {
    const shouldSkipFilters = disableChildrenFiltering && node.depth > 0;
    let isMatchingFilters;
    if (shouldSkipFilters) {
      isMatchingFilters = null;
    } else if (!isRowMatchingFilters || node.type === "footer") {
      isMatchingFilters = true;
    } else {
      const row = apiRef2.current.getRow(node.id);
      isRowMatchingFilters(row, void 0, filterResults);
      isMatchingFilters = passFilterLogic([filterResults.passingFilterItems], [filterResults.passingQuickFilterValues], params.filterModel, params.apiRef, filterCache);
    }
    let filteredChildrenCount = 0;
    let filteredDescendantCount = 0;
    if (node.type === "group") {
      node.children.forEach((childId) => {
        const childNode = rowTree[childId];
        const childSubTreeSize = filterTreeNode(childNode, isMatchingFilters ?? isParentMatchingFilters, areAncestorsExpanded && !!node.childrenExpanded);
        filteredDescendantCount += childSubTreeSize;
        if (childSubTreeSize > 0) {
          filteredChildrenCount += 1;
        }
      });
    }
    let shouldPassFilters;
    switch (isMatchingFilters) {
      case true: {
        shouldPassFilters = true;
        break;
      }
      case false: {
        shouldPassFilters = filteredDescendantCount > 0;
        break;
      }
      default: {
        shouldPassFilters = isParentMatchingFilters;
        break;
      }
    }
    filteredRowsLookup[node.id] = shouldPassFilters;
    if (!shouldPassFilters) {
      return 0;
    }
    filteredChildrenCountLookup[node.id] = filteredChildrenCount;
    filteredDescendantCountLookup[node.id] = filteredDescendantCount;
    if (node.type === "footer") {
      return filteredDescendantCount;
    }
    return filteredDescendantCount + 1;
  };
  const nodes = Object.values(rowTree);
  for (let i2 = 0; i2 < nodes.length; i2 += 1) {
    const node = nodes[i2];
    if (node.depth === 0) {
      filterTreeNode(node, true, true);
    }
  }
  return {
    filteredRowsLookup,
    filteredChildrenCountLookup,
    filteredDescendantCountLookup
  };
};

// node_modules/@mui/x-data-grid-pro/esm/utils/tree/insertDataRowInTree.js
var insertDataRowInTree = ({
  id,
  path,
  updatedGroupsManager,
  previousTree,
  tree,
  treeDepths,
  onDuplicatePath,
  isGroupExpandedByDefault,
  defaultGroupingExpansionDepth,
  serverChildrenCount,
  groupsToFetch
}) => {
  var _a3, _b2;
  let parentNodeId = GRID_ROOT_GROUP_ID;
  for (let depth = 0; depth < path.length; depth += 1) {
    const {
      key,
      field
    } = path[depth];
    const fieldWithDefaultValue = field ?? "__no_field__";
    const keyWithDefaultValue = key ?? "__no_key__";
    const existingNodeIdWithPartialPath = (_b2 = (_a3 = tree[parentNodeId].childrenFromPath) == null ? void 0 : _a3[fieldWithDefaultValue]) == null ? void 0 : _b2[keyWithDefaultValue.toString()];
    if (depth === path.length - 1) {
      if (existingNodeIdWithPartialPath == null) {
        let node;
        if (serverChildrenCount !== void 0 && serverChildrenCount !== 0) {
          node = {
            type: "group",
            id,
            parent: parentNodeId,
            path: path.map((step) => step.key),
            depth,
            isAutoGenerated: false,
            groupingKey: key,
            groupingField: field,
            children: [],
            childrenFromPath: {},
            childrenExpanded: false,
            serverChildrenCount
          };
          const shouldFetchChildren = checkGroupChildrenExpansion(node, defaultGroupingExpansionDepth, isGroupExpandedByDefault);
          if (shouldFetchChildren) {
            groupsToFetch == null ? void 0 : groupsToFetch.add(id);
          }
        } else {
          node = {
            type: "leaf",
            id,
            depth,
            parent: parentNodeId,
            groupingKey: key
          };
        }
        updatedGroupsManager == null ? void 0 : updatedGroupsManager.addAction(parentNodeId, "insertChildren");
        insertNodeInTree(node, tree, treeDepths, previousTree);
      } else {
        const existingNodeWithPartialPath = tree[existingNodeIdWithPartialPath];
        if (existingNodeWithPartialPath.type === "group" && existingNodeWithPartialPath.isAutoGenerated) {
          updatedGroupsManager == null ? void 0 : updatedGroupsManager.addAction(parentNodeId, "removeChildren");
          updatedGroupsManager == null ? void 0 : updatedGroupsManager.addAction(parentNodeId, "insertChildren");
          updateGroupNodeIdAndAutoGenerated({
            tree,
            previousTree,
            treeDepths,
            node: existingNodeWithPartialPath,
            updatedNode: {
              id,
              isAutoGenerated: false
            }
          });
        } else {
          onDuplicatePath == null ? void 0 : onDuplicatePath(existingNodeIdWithPartialPath, id, path);
        }
      }
    } else if (existingNodeIdWithPartialPath == null) {
      const nodeId = getGroupRowIdFromPath(path.slice(0, depth + 1));
      const autoGeneratedGroupNode = {
        type: "group",
        id: nodeId,
        parent: parentNodeId,
        depth,
        isAutoGenerated: true,
        groupingKey: key,
        groupingField: field,
        children: [],
        childrenFromPath: {},
        childrenExpanded: false
      };
      updatedGroupsManager == null ? void 0 : updatedGroupsManager.addAction(parentNodeId, "insertChildren");
      insertNodeInTree(updateGroupDefaultExpansion(autoGeneratedGroupNode, defaultGroupingExpansionDepth, isGroupExpandedByDefault), tree, treeDepths, previousTree);
      parentNodeId = nodeId;
    } else {
      const currentGroupNode = tree[existingNodeIdWithPartialPath];
      if (currentGroupNode.type !== "group") {
        const groupNode = {
          type: "group",
          id: currentGroupNode.id,
          parent: currentGroupNode.parent,
          depth: currentGroupNode.depth,
          isAutoGenerated: false,
          groupingKey: key,
          groupingField: field,
          children: [],
          childrenFromPath: {},
          childrenExpanded: false
        };
        tree[existingNodeIdWithPartialPath] = updateGroupDefaultExpansion(groupNode, defaultGroupingExpansionDepth, isGroupExpandedByDefault);
      }
      parentNodeId = currentGroupNode.id;
    }
  }
};

// node_modules/@mui/x-data-grid-pro/esm/utils/tree/createRowTree.js
var createRowTree = (params) => {
  const dataRowIds = [];
  const tree = {
    [GRID_ROOT_GROUP_ID]: buildRootGroup()
  };
  const treeDepths = {};
  const groupsToFetch = /* @__PURE__ */ new Set();
  for (let i2 = 0; i2 < params.nodes.length; i2 += 1) {
    const node = params.nodes[i2];
    dataRowIds.push(node.id);
    insertDataRowInTree({
      tree,
      previousTree: params.previousTree,
      id: node.id,
      path: node.path,
      serverChildrenCount: node.serverChildrenCount,
      onDuplicatePath: params.onDuplicatePath,
      treeDepths,
      isGroupExpandedByDefault: params.isGroupExpandedByDefault,
      defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth,
      groupsToFetch
    });
  }
  return {
    tree,
    treeDepths,
    groupingName: params.groupingName,
    dataRowIds,
    groupsToFetch: Array.from(groupsToFetch)
  };
};

// node_modules/@mui/x-data-grid-pro/esm/utils/tree/sortRowTree.js
var Node = class {
  constructor(data, next) {
    this.next = void 0;
    this.data = void 0;
    this.next = next;
    this.data = data;
  }
  insertAfter(list) {
    if (!list.first || !list.last) {
      return;
    }
    const next = this.next;
    this.next = list.first;
    list.last.next = next;
  }
};
var List = class _List {
  constructor(first, last) {
    this.first = void 0;
    this.last = void 0;
    this.first = first;
    this.last = last;
  }
  data() {
    const array = [];
    this.forEach((node) => {
      array.push(node.data);
    });
    return array;
  }
  forEach(fn) {
    let current = this.first;
    while (current !== null) {
      fn(current);
      current = current.next;
    }
  }
  static from(array) {
    if (array.length === 0) {
      return new _List(null, null);
    }
    let index = 0;
    const first = new Node(array[index], null);
    let current = first;
    while (index + 1 < array.length) {
      index += 1;
      const node = new Node(array[index], null);
      current.next = node;
      current = node;
    }
    return new _List(first, current);
  }
};
var sortRowTree = (params) => {
  const {
    rowTree,
    disableChildrenSorting,
    sortRowList,
    shouldRenderGroupBelowLeaves
  } = params;
  const sortedGroupedByParentRows = /* @__PURE__ */ new Map();
  const sortGroup = (node) => {
    const shouldSortGroup = !!sortRowList && (!disableChildrenSorting || node.depth === -1);
    let sortedRowIds;
    if (shouldSortGroup) {
      for (let i2 = 0; i2 < node.children.length; i2 += 1) {
        const childNode = rowTree[node.children[i2]];
        if (childNode.type === "group") {
          sortGroup(childNode);
        }
      }
      sortedRowIds = sortRowList(node.children.map((childId) => rowTree[childId]));
    } else if (shouldRenderGroupBelowLeaves) {
      const childrenLeaves = [];
      const childrenGroups = [];
      for (let i2 = 0; i2 < node.children.length; i2 += 1) {
        const childId = node.children[i2];
        const childNode = rowTree[childId];
        if (childNode.type === "group") {
          sortGroup(childNode);
          childrenGroups.push(childId);
        } else if (childNode.type === "leaf") {
          childrenLeaves.push(childId);
        }
      }
      sortedRowIds = [...childrenLeaves, ...childrenGroups];
    } else {
      for (let i2 = 0; i2 < node.children.length; i2 += 1) {
        const childNode = rowTree[node.children[i2]];
        if (childNode.type === "group") {
          sortGroup(childNode);
        }
      }
      sortedRowIds = [...node.children];
    }
    if (node.footerId != null) {
      sortedRowIds.push(node.footerId);
    }
    sortedGroupedByParentRows.set(node.id, sortedRowIds);
  };
  sortGroup(rowTree[GRID_ROOT_GROUP_ID]);
  const rootList = List.from(sortedGroupedByParentRows.get(GRID_ROOT_GROUP_ID));
  rootList.forEach((node) => {
    const children = sortedGroupedByParentRows.get(node.data);
    if (children == null ? void 0 : children.length) {
      node.insertAfter(List.from(children));
    }
  });
  return rootList.data();
};

// node_modules/@mui/x-data-grid-pro/esm/utils/tree/removeDataRowFromTree.js
var removeNodeAndCleanParent = ({
  node,
  tree,
  treeDepths,
  updatedGroupsManager
}) => {
  removeNodeFromTree({
    node,
    tree,
    treeDepths
  });
  if (node.type === "group" && node.footerId != null) {
    removeNodeFromTree({
      node: tree[node.footerId],
      tree,
      treeDepths
    });
  }
  const parentNode = tree[node.parent];
  updatedGroupsManager == null ? void 0 : updatedGroupsManager.addAction(parentNode.id, "removeChildren");
  const shouldDeleteGroup = parentNode.id !== GRID_ROOT_GROUP_ID && parentNode.children.length === 0;
  if (shouldDeleteGroup) {
    if (parentNode.isAutoGenerated) {
      removeNodeAndCleanParent({
        node: parentNode,
        tree,
        treeDepths
      });
    } else {
      tree[parentNode.id] = {
        type: "leaf",
        id: parentNode.id,
        depth: parentNode.depth,
        parent: parentNode.parent,
        groupingKey: parentNode.groupingKey
      };
    }
  }
};
var replaceDataGroupWithAutoGeneratedGroup = ({
  node,
  tree,
  treeDepths,
  updatedGroupsManager
}) => {
  updatedGroupsManager == null ? void 0 : updatedGroupsManager.addAction(node.parent, "removeChildren");
  updatedGroupsManager == null ? void 0 : updatedGroupsManager.addAction(node.parent, "insertChildren");
  updateGroupNodeIdAndAutoGenerated({
    previousTree: null,
    tree,
    treeDepths,
    node,
    updatedNode: {
      id: getGroupRowIdFromPath(getNodePathInTree({
        id: node.id,
        tree
      })),
      isAutoGenerated: true
    }
  });
};
var removeDataRowFromTree = ({
  id,
  tree,
  treeDepths,
  updatedGroupsManager
}) => {
  const node = tree[id];
  if (node.type === "group" && node.children.length > 0) {
    replaceDataGroupWithAutoGeneratedGroup({
      node,
      tree,
      treeDepths,
      updatedGroupsManager
    });
  } else {
    removeNodeAndCleanParent({
      node,
      tree,
      treeDepths,
      updatedGroupsManager
    });
  }
};

// node_modules/@mui/x-data-grid-pro/esm/utils/tree/updateRowTree.js
var updateRowTree = (params) => {
  const tree = _extends({}, params.previousTree);
  const treeDepths = _extends({}, params.previousTreeDepth);
  const updatedGroupsManager = createUpdatedGroupsManager();
  const groupsToFetch = params.previousGroupsToFetch ? /* @__PURE__ */ new Set([...params.previousGroupsToFetch]) : /* @__PURE__ */ new Set([]);
  for (let i2 = 0; i2 < params.nodes.inserted.length; i2 += 1) {
    const {
      id,
      path,
      serverChildrenCount
    } = params.nodes.inserted[i2];
    insertDataRowInTree({
      previousTree: params.previousTree,
      tree,
      treeDepths,
      updatedGroupsManager,
      id,
      path,
      serverChildrenCount,
      onDuplicatePath: params.onDuplicatePath,
      isGroupExpandedByDefault: params.isGroupExpandedByDefault,
      defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth,
      groupsToFetch
    });
  }
  for (let i2 = 0; i2 < params.nodes.removed.length; i2 += 1) {
    const nodeId = params.nodes.removed[i2];
    removeDataRowFromTree({
      tree,
      treeDepths,
      updatedGroupsManager,
      id: nodeId
    });
  }
  for (let i2 = 0; i2 < params.nodes.modified.length; i2 += 1) {
    const {
      id,
      path,
      serverChildrenCount
    } = params.nodes.modified[i2];
    const pathInPreviousTree = getNodePathInTree({
      tree,
      id
    });
    const isInSameGroup = isDeepEqual(pathInPreviousTree, path);
    if (!isInSameGroup) {
      removeDataRowFromTree({
        tree,
        treeDepths,
        updatedGroupsManager,
        id
      });
      insertDataRowInTree({
        previousTree: params.previousTree,
        tree,
        treeDepths,
        updatedGroupsManager,
        id,
        path,
        serverChildrenCount,
        onDuplicatePath: params.onDuplicatePath,
        isGroupExpandedByDefault: params.isGroupExpandedByDefault,
        defaultGroupingExpansionDepth: params.defaultGroupingExpansionDepth,
        groupsToFetch
      });
    } else {
      updatedGroupsManager == null ? void 0 : updatedGroupsManager.addAction(tree[id].parent, "modifyChildren");
    }
  }
  const dataRowIds = getTreeNodeDescendants(tree, GRID_ROOT_GROUP_ID, true);
  return {
    tree,
    treeDepths,
    groupingName: params.groupingName,
    dataRowIds,
    updatedGroupsManager,
    groupsToFetch: Array.from(groupsToFetch)
  };
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/treeData/useGridTreeDataPreProcessors.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var _excluded3 = ["hideDescendantCount"];
var useGridTreeDataPreProcessors = (privateApiRef, props) => {
  const setStrategyAvailability2 = React29.useCallback(() => {
    privateApiRef.current.setStrategyAvailability("rowTree", TreeDataStrategy.Default, props.treeData && !props.unstable_dataSource ? () => true : () => false);
  }, [privateApiRef, props.treeData, props.unstable_dataSource]);
  const getGroupingColDef = React29.useCallback(() => {
    const groupingColDefProp = props.groupingColDef;
    let colDefOverride;
    if (typeof groupingColDefProp === "function") {
      const params = {
        groupingName: TreeDataStrategy.Default,
        fields: []
      };
      colDefOverride = groupingColDefProp(params);
    } else {
      colDefOverride = groupingColDefProp;
    }
    const _ref = colDefOverride ?? {}, {
      hideDescendantCount
    } = _ref, colDefOverrideProperties = _objectWithoutPropertiesLoose(_ref, _excluded3);
    const commonProperties = _extends({}, GRID_TREE_DATA_GROUPING_COL_DEF, {
      renderCell: (params) => (0, import_jsx_runtime24.jsx)(GridTreeDataGroupingCell, _extends({}, params, {
        hideDescendantCount
      })),
      headerName: privateApiRef.current.getLocaleText("treeDataGroupingHeaderName")
    });
    return _extends({}, commonProperties, colDefOverrideProperties, GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES);
  }, [privateApiRef, props.groupingColDef]);
  const updateGroupingColumn = React29.useCallback((columnsState) => {
    if (props.unstable_dataSource) {
      return columnsState;
    }
    const groupingColDefField = GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES.field;
    const shouldHaveGroupingColumn = props.treeData;
    const prevGroupingColumn = columnsState.lookup[groupingColDefField];
    if (shouldHaveGroupingColumn) {
      const newGroupingColumn = getGroupingColDef();
      if (prevGroupingColumn) {
        newGroupingColumn.width = prevGroupingColumn.width;
        newGroupingColumn.flex = prevGroupingColumn.flex;
      }
      columnsState.lookup[groupingColDefField] = newGroupingColumn;
      if (prevGroupingColumn == null) {
        const index = columnsState.orderedFields[0] === GRID_CHECKBOX_SELECTION_FIELD ? 1 : 0;
        columnsState.orderedFields = [...columnsState.orderedFields.slice(0, index), groupingColDefField, ...columnsState.orderedFields.slice(index)];
      }
    } else if (!shouldHaveGroupingColumn && prevGroupingColumn) {
      delete columnsState.lookup[groupingColDefField];
      columnsState.orderedFields = columnsState.orderedFields.filter((field) => field !== groupingColDefField);
    }
    return columnsState;
  }, [props.treeData, props.unstable_dataSource, getGroupingColDef]);
  const createRowTreeForTreeData = React29.useCallback((params) => {
    if (!props.getTreeDataPath) {
      throw new Error("MUI X: No getTreeDataPath given.");
    }
    const getRowTreeBuilderNode = (rowId) => ({
      id: rowId,
      path: props.getTreeDataPath(params.dataRowIdToModelLookup[rowId]).map((key) => ({
        key,
        field: null
      }))
    });
    const onDuplicatePath = (firstId, secondId, path) => {
      throw new Error(["MUI X: The path returned by `getTreeDataPath` should be unique.", `The rows with id #${firstId} and #${secondId} have the same.`, `Path: ${JSON.stringify(path.map((step) => step.key))}.`].join("\n"));
    };
    if (params.updates.type === "full") {
      return createRowTree({
        previousTree: params.previousTree,
        nodes: params.updates.rows.map(getRowTreeBuilderNode),
        defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,
        isGroupExpandedByDefault: props.isGroupExpandedByDefault,
        groupingName: TreeDataStrategy.Default,
        onDuplicatePath
      });
    }
    return updateRowTree({
      nodes: {
        inserted: params.updates.actions.insert.map(getRowTreeBuilderNode),
        modified: params.updates.actions.modify.map(getRowTreeBuilderNode),
        removed: params.updates.actions.remove
      },
      previousTree: params.previousTree,
      previousTreeDepth: params.previousTreeDepths,
      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,
      isGroupExpandedByDefault: props.isGroupExpandedByDefault,
      groupingName: TreeDataStrategy.Default
    });
  }, [props.getTreeDataPath, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);
  const filterRows = React29.useCallback((params) => {
    const rowTree = gridRowTreeSelector(privateApiRef);
    return filterRowTreeFromTreeData({
      rowTree,
      isRowMatchingFilters: params.isRowMatchingFilters,
      disableChildrenFiltering: props.disableChildrenFiltering,
      filterModel: params.filterModel,
      apiRef: privateApiRef
    });
  }, [privateApiRef, props.disableChildrenFiltering]);
  const sortRows = React29.useCallback((params) => {
    const rowTree = gridRowTreeSelector(privateApiRef);
    return sortRowTree({
      rowTree,
      sortRowList: params.sortRowList,
      disableChildrenSorting: props.disableChildrenSorting,
      shouldRenderGroupBelowLeaves: false
    });
  }, [privateApiRef, props.disableChildrenSorting]);
  useGridRegisterPipeProcessor(privateApiRef, "hydrateColumns", updateGroupingColumn);
  useGridRegisterStrategyProcessor(privateApiRef, TreeDataStrategy.Default, "rowTreeCreation", createRowTreeForTreeData);
  useGridRegisterStrategyProcessor(privateApiRef, TreeDataStrategy.Default, "filtering", filterRows);
  useGridRegisterStrategyProcessor(privateApiRef, TreeDataStrategy.Default, "sorting", sortRows);
  useGridRegisterStrategyProcessor(privateApiRef, TreeDataStrategy.Default, "visibleRowsLookupCreation", getVisibleRowsLookup);
  useFirstRender(() => {
    setStrategyAvailability2();
  });
  const isFirstRender = React29.useRef(true);
  React29.useEffect(() => {
    if (!isFirstRender.current) {
      setStrategyAvailability2();
    } else {
      isFirstRender.current = false;
    }
  }, [setStrategyAvailability2]);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/serverSideTreeData/useGridDataSourceTreeDataPreProcessors.js
var React31 = __toESM(require_react());

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/serverSideTreeData/utils.js
function skipFiltering(rowTree) {
  const filteredRowsLookup = {};
  const filteredChildrenCountLookup = {};
  const nodes = Object.values(rowTree);
  for (let i2 = 0; i2 < nodes.length; i2 += 1) {
    const node = nodes[i2];
    filteredRowsLookup[node.id] = true;
    filteredChildrenCountLookup[node.id] = node.serverChildrenCount ?? 0;
  }
  return {
    filteredRowsLookup,
    filteredChildrenCountLookup,
    filteredDescendantCountLookup: defaultGridFilterLookup.filteredDescendantCountLookup
  };
}
function skipSorting(rowTree) {
  return getTreeNodeDescendants(rowTree, GRID_ROOT_GROUP_ID, false);
}

// node_modules/@mui/x-data-grid-pro/esm/components/GridDataSourceTreeDataGroupingCell.js
var React30 = __toESM(require_react());

// node_modules/@mui/x-data-grid-pro/esm/hooks/utils/useGridPrivateApiContext.js
var useGridPrivateApiContext2 = useGridPrivateApiContext;

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/dataSource/gridDataSourceSelector.js
var computeStartEnd = (paginationModel) => {
  const start = paginationModel.page * paginationModel.pageSize;
  const end = start + paginationModel.pageSize - 1;
  return {
    start,
    end
  };
};
var gridGetRowsParamsSelector = createSelector(gridFilterModelSelector, gridSortModelSelector, gridPaginationModelSelector, (filterModel, sortModel, paginationModel) => {
  return _extends({
    groupKeys: [],
    paginationModel,
    sortModel,
    filterModel
  }, computeStartEnd(paginationModel));
});
var gridDataSourceStateSelector = (state) => state.dataSource;
var gridDataSourceLoadingSelector = createSelector(gridDataSourceStateSelector, (dataSource) => dataSource.loading);
var gridDataSourceLoadingIdSelector = createSelectorV8(gridDataSourceStateSelector, (dataSource, id) => dataSource.loading[id] ?? false);
var gridDataSourceErrorsSelector = createSelector(gridDataSourceStateSelector, (dataSource) => dataSource.errors);
var gridDataSourceErrorSelector = createSelectorV8(gridDataSourceStateSelector, (dataSource, id) => dataSource.errors[id]);

// node_modules/@mui/x-data-grid-pro/esm/components/GridDataSourceTreeDataGroupingCell.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var useUtilityClasses6 = (ownerState) => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ["treeDataGroupingCell"],
    toggle: ["treeDataGroupingCellToggle"],
    loadingContainer: ["treeDataGroupingCellLoadingContainer"]
  };
  return composeClasses(slots, getDataGridUtilityClass, classes);
};
function GridTreeDataGroupingCellIcon(props) {
  var _a3;
  const apiRef2 = useGridPrivateApiContext2();
  const rootProps = useGridRootProps2();
  const classes = useUtilityClasses6(rootProps);
  const {
    rowNode,
    id,
    field,
    descendantCount
  } = props;
  const isDataLoading = useGridSelectorV8(apiRef2, gridDataSourceLoadingIdSelector, id);
  const error = useGridSelectorV8(apiRef2, gridDataSourceErrorSelector, id);
  const handleClick = (event) => {
    if (!rowNode.childrenExpanded) {
      apiRef2.current.unstable_dataSource.fetchRows(id);
    } else {
      apiRef2.current.setRowChildrenExpansion(id, !rowNode.childrenExpanded);
    }
    apiRef2.current.setCellFocus(id, field);
    event.stopPropagation();
  };
  const Icon = rowNode.childrenExpanded ? rootProps.slots.treeDataCollapseIcon : rootProps.slots.treeDataExpandIcon;
  if (isDataLoading) {
    return (0, import_jsx_runtime25.jsx)("div", {
      className: classes.loadingContainer,
      children: (0, import_jsx_runtime25.jsx)(CircularProgress_default, {
        size: "1rem",
        color: "inherit"
      })
    });
  }
  return descendantCount > 0 ? (0, import_jsx_runtime25.jsx)(rootProps.slots.baseIconButton, _extends({
    size: "small",
    onClick: handleClick,
    tabIndex: -1,
    "aria-label": rowNode.childrenExpanded ? apiRef2.current.getLocaleText("treeDataCollapse") : apiRef2.current.getLocaleText("treeDataExpand")
  }, (_a3 = rootProps == null ? void 0 : rootProps.slotProps) == null ? void 0 : _a3.baseIconButton, {
    children: (0, import_jsx_runtime25.jsx)(rootProps.slots.baseTooltip, {
      title: (error == null ? void 0 : error.message) ?? null,
      children: (0, import_jsx_runtime25.jsx)(rootProps.slots.baseBadge, {
        variant: "dot",
        color: "error",
        invisible: !error,
        children: (0, import_jsx_runtime25.jsx)(Icon, {
          fontSize: "inherit"
        })
      })
    })
  })) : null;
}
function GridDataSourceTreeDataGroupingCell(props) {
  var _a3, _b2;
  const {
    id,
    field,
    formattedValue,
    rowNode,
    hideDescendantCount,
    offsetMultiplier = 2
  } = props;
  const rootProps = useGridRootProps2();
  const apiRef2 = useGridPrivateApiContext2();
  const rowSelector = (state) => state.rows.dataRowIdToModelLookup[id];
  const row = useGridSelector(apiRef2, rowSelector);
  const classes = useUtilityClasses6(rootProps);
  let descendantCount = 0;
  if (row) {
    descendantCount = Math.max(((_b2 = (_a3 = rootProps.unstable_dataSource) == null ? void 0 : _a3.getChildrenCount) == null ? void 0 : _b2.call(_a3, row)) ?? 0, 0);
  }
  return (0, import_jsx_runtime25.jsxs)(Box_default, {
    className: classes.root,
    sx: {
      ml: rowNode.depth * offsetMultiplier
    },
    children: [(0, import_jsx_runtime25.jsx)("div", {
      className: classes.toggle,
      children: (0, import_jsx_runtime25.jsx)(GridTreeDataGroupingCellIcon, {
        id,
        field,
        rowNode,
        row,
        descendantCount
      })
    }), (0, import_jsx_runtime25.jsxs)("span", {
      children: [formattedValue === void 0 ? rowNode.groupingKey : formattedValue, !hideDescendantCount && descendantCount > 0 ? ` (${descendantCount})` : ""]
    })]
  });
}

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/serverSideTreeData/useGridDataSourceTreeDataPreProcessors.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var _excluded4 = ["hideDescendantCount"];
var useGridDataSourceTreeDataPreProcessors = (privateApiRef, props) => {
  const setStrategyAvailability2 = React31.useCallback(() => {
    privateApiRef.current.setStrategyAvailability("rowTree", TreeDataStrategy.DataSource, props.treeData && props.unstable_dataSource ? () => true : () => false);
  }, [privateApiRef, props.treeData, props.unstable_dataSource]);
  const getGroupingColDef = React31.useCallback(() => {
    const groupingColDefProp = props.groupingColDef;
    let colDefOverride;
    if (typeof groupingColDefProp === "function") {
      const params = {
        groupingName: TreeDataStrategy.DataSource,
        fields: []
      };
      colDefOverride = groupingColDefProp(params);
    } else {
      colDefOverride = groupingColDefProp;
    }
    const _ref = colDefOverride ?? {}, {
      hideDescendantCount
    } = _ref, colDefOverrideProperties = _objectWithoutPropertiesLoose(_ref, _excluded4);
    const commonProperties = _extends({}, GRID_TREE_DATA_GROUPING_COL_DEF, {
      renderCell: (params) => (0, import_jsx_runtime26.jsx)(GridDataSourceTreeDataGroupingCell, _extends({}, params, {
        hideDescendantCount
      })),
      headerName: privateApiRef.current.getLocaleText("treeDataGroupingHeaderName")
    });
    return _extends({}, commonProperties, colDefOverrideProperties, GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES);
  }, [privateApiRef, props.groupingColDef]);
  const updateGroupingColumn = React31.useCallback((columnsState) => {
    if (!props.unstable_dataSource) {
      return columnsState;
    }
    const groupingColDefField = GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES.field;
    const shouldHaveGroupingColumn = props.treeData;
    const prevGroupingColumn = columnsState.lookup[groupingColDefField];
    if (shouldHaveGroupingColumn) {
      const newGroupingColumn = getGroupingColDef();
      if (prevGroupingColumn) {
        newGroupingColumn.width = prevGroupingColumn.width;
        newGroupingColumn.flex = prevGroupingColumn.flex;
      }
      columnsState.lookup[groupingColDefField] = newGroupingColumn;
      if (prevGroupingColumn == null) {
        const index = columnsState.orderedFields[0] === GRID_CHECKBOX_SELECTION_FIELD ? 1 : 0;
        columnsState.orderedFields = [...columnsState.orderedFields.slice(0, index), groupingColDefField, ...columnsState.orderedFields.slice(index)];
      }
    } else if (!shouldHaveGroupingColumn && prevGroupingColumn) {
      delete columnsState.lookup[groupingColDefField];
      columnsState.orderedFields = columnsState.orderedFields.filter((field) => field !== groupingColDefField);
    }
    return columnsState;
  }, [props.treeData, props.unstable_dataSource, getGroupingColDef]);
  const createRowTreeForTreeData = React31.useCallback((params) => {
    var _a3, _b2;
    const getGroupKey = (_a3 = props.unstable_dataSource) == null ? void 0 : _a3.getGroupKey;
    if (!getGroupKey) {
      throw new Error("MUI X: No `getGroupKey` method provided with the dataSource.");
    }
    const getChildrenCount = (_b2 = props.unstable_dataSource) == null ? void 0 : _b2.getChildrenCount;
    if (!getChildrenCount) {
      throw new Error("MUI X: No `getChildrenCount` method provided with the dataSource.");
    }
    const parentPath = params.updates.groupKeys ?? [];
    const getRowTreeBuilderNode = (rowId) => {
      const count = getChildrenCount(params.dataRowIdToModelLookup[rowId]);
      return {
        id: rowId,
        path: [...parentPath, getGroupKey(params.dataRowIdToModelLookup[rowId])].map((key) => ({
          key,
          field: null
        })),
        serverChildrenCount: count
      };
    };
    const onDuplicatePath = (firstId, secondId, path) => {
      throw new Error(["MUI X: The values returned by `getGroupKey` for all the sibling rows should be unique.", `The rows with id #${firstId} and #${secondId} have the same.`, `Path: ${JSON.stringify(path.map((step) => step.key))}.`].join("\n"));
    };
    if (params.updates.type === "full") {
      return createRowTree({
        previousTree: params.previousTree,
        nodes: params.updates.rows.map(getRowTreeBuilderNode),
        defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,
        isGroupExpandedByDefault: props.isGroupExpandedByDefault,
        groupingName: TreeDataStrategy.DataSource,
        onDuplicatePath
      });
    }
    return updateRowTree({
      nodes: {
        inserted: params.updates.actions.insert.map(getRowTreeBuilderNode),
        modified: params.updates.actions.modify.map(getRowTreeBuilderNode),
        removed: params.updates.actions.remove
      },
      previousTree: params.previousTree,
      previousGroupsToFetch: params.previousGroupsToFetch,
      previousTreeDepth: params.previousTreeDepths,
      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,
      isGroupExpandedByDefault: props.isGroupExpandedByDefault,
      groupingName: TreeDataStrategy.DataSource
    });
  }, [props.unstable_dataSource, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);
  const filterRows = React31.useCallback(() => {
    const rowTree = gridRowTreeSelector(privateApiRef);
    return skipFiltering(rowTree);
  }, [privateApiRef]);
  const sortRows = React31.useCallback(() => {
    const rowTree = gridRowTreeSelector(privateApiRef);
    return skipSorting(rowTree);
  }, [privateApiRef]);
  useGridRegisterPipeProcessor(privateApiRef, "hydrateColumns", updateGroupingColumn);
  useGridRegisterStrategyProcessor(privateApiRef, TreeDataStrategy.DataSource, "rowTreeCreation", createRowTreeForTreeData);
  useGridRegisterStrategyProcessor(privateApiRef, TreeDataStrategy.DataSource, "filtering", filterRows);
  useGridRegisterStrategyProcessor(privateApiRef, TreeDataStrategy.DataSource, "sorting", sortRows);
  useGridRegisterStrategyProcessor(privateApiRef, TreeDataStrategy.DataSource, "visibleRowsLookupCreation", getVisibleRowsLookup);
  useFirstRender(() => {
    setStrategyAvailability2();
  });
  const isFirstRender = React31.useRef(true);
  React31.useEffect(() => {
    if (!isFirstRender.current) {
      setStrategyAvailability2();
    } else {
      isFirstRender.current = false;
    }
  }, [setStrategyAvailability2]);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/columnPinning/useGridColumnPinning.js
var React32 = __toESM(require_react());
var columnPinningStateInitializer = (state, props, apiRef2) => {
  var _a3;
  apiRef2.current.caches.columnPinning = {
    orderedFieldsBeforePinningColumns: null
  };
  let model;
  if (props.pinnedColumns) {
    model = props.pinnedColumns;
  } else if ((_a3 = props.initialState) == null ? void 0 : _a3.pinnedColumns) {
    model = props.initialState.pinnedColumns;
  } else {
    model = {};
  }
  return _extends({}, state, {
    pinnedColumns: model
  });
};
var useGridColumnPinning = (apiRef2, props) => {
  var _a3;
  const pinnedColumns = useGridSelector(apiRef2, gridPinnedColumnsSelector);
  const calculateScrollLeft = React32.useCallback((initialValue, params) => {
    const visiblePinnedColumns = gridVisiblePinnedColumnDefinitionsSelector(apiRef2);
    if (!params.colIndex || visiblePinnedColumns.left.length === 0 && visiblePinnedColumns.right.length === 0) {
      return initialValue;
    }
    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef2);
    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef2);
    const columnPositions = gridColumnPositionsSelector(apiRef2);
    const clientWidth = apiRef2.current.virtualScrollerRef.current.clientWidth;
    const scrollLeft = Math.abs(apiRef2.current.virtualScrollerRef.current.scrollLeft);
    const offsetWidth = visibleColumns[params.colIndex].computedWidth;
    const offsetLeft = columnPositions[params.colIndex];
    const leftPinnedColumnsWidth = columnPositions[visiblePinnedColumns.left.length];
    const rightPinnedColumnsWidth = columnsTotalWidth - columnPositions[columnPositions.length - visiblePinnedColumns.right.length];
    const elementBottom = offsetLeft + offsetWidth;
    if (elementBottom - (clientWidth - rightPinnedColumnsWidth) > scrollLeft) {
      const left = elementBottom - (clientWidth - rightPinnedColumnsWidth);
      return _extends({}, initialValue, {
        left
      });
    }
    if (offsetLeft < scrollLeft + leftPinnedColumnsWidth) {
      const left = offsetLeft - leftPinnedColumnsWidth;
      return _extends({}, initialValue, {
        left
      });
    }
    return initialValue;
  }, [apiRef2]);
  const addColumnMenuItems = React32.useCallback((columnMenuItems, colDef) => {
    if (props.disableColumnPinning) {
      return columnMenuItems;
    }
    if (colDef.pinnable === false) {
      return columnMenuItems;
    }
    return [...columnMenuItems, "columnMenuPinningItem"];
  }, [props.disableColumnPinning]);
  const checkIfCanBeReordered = React32.useCallback((initialValue, {
    targetIndex
  }) => {
    const visiblePinnedColumns = gridVisiblePinnedColumnDefinitionsSelector(apiRef2);
    if (visiblePinnedColumns.left.length === 0 && visiblePinnedColumns.right.length === 0) {
      return initialValue;
    }
    if (visiblePinnedColumns.left.length > 0 && targetIndex < visiblePinnedColumns.left.length) {
      return false;
    }
    if (visiblePinnedColumns.right.length > 0) {
      const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef2);
      const firstRightPinnedColumnIndex = visibleColumns.length - visiblePinnedColumns.right.length;
      return targetIndex >= firstRightPinnedColumnIndex ? false : initialValue;
    }
    return initialValue;
  }, [apiRef2]);
  const stateExportPreProcessing = React32.useCallback((prevState, context) => {
    var _a4;
    const pinnedColumnsToExport = gridPinnedColumnsSelector(apiRef2.current.state);
    const shouldExportPinnedColumns = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the model is controlled
      props.pinnedColumns != null || // Always export if the model has been initialized
      ((_a4 = props.initialState) == null ? void 0 : _a4.pinnedColumns) != null || // Export if the model is not empty
      (pinnedColumnsToExport.left ?? []).length > 0 || (pinnedColumnsToExport.right ?? []).length > 0
    );
    if (!shouldExportPinnedColumns) {
      return prevState;
    }
    return _extends({}, prevState, {
      pinnedColumns: pinnedColumnsToExport
    });
  }, [apiRef2, props.pinnedColumns, (_a3 = props.initialState) == null ? void 0 : _a3.pinnedColumns]);
  const stateRestorePreProcessing = React32.useCallback((params, context) => {
    const newPinnedColumns = context.stateToRestore.pinnedColumns;
    if (newPinnedColumns != null) {
      setState(apiRef2, newPinnedColumns);
    }
    return params;
  }, [apiRef2]);
  useGridRegisterPipeProcessor(apiRef2, "scrollToIndexes", calculateScrollLeft);
  useGridRegisterPipeProcessor(apiRef2, "columnMenu", addColumnMenuItems);
  useGridRegisterPipeProcessor(apiRef2, "canBeReordered", checkIfCanBeReordered);
  useGridRegisterPipeProcessor(apiRef2, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor(apiRef2, "restoreState", stateRestorePreProcessing);
  apiRef2.current.registerControlState({
    stateId: "pinnedColumns",
    propModel: props.pinnedColumns,
    propOnChange: props.onPinnedColumnsChange,
    stateSelector: gridPinnedColumnsSelector,
    changeEvent: "pinnedColumnsChange"
  });
  const pinColumn = React32.useCallback((field, side) => {
    if (apiRef2.current.isColumnPinned(field) === side) {
      return;
    }
    const otherSide = side === GridPinnedColumnPosition.RIGHT ? GridPinnedColumnPosition.LEFT : GridPinnedColumnPosition.RIGHT;
    const newPinnedColumns = {
      [side]: [...pinnedColumns[side] || [], field],
      [otherSide]: (pinnedColumns[otherSide] || []).filter((column) => column !== field)
    };
    apiRef2.current.setPinnedColumns(newPinnedColumns);
  }, [apiRef2, pinnedColumns]);
  const unpinColumn = React32.useCallback((field) => {
    apiRef2.current.setPinnedColumns({
      left: (pinnedColumns.left || []).filter((column) => column !== field),
      right: (pinnedColumns.right || []).filter((column) => column !== field)
    });
  }, [apiRef2, pinnedColumns.left, pinnedColumns.right]);
  const getPinnedColumns = React32.useCallback(() => {
    return gridPinnedColumnsSelector(apiRef2.current.state);
  }, [apiRef2]);
  const setPinnedColumns = React32.useCallback((newPinnedColumns) => {
    setState(apiRef2, newPinnedColumns);
    apiRef2.current.requestPipeProcessorsApplication("hydrateColumns");
  }, [apiRef2]);
  const isColumnPinned = React32.useCallback((field) => {
    const leftPinnedColumns = pinnedColumns.left || [];
    if (leftPinnedColumns.includes(field)) {
      return GridPinnedColumnPosition.LEFT;
    }
    const rightPinnedColumns = pinnedColumns.right || [];
    if (rightPinnedColumns.includes(field)) {
      return GridPinnedColumnPosition.RIGHT;
    }
    return false;
  }, [pinnedColumns.left, pinnedColumns.right]);
  const columnPinningApi = {
    pinColumn,
    unpinColumn,
    getPinnedColumns,
    setPinnedColumns,
    isColumnPinned
  };
  useGridApiMethod(apiRef2, columnPinningApi, "public");
  const handleColumnOrderChange = (params) => {
    if (!apiRef2.current.caches.columnPinning.orderedFieldsBeforePinningColumns) {
      return;
    }
    const {
      column,
      targetIndex,
      oldIndex
    } = params;
    const delta = targetIndex > oldIndex ? 1 : -1;
    const latestColumnFields = gridColumnFieldsSelector(apiRef2);
    const siblingField = latestColumnFields[targetIndex - delta];
    const newOrderedFieldsBeforePinningColumns = [...apiRef2.current.caches.columnPinning.orderedFieldsBeforePinningColumns];
    let i2 = newOrderedFieldsBeforePinningColumns.findIndex((currentColumn) => currentColumn === column.field);
    let j = i2 + delta;
    const stop = newOrderedFieldsBeforePinningColumns.findIndex((currentColumn) => currentColumn === siblingField);
    while (delta > 0 ? i2 < stop : i2 > stop) {
      while (apiRef2.current.isColumnPinned(newOrderedFieldsBeforePinningColumns[j])) {
        j += delta;
      }
      const temp = newOrderedFieldsBeforePinningColumns[i2];
      newOrderedFieldsBeforePinningColumns[i2] = newOrderedFieldsBeforePinningColumns[j];
      newOrderedFieldsBeforePinningColumns[j] = temp;
      i2 = j;
      j = i2 + delta;
    }
    apiRef2.current.caches.columnPinning.orderedFieldsBeforePinningColumns = newOrderedFieldsBeforePinningColumns;
  };
  useGridApiEventHandler(apiRef2, "columnOrderChange", handleColumnOrderChange);
  React32.useEffect(() => {
    if (props.pinnedColumns) {
      apiRef2.current.setPinnedColumns(props.pinnedColumns);
    }
  }, [apiRef2, props.pinnedColumns]);
};
function setState(apiRef2, model) {
  apiRef2.current.setState((state) => _extends({}, state, {
    pinnedColumns: model
  }));
}

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/columnPinning/useGridColumnPinningPreProcessors.js
var React33 = __toESM(require_react());
var useGridColumnPinningPreProcessors = (apiRef2, props) => {
  const {
    disableColumnPinning
  } = props;
  const prevAllPinnedColumns = React33.useRef([]);
  const reorderPinnedColumns = React33.useCallback((columnsState) => {
    if (columnsState.orderedFields.length === 0 || disableColumnPinning) {
      return columnsState;
    }
    const savedState = apiRef2.current.state;
    apiRef2.current.state = _extends({}, savedState, {
      columns: columnsState
    });
    const visibleColumns = gridVisiblePinnedColumnDefinitionsSelector(apiRef2);
    apiRef2.current.state = savedState;
    const leftPinnedColumns = visibleColumns.left.map((c) => c.field);
    const rightPinnedColumns = visibleColumns.right.map((c) => c.field);
    let newOrderedFields;
    const allPinnedColumns = [...leftPinnedColumns, ...rightPinnedColumns];
    const {
      orderedFieldsBeforePinningColumns
    } = apiRef2.current.caches.columnPinning;
    if (orderedFieldsBeforePinningColumns) {
      newOrderedFields = new Array(columnsState.orderedFields.length).fill(null);
      const newOrderedFieldsBeforePinningColumns = [...newOrderedFields];
      const remainingFields = [...columnsState.orderedFields];
      prevAllPinnedColumns.current.forEach((field) => {
        if (!allPinnedColumns.includes(field) && columnsState.lookup[field]) {
          const index = orderedFieldsBeforePinningColumns.indexOf(field);
          newOrderedFields[index] = field;
          newOrderedFieldsBeforePinningColumns[index] = field;
          remainingFields.splice(remainingFields.indexOf(field), 1);
        }
      });
      allPinnedColumns.forEach((field) => {
        let index = orderedFieldsBeforePinningColumns.indexOf(field);
        if (index === -1 || index >= newOrderedFieldsBeforePinningColumns.length) {
          index = columnsState.orderedFields.indexOf(field);
        }
        if (newOrderedFieldsBeforePinningColumns[index] !== null) {
          index = 0;
          while (newOrderedFieldsBeforePinningColumns[index] !== null) {
            index += 1;
          }
        }
        newOrderedFields[index] = field;
        newOrderedFieldsBeforePinningColumns[index] = field;
        remainingFields.splice(remainingFields.indexOf(field), 1);
      });
      let i2 = 0;
      remainingFields.forEach((field) => {
        while (newOrderedFieldsBeforePinningColumns[i2] !== null) {
          i2 += 1;
        }
        newOrderedFieldsBeforePinningColumns[i2] = field;
        newOrderedFields[i2] = field;
      });
      apiRef2.current.caches.columnPinning.orderedFieldsBeforePinningColumns = newOrderedFieldsBeforePinningColumns;
    } else {
      newOrderedFields = [...columnsState.orderedFields];
      apiRef2.current.caches.columnPinning.orderedFieldsBeforePinningColumns = [...columnsState.orderedFields];
    }
    prevAllPinnedColumns.current = allPinnedColumns;
    const centerColumns = newOrderedFields.filter((field) => {
      return !leftPinnedColumns.includes(field) && !rightPinnedColumns.includes(field);
    });
    return _extends({}, columnsState, {
      orderedFields: [...leftPinnedColumns, ...centerColumns, ...rightPinnedColumns]
    });
  }, [apiRef2, disableColumnPinning]);
  useGridRegisterPipeProcessor(apiRef2, "hydrateColumns", reorderPinnedColumns);
  const isColumnPinned = React33.useCallback((initialValue, field) => apiRef2.current.isColumnPinned(field), [apiRef2]);
  useGridRegisterPipeProcessor(apiRef2, "isColumnPinned", isColumnPinned);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/detailPanel/useGridDetailPanel.js
var React34 = __toESM(require_react());
var detailPanelStateInitializer = (state, props) => {
  var _a3, _b2;
  return _extends({}, state, {
    detailPanel: {
      heightCache: {},
      expandedRowIds: props.detailPanelExpandedRowIds ?? ((_b2 = (_a3 = props.initialState) == null ? void 0 : _a3.detailPanel) == null ? void 0 : _b2.expandedRowIds) ?? []
    }
  });
};
function cacheContentAndHeight(apiRef2, getDetailPanelContent, getDetailPanelHeight, previousHeightCache) {
  if (typeof getDetailPanelContent !== "function") {
    return {};
  }
  const rowIds = gridDataRowIdsSelector(apiRef2);
  const contentCache = rowIds.reduce((acc, id) => {
    const params = apiRef2.current.getRowParams(id);
    acc[id] = getDetailPanelContent(params);
    return acc;
  }, {});
  const heightCache = rowIds.reduce((acc, id) => {
    var _a3;
    if (contentCache[id] == null) {
      return acc;
    }
    const params = apiRef2.current.getRowParams(id);
    const height = getDetailPanelHeight(params);
    const autoHeight = height === "auto";
    acc[id] = {
      autoHeight,
      height: autoHeight ? (_a3 = previousHeightCache[id]) == null ? void 0 : _a3.height : height
    };
    return acc;
  }, {});
  return {
    contentCache,
    heightCache
  };
}
var useGridDetailPanel = (apiRef2, props) => {
  const expandedRowIds = useGridSelector(apiRef2, gridDetailPanelExpandedRowIdsSelector);
  const contentCache = useGridSelector(apiRef2, gridDetailPanelExpandedRowsContentCacheSelector);
  const handleCellClick = React34.useCallback((params, event) => {
    if (params.field !== GRID_DETAIL_PANEL_TOGGLE_FIELD || props.getDetailPanelContent == null) {
      return;
    }
    const content = contentCache[params.id];
    if (!React34.isValidElement(content)) {
      return;
    }
    if (event.target === event.currentTarget) {
      return;
    }
    apiRef2.current.toggleDetailPanel(params.id);
  }, [apiRef2, contentCache, props.getDetailPanelContent]);
  const handleCellKeyDown = React34.useCallback((params, event) => {
    if (props.getDetailPanelContent == null) {
      return;
    }
    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD && event.key === " ") {
      apiRef2.current.toggleDetailPanel(params.id);
    }
  }, [apiRef2, props.getDetailPanelContent]);
  useGridApiEventHandler(apiRef2, "cellClick", handleCellClick);
  useGridApiEventHandler(apiRef2, "cellKeyDown", handleCellKeyDown);
  apiRef2.current.registerControlState({
    stateId: "detailPanels",
    propModel: props.detailPanelExpandedRowIds,
    propOnChange: props.onDetailPanelExpandedRowIdsChange,
    stateSelector: gridDetailPanelExpandedRowIdsSelector,
    changeEvent: "detailPanelsExpandedRowIdsChange"
  });
  const toggleDetailPanel = React34.useCallback((id) => {
    if (props.getDetailPanelContent == null) {
      return;
    }
    const content = contentCache[id];
    if (!React34.isValidElement(content)) {
      return;
    }
    const ids = apiRef2.current.getExpandedDetailPanels();
    apiRef2.current.setExpandedDetailPanels(ids.includes(id) ? ids.filter((rowId) => rowId !== id) : [...ids, id]);
  }, [apiRef2, contentCache, props.getDetailPanelContent]);
  const getExpandedDetailPanels = React34.useCallback(() => gridDetailPanelExpandedRowIdsSelector(apiRef2.current.state), [apiRef2]);
  const setExpandedDetailPanels = React34.useCallback((ids) => {
    apiRef2.current.setState((state) => {
      return _extends({}, state, {
        detailPanel: _extends({}, state.detailPanel, {
          expandedRowIds: ids
        })
      });
    });
  }, [apiRef2]);
  const storeDetailPanelHeight = React34.useCallback((id, height) => {
    const heightCache = gridDetailPanelRawHeightCacheSelector(apiRef2.current.state);
    if (!heightCache[id] || heightCache[id].height === height) {
      return;
    }
    apiRef2.current.setState((state) => {
      return _extends({}, state, {
        detailPanel: _extends({}, state.detailPanel, {
          heightCache: _extends({}, heightCache, {
            [id]: _extends({}, heightCache[id], {
              height
            })
          })
        })
      });
    });
    apiRef2.current.requestPipeProcessorsApplication("rowHeight");
  }, [apiRef2]);
  const detailPanelHasAutoHeight = React34.useCallback((id) => {
    const heightCache = gridDetailPanelRawHeightCacheSelector(apiRef2.current.state);
    return heightCache[id] ? heightCache[id].autoHeight : false;
  }, [apiRef2]);
  const detailPanelPubicApi = {
    toggleDetailPanel,
    getExpandedDetailPanels,
    setExpandedDetailPanels
  };
  const detailPanelPrivateApi = {
    storeDetailPanelHeight,
    detailPanelHasAutoHeight
  };
  useGridApiMethod(apiRef2, detailPanelPubicApi, "public");
  useGridApiMethod(apiRef2, detailPanelPrivateApi, "private");
  React34.useEffect(() => {
    if (props.detailPanelExpandedRowIds) {
      const currentModel = gridDetailPanelExpandedRowIdsSelector(apiRef2.current.state);
      if (currentModel !== props.detailPanelExpandedRowIds) {
        apiRef2.current.setExpandedDetailPanels(props.detailPanelExpandedRowIds);
      }
    }
  }, [apiRef2, props.detailPanelExpandedRowIds]);
  const updateCachesAndForceUpdate = React34.useCallback(() => {
    if (!props.getDetailPanelContent) {
      return;
    }
    apiRef2.current.setState((state) => {
      return _extends({}, state, {
        detailPanel: _extends({}, state.detailPanel, cacheContentAndHeight(apiRef2, props.getDetailPanelContent, props.getDetailPanelHeight, state.detailPanel.heightCache))
      });
    });
    apiRef2.current.forceUpdate();
  }, [apiRef2, props.getDetailPanelContent, props.getDetailPanelHeight]);
  useGridApiEventHandler(apiRef2, "sortedRowsSet", updateCachesAndForceUpdate);
  const previousGetDetailPanelContentProp = React34.useRef(void 0);
  const previousGetDetailPanelHeightProp = React34.useRef(void 0);
  const updateCachesIfNeeded = React34.useCallback(() => {
    if (props.getDetailPanelContent === previousGetDetailPanelContentProp.current && props.getDetailPanelHeight === previousGetDetailPanelHeightProp.current) {
      return;
    }
    apiRef2.current.setState((state) => {
      return _extends({}, state, {
        detailPanel: _extends({}, state.detailPanel, cacheContentAndHeight(apiRef2, props.getDetailPanelContent, props.getDetailPanelHeight, state.detailPanel.heightCache))
      });
    });
    previousGetDetailPanelContentProp.current = props.getDetailPanelContent;
    previousGetDetailPanelHeightProp.current = props.getDetailPanelHeight;
  }, [apiRef2, props.getDetailPanelContent, props.getDetailPanelHeight]);
  const addDetailHeight = React34.useCallback((initialValue, row) => {
    if (!expandedRowIds || expandedRowIds.length === 0 || !expandedRowIds.includes(row.id)) {
      initialValue.detail = 0;
      return initialValue;
    }
    updateCachesIfNeeded();
    const heightCache = gridDetailPanelExpandedRowsHeightCacheSelector(apiRef2);
    initialValue.detail = heightCache[row.id] ?? 0;
    return initialValue;
  }, [apiRef2, expandedRowIds, updateCachesIfNeeded]);
  const enabled = props.getDetailPanelContent !== void 0;
  useGridRegisterPipeProcessor(apiRef2, "rowHeight", addDetailHeight, enabled);
  const isFirstRender = React34.useRef(true);
  if (isFirstRender.current) {
    updateCachesIfNeeded();
  }
  React34.useEffect(() => {
    if (!isFirstRender.current) {
      updateCachesIfNeeded();
    }
    isFirstRender.current = false;
  }, [apiRef2, updateCachesIfNeeded]);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/detailPanel/useGridDetailPanelPreProcessors.js
var React35 = __toESM(require_react());
var useGridDetailPanelPreProcessors = (privateApiRef, props) => {
  const addToggleColumn = React35.useCallback((columnsState) => {
    if (props.getDetailPanelContent == null) {
      if (columnsState.lookup[GRID_DETAIL_PANEL_TOGGLE_FIELD]) {
        delete columnsState.lookup[GRID_DETAIL_PANEL_TOGGLE_FIELD];
        columnsState.orderedFields = columnsState.orderedFields.filter((field) => field !== GRID_DETAIL_PANEL_TOGGLE_FIELD);
      }
      return columnsState;
    }
    if (columnsState.lookup[GRID_DETAIL_PANEL_TOGGLE_FIELD]) {
      return columnsState;
    }
    columnsState.orderedFields = [GRID_DETAIL_PANEL_TOGGLE_FIELD, ...columnsState.orderedFields];
    columnsState.lookup[GRID_DETAIL_PANEL_TOGGLE_FIELD] = _extends({}, GRID_DETAIL_PANEL_TOGGLE_COL_DEF, {
      headerName: privateApiRef.current.getLocaleText("detailPanelToggle")
    });
    return columnsState;
  }, [privateApiRef, props.getDetailPanelContent]);
  const addExpandedClassToRow = React35.useCallback((classes, id) => {
    if (props.getDetailPanelContent == null) {
      return classes;
    }
    const expandedRowIds = gridDetailPanelExpandedRowIdsSelector(privateApiRef.current.state);
    if (!expandedRowIds.includes(id)) {
      return classes;
    }
    return [...classes, gridClasses["row--detailPanelExpanded"]];
  }, [privateApiRef, props.getDetailPanelContent]);
  useGridRegisterPipeProcessor(privateApiRef, "hydrateColumns", addToggleColumn);
  useGridRegisterPipeProcessor(privateApiRef, "rowClassName", addExpandedClassToRow);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/rowReorder/useGridRowReorder.js
var React36 = __toESM(require_react());
var Direction = function(Direction2) {
  Direction2[Direction2["UP"] = 0] = "UP";
  Direction2[Direction2["DOWN"] = 1] = "DOWN";
  return Direction2;
}(Direction || {});
var previousMousePosition = null;
var previousReorderState = {
  previousTargetId: null,
  dragDirection: null
};
var useUtilityClasses7 = (ownerState) => {
  const {
    classes
  } = ownerState;
  const slots = {
    rowDragging: ["row--dragging"]
  };
  return composeClasses(slots, getDataGridUtilityClass, classes);
};
var useGridRowReorder = (apiRef2, props) => {
  const logger = useGridLogger(apiRef2, "useGridRowReorder");
  const sortModel = useGridSelector(apiRef2, gridSortModelSelector);
  const treeDepth = useGridSelector(apiRef2, gridRowMaximumTreeDepthSelector);
  const dragRowNode = React36.useRef(null);
  const originRowIndex = React36.useRef(null);
  const removeDnDStylesTimeout = React36.useRef(void 0);
  const ownerState = {
    classes: props.classes
  };
  const classes = useUtilityClasses7(ownerState);
  const [dragRowId, setDragRowId] = React36.useState("");
  const sortedRowIndexLookup = useGridSelector(apiRef2, gridSortedRowIndexLookupSelector);
  React36.useEffect(() => {
    return () => {
      clearTimeout(removeDnDStylesTimeout.current);
    };
  }, []);
  const isRowReorderDisabled = React36.useMemo(() => {
    return !props.rowReordering || !!sortModel.length || treeDepth !== 1;
  }, [props.rowReordering, sortModel, treeDepth]);
  const handleDragStart = React36.useCallback((params, event) => {
    const editRowsState = gridEditRowsStateSelector(apiRef2.current.state);
    if (isRowReorderDisabled || Object.keys(editRowsState).length !== 0) {
      return;
    }
    logger.debug(`Start dragging row ${params.id}`);
    event.stopPropagation();
    dragRowNode.current = event.currentTarget;
    dragRowNode.current.classList.add(classes.rowDragging);
    setDragRowId(params.id);
    removeDnDStylesTimeout.current = setTimeout(() => {
      dragRowNode.current.classList.remove(classes.rowDragging);
    });
    originRowIndex.current = sortedRowIndexLookup[params.id];
    apiRef2.current.setCellFocus(params.id, GRID_REORDER_COL_DEF.field);
  }, [apiRef2, isRowReorderDisabled, logger, classes.rowDragging, sortedRowIndexLookup]);
  const handleDragOver = React36.useCallback((params, event) => {
    if (dragRowId === "") {
      return;
    }
    const rowNode = apiRef2.current.getRowNode(params.id);
    if (!rowNode || rowNode.type === "footer" || rowNode.type === "pinnedRow") {
      return;
    }
    logger.debug(`Dragging over row ${params.id}`);
    event.preventDefault();
    event.stopPropagation();
    const mouseMovementDiff = previousMousePosition ? previousMousePosition.y - event.clientY : event.clientY;
    if (params.id !== dragRowId) {
      const targetRowIndex = sortedRowIndexLookup[params.id];
      const dragDirection = mouseMovementDiff > 0 ? Direction.DOWN : Direction.UP;
      const currentReorderState = {
        dragDirection,
        previousTargetId: params.id
      };
      const isStateChanged = currentReorderState.dragDirection !== previousReorderState.dragDirection || currentReorderState.previousTargetId !== previousReorderState.previousTargetId;
      if (previousReorderState.dragDirection === null || Math.abs(mouseMovementDiff) >= 1 && isStateChanged) {
        apiRef2.current.setRowIndex(dragRowId, targetRowIndex);
        previousReorderState = currentReorderState;
      }
    }
    previousMousePosition = {
      x: event.clientX,
      y: event.clientY
    };
  }, [dragRowId, apiRef2, logger, sortedRowIndexLookup]);
  const handleDragEnd = React36.useCallback((params, event) => {
    const editRowsState = gridEditRowsStateSelector(apiRef2.current.state);
    if (dragRowId === "" || isRowReorderDisabled || Object.keys(editRowsState).length !== 0) {
      return;
    }
    logger.debug("End dragging row");
    event.preventDefault();
    event.stopPropagation();
    clearTimeout(removeDnDStylesTimeout.current);
    dragRowNode.current = null;
    previousReorderState.dragDirection = null;
    if (event.dataTransfer.dropEffect === "none") {
      apiRef2.current.setRowIndex(dragRowId, originRowIndex.current);
      originRowIndex.current = null;
    } else {
      const rowOrderChangeParams = {
        row: apiRef2.current.getRow(dragRowId),
        targetIndex: sortedRowIndexLookup[params.id],
        oldIndex: originRowIndex.current
      };
      apiRef2.current.publishEvent("rowOrderChange", rowOrderChangeParams);
    }
    setDragRowId("");
  }, [apiRef2, dragRowId, isRowReorderDisabled, logger, sortedRowIndexLookup]);
  useGridApiEventHandler(apiRef2, "rowDragStart", handleDragStart);
  useGridApiEventHandler(apiRef2, "rowDragOver", handleDragOver);
  useGridApiEventHandler(apiRef2, "rowDragEnd", handleDragEnd);
  useGridApiEventHandler(apiRef2, "cellDragOver", handleDragOver);
  useGridApiOptionHandler(apiRef2, "rowOrderChange", props.onRowOrderChange);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/rowReorder/useGridRowReorderPreProcessors.js
var React37 = __toESM(require_react());
var useUtilityClasses8 = (ownerState) => {
  const {
    classes
  } = ownerState;
  return React37.useMemo(() => {
    const slots = {
      rowReorderCellContainer: ["rowReorderCellContainer"],
      columnHeaderReorder: ["columnHeaderReorder"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  }, [classes]);
};
var useGridRowReorderPreProcessors = (privateApiRef, props) => {
  const ownerState = {
    classes: props.classes
  };
  const classes = useUtilityClasses8(ownerState);
  const updateReorderColumn = React37.useCallback((columnsState) => {
    const reorderColumn = _extends({}, GRID_REORDER_COL_DEF, {
      cellClassName: classes.rowReorderCellContainer,
      headerClassName: classes.columnHeaderReorder,
      headerName: privateApiRef.current.getLocaleText("rowReorderingHeaderName")
    });
    const shouldHaveReorderColumn = props.rowReordering;
    const haveReorderColumn = columnsState.lookup[reorderColumn.field] != null;
    if (shouldHaveReorderColumn && haveReorderColumn) {
      columnsState.lookup[reorderColumn.field] = _extends({}, reorderColumn, columnsState.lookup[reorderColumn.field]);
      return columnsState;
    }
    if (shouldHaveReorderColumn && !haveReorderColumn) {
      columnsState.lookup[reorderColumn.field] = reorderColumn;
      columnsState.orderedFields = [reorderColumn.field, ...columnsState.orderedFields];
    } else if (!shouldHaveReorderColumn && haveReorderColumn) {
      delete columnsState.lookup[reorderColumn.field];
      columnsState.orderedFields = columnsState.orderedFields.filter((field) => field !== reorderColumn.field);
    }
    return columnsState;
  }, [privateApiRef, classes, props.rowReordering]);
  useGridRegisterPipeProcessor(privateApiRef, "hydrateColumns", updateReorderColumn);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/lazyLoader/useGridLazyLoader.js
var React38 = __toESM(require_react());
function findSkeletonRowsSection({
  apiRef: apiRef2,
  visibleRows,
  range
}) {
  var _a3, _b2;
  let {
    firstRowIndex,
    lastRowIndex
  } = range;
  const visibleRowsSection = visibleRows.slice(range.firstRowIndex, range.lastRowIndex);
  let startIndex = 0;
  let endIndex = visibleRowsSection.length - 1;
  let isSkeletonSectionFound = false;
  while (!isSkeletonSectionFound && firstRowIndex < lastRowIndex) {
    const isStartingWithASkeletonRow = ((_a3 = apiRef2.current.getRowNode(visibleRowsSection[startIndex].id)) == null ? void 0 : _a3.type) === "skeletonRow";
    const isEndingWithASkeletonRow = ((_b2 = apiRef2.current.getRowNode(visibleRowsSection[endIndex].id)) == null ? void 0 : _b2.type) === "skeletonRow";
    if (isStartingWithASkeletonRow && isEndingWithASkeletonRow) {
      isSkeletonSectionFound = true;
    }
    if (!isStartingWithASkeletonRow) {
      startIndex += 1;
      firstRowIndex += 1;
    }
    if (!isEndingWithASkeletonRow) {
      endIndex -= 1;
      lastRowIndex -= 1;
    }
  }
  return isSkeletonSectionFound ? {
    firstRowIndex,
    lastRowIndex
  } : void 0;
}
var useGridLazyLoader = (privateApiRef, props) => {
  const sortModel = useGridSelector(privateApiRef, gridSortModelSelector);
  const filterModel = useGridSelector(privateApiRef, gridFilterModelSelector);
  const renderedRowsIntervalCache = React38.useRef({
    firstRowToRender: 0,
    lastRowToRender: 0
  });
  const isDisabled = props.rowsLoadingMode !== "server";
  const handleRenderedRowsIntervalChange = React38.useCallback((params) => {
    if (isDisabled) {
      return;
    }
    const fetchRowsParams = {
      firstRowToRender: params.firstRowIndex,
      lastRowToRender: params.lastRowIndex,
      sortModel,
      filterModel
    };
    if (renderedRowsIntervalCache.current.firstRowToRender === params.firstRowIndex && renderedRowsIntervalCache.current.lastRowToRender === params.lastRowIndex) {
      return;
    }
    renderedRowsIntervalCache.current = {
      firstRowToRender: params.firstRowIndex,
      lastRowToRender: params.lastRowIndex
    };
    if (sortModel.length === 0 && filterModel.items.length === 0) {
      const currentVisibleRows = getVisibleRows(privateApiRef, {
        pagination: props.pagination,
        paginationMode: props.paginationMode
      });
      const skeletonRowsSection = findSkeletonRowsSection({
        apiRef: privateApiRef,
        visibleRows: currentVisibleRows.rows,
        range: {
          firstRowIndex: params.firstRowIndex,
          lastRowIndex: params.lastRowIndex
        }
      });
      if (!skeletonRowsSection) {
        return;
      }
      fetchRowsParams.firstRowToRender = skeletonRowsSection.firstRowIndex;
      fetchRowsParams.lastRowToRender = skeletonRowsSection.lastRowIndex;
    }
    privateApiRef.current.publishEvent("fetchRows", fetchRowsParams);
  }, [privateApiRef, isDisabled, props.pagination, props.paginationMode, sortModel, filterModel]);
  const handleGridSortModelChange = React38.useCallback((newSortModel) => {
    if (isDisabled) {
      return;
    }
    privateApiRef.current.requestPipeProcessorsApplication("hydrateRows");
    const renderContext = gridRenderContextSelector(privateApiRef);
    const fetchRowsParams = {
      firstRowToRender: renderContext.firstRowIndex,
      lastRowToRender: renderContext.lastRowIndex,
      sortModel: newSortModel,
      filterModel
    };
    privateApiRef.current.publishEvent("fetchRows", fetchRowsParams);
  }, [privateApiRef, isDisabled, filterModel]);
  const handleGridFilterModelChange = React38.useCallback((newFilterModel) => {
    if (isDisabled) {
      return;
    }
    privateApiRef.current.requestPipeProcessorsApplication("hydrateRows");
    const renderContext = gridRenderContextSelector(privateApiRef);
    const fetchRowsParams = {
      firstRowToRender: renderContext.firstRowIndex,
      lastRowToRender: renderContext.lastRowIndex,
      sortModel,
      filterModel: newFilterModel
    };
    privateApiRef.current.publishEvent("fetchRows", fetchRowsParams);
  }, [privateApiRef, isDisabled, sortModel]);
  useGridApiEventHandler(privateApiRef, "renderedRowsIntervalChange", handleRenderedRowsIntervalChange);
  useGridApiEventHandler(privateApiRef, "sortModelChange", handleGridSortModelChange);
  useGridApiEventHandler(privateApiRef, "filterModelChange", handleGridFilterModelChange);
  useGridApiOptionHandler(privateApiRef, "fetchRows", props.onFetchRows);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/lazyLoader/useGridLazyLoaderPreProcessors.js
var React39 = __toESM(require_react());
var GRID_SKELETON_ROW_ROOT_ID = "auto-generated-skeleton-row-root";
var getSkeletonRowId = (index) => `${GRID_SKELETON_ROW_ROOT_ID}-${index}`;
var useGridLazyLoaderPreProcessors = (privateApiRef, props) => {
  const addSkeletonRows = React39.useCallback((groupingParams) => {
    const rootGroup = groupingParams.tree[GRID_ROOT_GROUP_ID];
    if (props.rowsLoadingMode !== "server" || !props.rowCount || rootGroup.children.length >= props.rowCount) {
      return groupingParams;
    }
    const tree = _extends({}, groupingParams.tree);
    const rootGroupChildren = [...rootGroup.children];
    for (let i2 = 0; i2 < props.rowCount - rootGroup.children.length; i2 += 1) {
      const skeletonId = getSkeletonRowId(i2);
      rootGroupChildren.push(skeletonId);
      const skeletonRowNode = {
        type: "skeletonRow",
        id: skeletonId,
        parent: GRID_ROOT_GROUP_ID,
        depth: 0
      };
      tree[skeletonId] = skeletonRowNode;
    }
    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {
      children: rootGroupChildren
    });
    return _extends({}, groupingParams, {
      tree
    });
  }, [props.rowCount, props.rowsLoadingMode]);
  useGridRegisterPipeProcessor(privateApiRef, "hydrateRows", addSkeletonRows);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/rowPinning/useGridRowPinning.js
var React40 = __toESM(require_react());
function createPinnedRowsInternalCache(pinnedRows, getRowId) {
  var _a3, _b2;
  const cache = {
    topIds: [],
    bottomIds: [],
    idLookup: {}
  };
  (_a3 = pinnedRows == null ? void 0 : pinnedRows.top) == null ? void 0 : _a3.forEach((rowModel) => {
    const id = getRowIdFromRowModel(rowModel, getRowId);
    cache.topIds.push(id);
    cache.idLookup[id] = rowModel;
  });
  (_b2 = pinnedRows == null ? void 0 : pinnedRows.bottom) == null ? void 0 : _b2.forEach((rowModel) => {
    const id = getRowIdFromRowModel(rowModel, getRowId);
    cache.bottomIds.push(id);
    cache.idLookup[id] = rowModel;
  });
  return cache;
}
var rowPinningStateInitializer = (state, props, apiRef2) => {
  var _a3;
  apiRef2.current.caches.pinnedRows = createPinnedRowsInternalCache(props.pinnedRows, props.getRowId);
  return _extends({}, state, {
    rows: _extends({}, state.rows, {
      additionalRowGroups: _extends({}, (_a3 = state.rows) == null ? void 0 : _a3.additionalRowGroups, {
        pinnedRows: {
          top: [],
          bottom: []
        }
      })
    })
  });
};
var useGridRowPinning = (apiRef2, props) => {
  const setPinnedRows = React40.useCallback((newPinnedRows) => {
    apiRef2.current.caches.pinnedRows = createPinnedRowsInternalCache(newPinnedRows, props.getRowId);
    apiRef2.current.requestPipeProcessorsApplication("hydrateRows");
  }, [apiRef2, props.getRowId]);
  useGridApiMethod(apiRef2, {
    unstable_setPinnedRows: setPinnedRows
  }, "public");
  const isFirstRender = React40.useRef(true);
  React40.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    apiRef2.current.unstable_setPinnedRows(props.pinnedRows);
  }, [apiRef2, props.pinnedRows]);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/rowPinning/useGridRowPinningPreProcessors.js
var React41 = __toESM(require_react());
function addPinnedRow({
  groupingParams,
  rowModel,
  rowId,
  position,
  apiRef: apiRef2,
  isAutoGenerated
}) {
  var _a3, _b2, _c, _d;
  const dataRowIdToModelLookup = _extends({}, groupingParams.dataRowIdToModelLookup);
  const dataRowIdToIdLookup = _extends({}, groupingParams.dataRowIdToIdLookup);
  const tree = _extends({}, groupingParams.tree);
  const treeDepths = _extends({}, groupingParams.treeDepths);
  const node = {
    type: "pinnedRow",
    id: rowId,
    depth: 0,
    parent: GRID_ROOT_GROUP_ID,
    isAutoGenerated
  };
  insertNodeInTree(node, tree, treeDepths, null);
  if (!isAutoGenerated) {
    dataRowIdToModelLookup[rowId] = rowModel;
    dataRowIdToIdLookup[rowId] = rowId;
  }
  apiRef2.current.caches.rows.dataRowIdToModelLookup[rowId] = _extends({}, rowModel);
  apiRef2.current.caches.rows.dataRowIdToIdLookup[rowId] = rowId;
  const previousPinnedRows = ((_a3 = groupingParams.additionalRowGroups) == null ? void 0 : _a3.pinnedRows) || {};
  const newPinnedRow = {
    id: rowId,
    model: rowModel
  };
  if ((_d = (_c = (_b2 = groupingParams.additionalRowGroups) == null ? void 0 : _b2.pinnedRows) == null ? void 0 : _c[position]) == null ? void 0 : _d.includes(newPinnedRow)) {
    return _extends({}, groupingParams, {
      dataRowIdToModelLookup,
      dataRowIdToIdLookup,
      tree,
      treeDepths
    });
  }
  return _extends({}, groupingParams, {
    dataRowIdToModelLookup,
    dataRowIdToIdLookup,
    tree,
    treeDepths,
    additionalRowGroups: _extends({}, groupingParams.additionalRowGroups, {
      pinnedRows: _extends({}, previousPinnedRows, {
        [position]: [...previousPinnedRows[position] || [], newPinnedRow]
      })
    })
  });
}
var useGridRowPinningPreProcessors = (apiRef2) => {
  const prevPinnedRowsCacheRef = React41.useRef(null);
  const addPinnedRows = React41.useCallback((groupingParams) => {
    var _a3, _b2, _c, _d, _e, _f;
    const pinnedRowsCache = apiRef2.current.caches.pinnedRows || {};
    const prevPinnedRowsCache = prevPinnedRowsCacheRef.current;
    prevPinnedRowsCacheRef.current = pinnedRowsCache;
    let newGroupingParams = _extends({}, groupingParams, {
      additionalRowGroups: _extends({}, groupingParams.additionalRowGroups, {
        // reset pinned rows state
        pinnedRows: {}
      })
    });
    if (prevPinnedRowsCache) {
      const pinnedRowCleanup = (rowId) => {
        const node = newGroupingParams.tree[rowId];
        if ((node == null ? void 0 : node.type) === "pinnedRow") {
          delete newGroupingParams.tree[rowId];
          delete newGroupingParams.dataRowIdToModelLookup[rowId];
          delete newGroupingParams.dataRowIdToIdLookup[rowId];
          delete apiRef2.current.caches.rows.dataRowIdToIdLookup[rowId];
          delete apiRef2.current.caches.rows.dataRowIdToModelLookup[rowId];
        }
      };
      (_a3 = prevPinnedRowsCache.topIds) == null ? void 0 : _a3.forEach(pinnedRowCleanup);
      (_b2 = prevPinnedRowsCache.bottomIds) == null ? void 0 : _b2.forEach(pinnedRowCleanup);
    }
    (_c = pinnedRowsCache.topIds) == null ? void 0 : _c.forEach((rowId) => {
      newGroupingParams = addPinnedRow({
        groupingParams: newGroupingParams,
        rowModel: pinnedRowsCache.idLookup[rowId],
        rowId,
        position: "top",
        apiRef: apiRef2,
        isAutoGenerated: false
      });
    });
    (_d = pinnedRowsCache.bottomIds) == null ? void 0 : _d.forEach((rowId) => {
      newGroupingParams = addPinnedRow({
        groupingParams: newGroupingParams,
        rowModel: pinnedRowsCache.idLookup[rowId],
        rowId,
        position: "bottom",
        apiRef: apiRef2,
        isAutoGenerated: false
      });
    });
    if (((_e = pinnedRowsCache.bottomIds) == null ? void 0 : _e.length) || ((_f = pinnedRowsCache.topIds) == null ? void 0 : _f.length)) {
      const shouldKeepRow = (rowId) => {
        if (newGroupingParams.tree[rowId] && newGroupingParams.tree[rowId].type === "pinnedRow") {
          return false;
        }
        return true;
      };
      const rootGroupNode = newGroupingParams.tree[GRID_ROOT_GROUP_ID];
      newGroupingParams.tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroupNode, {
        children: rootGroupNode.children.filter(shouldKeepRow)
      });
      newGroupingParams.dataRowIds = newGroupingParams.dataRowIds.filter(shouldKeepRow);
    }
    return newGroupingParams;
  }, [apiRef2]);
  useGridRegisterPipeProcessor(apiRef2, "hydrateRows", addPinnedRows);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/dataSource/useGridDataSource.js
var React42 = __toESM(require_react());

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/dataSource/utils.js
var MAX_CONCURRENT_REQUESTS = Infinity;
var runIfServerMode = (modeProp, fn) => () => {
  if (modeProp === "server") {
    fn();
  }
};
var RequestStatus = function(RequestStatus2) {
  RequestStatus2[RequestStatus2["QUEUED"] = 0] = "QUEUED";
  RequestStatus2[RequestStatus2["PENDING"] = 1] = "PENDING";
  RequestStatus2[RequestStatus2["SETTLED"] = 2] = "SETTLED";
  RequestStatus2[RequestStatus2["UNKNOWN"] = 3] = "UNKNOWN";
  return RequestStatus2;
}({});
var NestedDataManager = class {
  constructor(privateApiRef, maxConcurrentRequests = MAX_CONCURRENT_REQUESTS) {
    this.pendingRequests = /* @__PURE__ */ new Set();
    this.queuedRequests = /* @__PURE__ */ new Set();
    this.settledRequests = /* @__PURE__ */ new Set();
    this.api = void 0;
    this.maxConcurrentRequests = void 0;
    this.processQueue = async () => {
      if (this.queuedRequests.size === 0 || this.pendingRequests.size >= this.maxConcurrentRequests) {
        return;
      }
      const loopLength = Math.min(this.maxConcurrentRequests - this.pendingRequests.size, this.queuedRequests.size);
      if (loopLength === 0) {
        return;
      }
      const fetchQueue = Array.from(this.queuedRequests);
      for (let i2 = 0; i2 < loopLength; i2 += 1) {
        const id = fetchQueue[i2];
        this.queuedRequests.delete(id);
        this.pendingRequests.add(id);
        this.api.fetchRowChildren(id);
      }
    };
    this.queue = async (ids) => {
      const loadingIds = {};
      ids.forEach((id) => {
        this.queuedRequests.add(id);
        loadingIds[id] = true;
      });
      this.api.setState((state) => _extends({}, state, {
        dataSource: _extends({}, state.dataSource, {
          loading: _extends({}, state.dataSource.loading, loadingIds)
        })
      }));
      this.processQueue();
    };
    this.setRequestSettled = (id) => {
      this.pendingRequests.delete(id);
      this.settledRequests.add(id);
      this.processQueue();
    };
    this.clear = () => {
      this.queuedRequests.clear();
      Array.from(this.pendingRequests).forEach((id) => this.clearPendingRequest(id));
    };
    this.clearPendingRequest = (id) => {
      this.api.unstable_dataSource.setChildrenLoading(id, false);
      this.pendingRequests.delete(id);
      this.processQueue();
    };
    this.getRequestStatus = (id) => {
      if (this.pendingRequests.has(id)) {
        return RequestStatus.PENDING;
      }
      if (this.queuedRequests.has(id)) {
        return RequestStatus.QUEUED;
      }
      if (this.settledRequests.has(id)) {
        return RequestStatus.SETTLED;
      }
      return RequestStatus.UNKNOWN;
    };
    this.getActiveRequestsCount = () => this.pendingRequests.size + this.queuedRequests.size;
    this.api = privateApiRef.current;
    this.maxConcurrentRequests = maxConcurrentRequests;
  }
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/dataSource/useGridDataSource.js
var INITIAL_STATE = {
  loading: {},
  errors: {}
};
var noopCache = {
  clear: () => {
  },
  get: () => void 0,
  set: () => {
  }
};
function getCache(cacheProp) {
  if (cacheProp === null) {
    return noopCache;
  }
  return cacheProp ?? new GridDataSourceCacheDefault({});
}
var dataSourceStateInitializer = (state) => {
  return _extends({}, state, {
    dataSource: INITIAL_STATE
  });
};
var useGridDataSource = (apiRef2, props) => {
  var _a3, _b2;
  const nestedDataManager = useLazyRef(() => new NestedDataManager(apiRef2)).current;
  const groupsToAutoFetch = useGridSelector(apiRef2, gridRowGroupsToFetchSelector);
  const scheduledGroups = React42.useRef(0);
  const onError = props.unstable_onDataSourceError;
  const [cache, setCache] = React42.useState(() => getCache(props.unstable_dataSourceCache));
  const fetchRows = React42.useCallback(async (parentId) => {
    var _a4;
    const getRows = (_a4 = props.unstable_dataSource) == null ? void 0 : _a4.getRows;
    if (!getRows) {
      return;
    }
    if (parentId) {
      nestedDataManager.queue([parentId]);
      return;
    }
    nestedDataManager.clear();
    scheduledGroups.current = 0;
    const dataSourceState = apiRef2.current.state.dataSource;
    if (dataSourceState !== INITIAL_STATE) {
      apiRef2.current.resetDataSourceState();
    }
    const fetchParams = _extends({}, gridGetRowsParamsSelector(apiRef2), apiRef2.current.unstable_applyPipeProcessors("getRowsParams", {}));
    const cachedData = apiRef2.current.unstable_dataSource.cache.get(fetchParams);
    if (cachedData !== void 0) {
      const rows = cachedData.rows;
      apiRef2.current.setRows(rows);
      if (cachedData.rowCount !== void 0) {
        apiRef2.current.setRowCount(cachedData.rowCount);
      }
      return;
    }
    const isLoading = gridRowsLoadingSelector(apiRef2);
    if (!isLoading) {
      apiRef2.current.setLoading(true);
    }
    try {
      const getRowsResponse = await getRows(fetchParams);
      apiRef2.current.unstable_dataSource.cache.set(fetchParams, getRowsResponse);
      if (getRowsResponse.rowCount !== void 0) {
        apiRef2.current.setRowCount(getRowsResponse.rowCount);
      }
      apiRef2.current.setRows(getRowsResponse.rows);
      apiRef2.current.setLoading(false);
    } catch (error) {
      apiRef2.current.setRows([]);
      apiRef2.current.setLoading(false);
      onError == null ? void 0 : onError(error, fetchParams);
    }
  }, [nestedDataManager, apiRef2, (_a3 = props.unstable_dataSource) == null ? void 0 : _a3.getRows, onError]);
  const fetchRowChildren = React42.useCallback(async (id) => {
    var _a4, _b3;
    const pipedParams = apiRef2.current.unstable_applyPipeProcessors("getRowsParams", {});
    if (!props.treeData && (((_a4 = pipedParams.groupFields) == null ? void 0 : _a4.length) ?? 0) === 0) {
      nestedDataManager.clearPendingRequest(id);
      return;
    }
    const getRows = (_b3 = props.unstable_dataSource) == null ? void 0 : _b3.getRows;
    if (!getRows) {
      nestedDataManager.clearPendingRequest(id);
      return;
    }
    const rowNode = apiRef2.current.getRowNode(id);
    if (!rowNode) {
      nestedDataManager.clearPendingRequest(id);
      return;
    }
    const fetchParams = _extends({}, gridGetRowsParamsSelector(apiRef2), pipedParams, {
      groupKeys: rowNode.path
    });
    const cachedData = apiRef2.current.unstable_dataSource.cache.get(fetchParams);
    if (cachedData !== void 0) {
      const rows = cachedData.rows;
      nestedDataManager.setRequestSettled(id);
      apiRef2.current.updateServerRows(rows, rowNode.path);
      if (cachedData.rowCount) {
        apiRef2.current.setRowCount(cachedData.rowCount);
      }
      apiRef2.current.setRowChildrenExpansion(id, true);
      apiRef2.current.unstable_dataSource.setChildrenLoading(id, false);
      return;
    }
    const existingError = gridDataSourceErrorsSelector(apiRef2)[id] ?? null;
    if (existingError) {
      apiRef2.current.unstable_dataSource.setChildrenFetchError(id, null);
    }
    try {
      const getRowsResponse = await getRows(fetchParams);
      if (!apiRef2.current.getRowNode(id)) {
        nestedDataManager.clearPendingRequest(id);
        return;
      }
      if (nestedDataManager.getRequestStatus(id) === RequestStatus.UNKNOWN) {
        apiRef2.current.unstable_dataSource.setChildrenLoading(id, false);
        return;
      }
      nestedDataManager.setRequestSettled(id);
      apiRef2.current.unstable_dataSource.cache.set(fetchParams, getRowsResponse);
      if (getRowsResponse.rowCount) {
        apiRef2.current.setRowCount(getRowsResponse.rowCount);
      }
      apiRef2.current.updateServerRows(getRowsResponse.rows, rowNode.path);
      apiRef2.current.setRowChildrenExpansion(id, true);
    } catch (error) {
      const childrenFetchError = error;
      apiRef2.current.unstable_dataSource.setChildrenFetchError(id, childrenFetchError);
      onError == null ? void 0 : onError(childrenFetchError, fetchParams);
    } finally {
      apiRef2.current.unstable_dataSource.setChildrenLoading(id, false);
      nestedDataManager.setRequestSettled(id);
    }
  }, [nestedDataManager, onError, apiRef2, props.treeData, (_b2 = props.unstable_dataSource) == null ? void 0 : _b2.getRows]);
  const setChildrenLoading = React42.useCallback((parentId, isLoading) => {
    apiRef2.current.setState((state) => {
      if (!state.dataSource.loading[parentId] && isLoading === false) {
        return state;
      }
      const newLoadingState = _extends({}, state.dataSource.loading);
      if (isLoading === false) {
        delete newLoadingState[parentId];
      } else {
        newLoadingState[parentId] = isLoading;
      }
      return _extends({}, state, {
        dataSource: _extends({}, state.dataSource, {
          loading: newLoadingState
        })
      });
    });
  }, [apiRef2]);
  const setChildrenFetchError = React42.useCallback((parentId, error) => {
    apiRef2.current.setState((state) => {
      const newErrorsState = _extends({}, state.dataSource.errors);
      if (error === null && newErrorsState[parentId] !== void 0) {
        delete newErrorsState[parentId];
      } else {
        newErrorsState[parentId] = error;
      }
      return _extends({}, state, {
        dataSource: _extends({}, state.dataSource, {
          errors: newErrorsState
        })
      });
    });
  }, [apiRef2]);
  const resetDataSourceState = React42.useCallback(() => {
    apiRef2.current.setState((state) => {
      return _extends({}, state, {
        dataSource: INITIAL_STATE
      });
    });
  }, [apiRef2]);
  const debouncedFetchRows = React42.useMemo(() => debounce(fetchRows, 0), [fetchRows]);
  const dataSourceApi = {
    unstable_dataSource: {
      setChildrenLoading,
      setChildrenFetchError,
      fetchRows,
      cache
    }
  };
  const dataSourcePrivateApi = {
    fetchRowChildren,
    resetDataSourceState
  };
  useGridApiMethod(apiRef2, dataSourceApi, "public");
  useGridApiMethod(apiRef2, dataSourcePrivateApi, "private");
  useGridApiEventHandler(apiRef2, "sortModelChange", runIfServerMode(props.sortingMode, debouncedFetchRows));
  useGridApiEventHandler(apiRef2, "filterModelChange", runIfServerMode(props.filterMode, debouncedFetchRows));
  useGridApiEventHandler(apiRef2, "paginationModelChange", runIfServerMode(props.paginationMode, debouncedFetchRows));
  const isFirstRender = React42.useRef(true);
  React42.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    const newCache = getCache(props.unstable_dataSourceCache);
    setCache((prevCache) => prevCache !== newCache ? newCache : prevCache);
  }, [props.unstable_dataSourceCache]);
  React42.useEffect(() => {
    if (props.unstable_dataSource) {
      apiRef2.current.unstable_dataSource.cache.clear();
      apiRef2.current.unstable_dataSource.fetchRows();
    }
  }, [apiRef2, props.unstable_dataSource]);
  React42.useEffect(() => {
    if (groupsToAutoFetch && groupsToAutoFetch.length && scheduledGroups.current < groupsToAutoFetch.length) {
      const groupsToSchedule = groupsToAutoFetch.slice(scheduledGroups.current);
      nestedDataManager.queue(groupsToSchedule);
      scheduledGroups.current = groupsToAutoFetch.length;
    }
  }, [apiRef2, nestedDataManager, groupsToAutoFetch]);
};

// node_modules/@mui/x-data-grid-pro/esm/DataGridPro/useDataGridProComponent.js
var useDataGridProComponent = (inputApiRef, props) => {
  const apiRef2 = useGridInitialization(inputApiRef, props);
  useGridRowSelectionPreProcessors(apiRef2, props);
  useGridRowReorderPreProcessors(apiRef2, props);
  useGridTreeDataPreProcessors(apiRef2, props);
  useGridDataSourceTreeDataPreProcessors(apiRef2, props);
  useGridLazyLoaderPreProcessors(apiRef2, props);
  useGridRowPinningPreProcessors(apiRef2);
  useGridDetailPanelPreProcessors(apiRef2, props);
  useGridColumnPinningPreProcessors(apiRef2, props);
  useGridRowsPreProcessors(apiRef2);
  useGridInitializeState(headerFilteringStateInitializer, apiRef2, props);
  useGridInitializeState(rowSelectionStateInitializer, apiRef2, props);
  useGridInitializeState(detailPanelStateInitializer, apiRef2, props);
  useGridInitializeState(columnPinningStateInitializer, apiRef2, props);
  useGridInitializeState(columnsStateInitializer, apiRef2, props);
  useGridInitializeState(rowPinningStateInitializer, apiRef2, props);
  useGridInitializeState(rowsStateInitializer, apiRef2, props);
  useGridInitializeState(paginationStateInitializer, apiRef2, props);
  useGridInitializeState(editingStateInitializer, apiRef2, props);
  useGridInitializeState(focusStateInitializer, apiRef2, props);
  useGridInitializeState(sortingStateInitializer, apiRef2, props);
  useGridInitializeState(preferencePanelStateInitializer, apiRef2, props);
  useGridInitializeState(filterStateInitializer, apiRef2, props);
  useGridInitializeState(rowSpanningStateInitializer, apiRef2, props);
  useGridInitializeState(densityStateInitializer, apiRef2, props);
  useGridInitializeState(columnReorderStateInitializer, apiRef2, props);
  useGridInitializeState(columnResizeStateInitializer, apiRef2, props);
  useGridInitializeState(columnMenuStateInitializer, apiRef2, props);
  useGridInitializeState(columnGroupsStateInitializer, apiRef2, props);
  useGridInitializeState(virtualizationStateInitializer, apiRef2, props);
  useGridInitializeState(dataSourceStateInitializer, apiRef2, props);
  useGridInitializeState(dimensionsStateInitializer, apiRef2, props);
  useGridInitializeState(rowsMetaStateInitializer, apiRef2, props);
  useGridInitializeState(listViewStateInitializer, apiRef2, props);
  useGridHeaderFiltering(apiRef2, props);
  useGridTreeData(apiRef2, props);
  useGridKeyboardNavigation(apiRef2, props);
  useGridRowSelection(apiRef2, props);
  useGridColumnPinning(apiRef2, props);
  useGridRowPinning(apiRef2, props);
  useGridColumns(apiRef2, props);
  useGridRows(apiRef2, props);
  useGridRowSpanning(apiRef2, props);
  useGridParamsApi(apiRef2, props);
  useGridDetailPanel(apiRef2, props);
  useGridColumnSpanning(apiRef2);
  useGridColumnGrouping(apiRef2, props);
  useGridEditing(apiRef2, props);
  useGridFocus(apiRef2, props);
  useGridPreferencesPanel(apiRef2, props);
  useGridFilter(apiRef2, props);
  useGridSorting(apiRef2, props);
  useGridDensity(apiRef2, props);
  useGridColumnReorder(apiRef2, props);
  useGridColumnResize(apiRef2, props);
  useGridPagination(apiRef2, props);
  useGridRowsMeta(apiRef2, props);
  useGridRowReorder(apiRef2, props);
  useGridScroll(apiRef2, props);
  useGridInfiniteLoader(apiRef2, props);
  useGridLazyLoader(apiRef2, props);
  useGridColumnMenu(apiRef2);
  useGridCsvExport(apiRef2, props);
  useGridPrintExport(apiRef2, props);
  useGridClipboard(apiRef2, props);
  useGridDimensions(apiRef2, props);
  useGridEvents(apiRef2, props);
  useGridStatePersistence(apiRef2);
  useGridVirtualization(apiRef2, props);
  useGridDataSource(apiRef2, props);
  useGridListView(apiRef2, props);
  return apiRef2;
};

// node_modules/@mui/x-data-grid-pro/esm/DataGridPro/useDataGridProProps.js
var React50 = __toESM(require_react());

// node_modules/@mui/x-data-grid-pro/esm/components/GridProColumnMenu.js
var React43 = __toESM(require_react());
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var GRID_COLUMN_MENU_SLOTS_PRO = _extends({}, GRID_COLUMN_MENU_SLOTS, {
  columnMenuPinningItem: GridColumnMenuPinningItem
});
var GRID_COLUMN_MENU_SLOT_PROPS_PRO = _extends({}, GRID_COLUMN_MENU_SLOT_PROPS, {
  columnMenuPinningItem: {
    displayOrder: 15
  }
});
var GridProColumnMenu = forwardRef(function GridProColumnMenu2(props, ref) {
  return (0, import_jsx_runtime27.jsx)(GridGenericColumnMenu, _extends({}, props, {
    defaultSlots: GRID_COLUMN_MENU_SLOTS_PRO,
    defaultSlotProps: GRID_COLUMN_MENU_SLOT_PROPS_PRO,
    ref
  }));
});

// node_modules/@mui/x-data-grid-pro/esm/components/GridColumnHeaders.js
var React45 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/columnHeaders/useGridColumnHeaders.js
var React44 = __toESM(require_react());
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var _excluded5 = ["getColumnsToRender", "getPinnedCellOffset", "renderContext", "leftRenderContext", "rightRenderContext", "pinnedColumns", "visibleColumns", "columnPositions"];
var useUtilityClasses9 = (ownerState) => {
  const {
    classes
  } = ownerState;
  return React44.useMemo(() => {
    const slots = {
      headerFilterRow: ["headerFilterRow"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  }, [classes]);
};
var filterItemsCache = /* @__PURE__ */ Object.create(null);
var useGridColumnHeaders2 = (props) => {
  const apiRef2 = useGridPrivateApiContext();
  const {
    headerGroupingMaxDepth,
    hasOtherElementInTabSequence
  } = props;
  const columnHeaderFilterTabIndexState = useGridSelector(apiRef2, gridTabIndexColumnHeaderFilterSelector);
  const _useGridColumnHeaders = useGridColumnHeaders(_extends({}, props, {
    hasOtherElementInTabSequence: hasOtherElementInTabSequence || columnHeaderFilterTabIndexState !== null
  })), {
    getColumnsToRender,
    getPinnedCellOffset,
    renderContext,
    leftRenderContext,
    rightRenderContext,
    pinnedColumns,
    visibleColumns,
    columnPositions
  } = _useGridColumnHeaders, otherProps = _objectWithoutPropertiesLoose(_useGridColumnHeaders, _excluded5);
  const headerFiltersRef = React44.useRef(null);
  apiRef2.current.register("private", {
    headerFiltersElementRef: headerFiltersRef
  });
  const headerFilterMenuRef = React44.useRef(null);
  const rootProps = useGridRootProps2();
  const classes = useUtilityClasses9(rootProps);
  const disableHeaderFiltering = !rootProps.headerFilters;
  const filterModel = useGridSelector(apiRef2, gridFilterModelSelector);
  const columnsTotalWidth = useGridSelector(apiRef2, gridColumnsTotalWidthSelector);
  const gridHasFiller = useGridSelector(apiRef2, gridHasFillerSelector);
  const headerFilterHeight = useGridSelector(apiRef2, gridHeaderFilterHeightSelector);
  const scrollbarWidth = useGridSelector(apiRef2, gridVerticalScrollbarWidthSelector);
  const columnHeaderFilterFocus = useGridSelector(apiRef2, gridFocusColumnHeaderFilterSelector);
  const getFilterItem = React44.useCallback((colDef) => {
    const filterModelItem = filterModel == null ? void 0 : filterModel.items.find((it) => it.field === colDef.field && it.operator !== "isAnyOf");
    if (filterModelItem != null) {
      return filterModelItem;
    }
    const defaultCachedItem = filterItemsCache[colDef.field];
    if (defaultCachedItem != null) {
      return defaultCachedItem;
    }
    const defaultItem = getGridFilter(colDef);
    filterItemsCache[colDef.field] = defaultItem;
    return defaultItem;
  }, [filterModel]);
  const getColumnFilters = (params) => {
    var _a3;
    const {
      renderedColumns,
      firstColumnToRender
    } = getColumnsToRender(params);
    const filters = [];
    for (let i2 = 0; i2 < renderedColumns.length; i2 += 1) {
      const colDef = renderedColumns[i2];
      const columnIndex = firstColumnToRender + i2;
      const hasFocus = (columnHeaderFilterFocus == null ? void 0 : columnHeaderFilterFocus.field) === colDef.field;
      const isFirstColumn = columnIndex === 0;
      const tabIndexField = columnHeaderFilterTabIndexState == null ? void 0 : columnHeaderFilterTabIndexState.field;
      const tabIndex = tabIndexField === colDef.field || isFirstColumn && !props.hasOtherElementInTabSequence ? 0 : -1;
      const headerClassName = typeof colDef.headerClassName === "function" ? colDef.headerClassName({
        field: colDef.field,
        colDef
      }) : colDef.headerClassName;
      const item = getFilterItem(colDef);
      const pinnedPosition = params == null ? void 0 : params.position;
      const pinnedOffset = getPinnedCellOffset(pinnedPosition, colDef.computedWidth, columnIndex, columnPositions, columnsTotalWidth, scrollbarWidth);
      const indexInSection = i2;
      const sectionLength = renderedColumns.length;
      const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);
      const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showCellVerticalBorder, gridHasFiller);
      filters.push((0, import_jsx_runtime28.jsx)(rootProps.slots.headerFilterCell, _extends({
        colIndex: columnIndex,
        height: headerFilterHeight,
        width: colDef.computedWidth,
        colDef,
        hasFocus,
        tabIndex,
        headerFilterMenuRef,
        headerClassName,
        "data-field": colDef.field,
        item,
        pinnedPosition,
        pinnedOffset,
        showLeftBorder,
        showRightBorder
      }, (_a3 = rootProps.slotProps) == null ? void 0 : _a3.headerFilterCell), `${colDef.field}-filter`));
    }
    return otherProps.getFillers(params, filters, 0, true);
  };
  const getColumnFiltersRow = () => {
    if (disableHeaderFiltering) {
      return null;
    }
    return (0, import_jsx_runtime28.jsxs)(GridColumnHeaderRow, {
      ref: headerFiltersRef,
      className: classes.headerFilterRow,
      role: "row",
      "aria-rowindex": headerGroupingMaxDepth + 2,
      ownerState: rootProps,
      children: [leftRenderContext && getColumnFilters({
        position: PinnedColumnPosition.LEFT,
        renderContext: leftRenderContext,
        maxLastColumn: leftRenderContext.lastColumnIndex
      }), getColumnFilters({
        renderContext,
        maxLastColumn: visibleColumns.length - pinnedColumns.right.length
      }), rightRenderContext && getColumnFilters({
        position: PinnedColumnPosition.RIGHT,
        renderContext: rightRenderContext,
        maxLastColumn: rightRenderContext.lastColumnIndex
      })]
    });
  };
  return _extends({}, otherProps, {
    getColumnFiltersRow
  });
};

// node_modules/@mui/x-data-grid-pro/esm/components/GridColumnHeaders.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var _excluded6 = ["style", "className", "visibleColumns", "sortColumnLookup", "filterColumnLookup", "columnHeaderTabIndexState", "columnGroupHeaderTabIndexState", "columnHeaderFocus", "columnGroupHeaderFocus", "headerGroupingMaxDepth", "columnMenuState", "columnVisibility", "columnGroupsHeaderStructure", "hasOtherElementInTabSequence"];
var Filler = styled_default2("div")({
  flex: 1,
  backgroundColor: "var(--DataGrid-containerBackground)"
});
var GridColumnHeaders = forwardRef(function GridColumnHeaders2(props, ref) {
  const {
    className,
    visibleColumns,
    sortColumnLookup,
    filterColumnLookup,
    columnHeaderTabIndexState,
    columnGroupHeaderTabIndexState,
    columnHeaderFocus,
    columnGroupHeaderFocus,
    headerGroupingMaxDepth,
    columnMenuState,
    columnVisibility,
    columnGroupsHeaderStructure,
    hasOtherElementInTabSequence
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
  const {
    getInnerProps,
    getColumnHeadersRow,
    getColumnFiltersRow,
    getColumnGroupHeadersRows
  } = useGridColumnHeaders2({
    visibleColumns,
    sortColumnLookup,
    filterColumnLookup,
    columnHeaderTabIndexState,
    hasOtherElementInTabSequence,
    columnGroupHeaderTabIndexState,
    columnHeaderFocus,
    columnGroupHeaderFocus,
    headerGroupingMaxDepth,
    columnMenuState,
    columnVisibility,
    columnGroupsHeaderStructure
  });
  return (0, import_jsx_runtime29.jsxs)(GridBaseColumnHeaders, _extends({
    className
  }, other, getInnerProps(), {
    ref,
    children: [getColumnGroupHeadersRows(), getColumnHeadersRow(), getColumnFiltersRow(), (0, import_jsx_runtime29.jsx)(Filler, {})]
  }));
});
true ? GridColumnHeaders.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  columnGroupHeaderFocus: import_prop_types8.default.shape({
    depth: import_prop_types8.default.number.isRequired,
    field: import_prop_types8.default.string.isRequired
  }),
  columnGroupHeaderTabIndexState: import_prop_types8.default.shape({
    depth: import_prop_types8.default.number.isRequired,
    field: import_prop_types8.default.string.isRequired
  }),
  columnGroupsHeaderStructure: import_prop_types8.default.arrayOf(import_prop_types8.default.arrayOf(import_prop_types8.default.shape({
    columnFields: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
    groupId: import_prop_types8.default.string
  }))).isRequired,
  columnHeaderFocus: import_prop_types8.default.shape({
    field: import_prop_types8.default.string.isRequired
  }),
  columnHeaderTabIndexState: import_prop_types8.default.shape({
    field: import_prop_types8.default.string.isRequired
  }),
  columnMenuState: import_prop_types8.default.shape({
    field: import_prop_types8.default.string,
    open: import_prop_types8.default.bool.isRequired
  }).isRequired,
  columnVisibility: import_prop_types8.default.object.isRequired,
  filterColumnLookup: import_prop_types8.default.object.isRequired,
  hasOtherElementInTabSequence: import_prop_types8.default.bool.isRequired,
  headerGroupingMaxDepth: import_prop_types8.default.number.isRequired,
  sortColumnLookup: import_prop_types8.default.object.isRequired,
  visibleColumns: import_prop_types8.default.arrayOf(import_prop_types8.default.object).isRequired
} : void 0;

// node_modules/@mui/x-data-grid-pro/esm/components/GridDetailPanels.js
var React48 = __toESM(require_react());

// node_modules/@mui/x-data-grid-pro/esm/components/GridDetailPanel.js
var React47 = __toESM(require_react());

// node_modules/@mui/x-internals/esm/useResizeObserver/useResizeObserver.js
var React46 = __toESM(require_react());
var isDevEnvironment = true;
var noop = () => {
};
function useResizeObserver(ref, fn, enabled) {
  const fnRef = React46.useRef(null);
  fnRef.current = fn;
  useEnhancedEffect_default(() => {
    if (enabled === false || typeof ResizeObserver === "undefined") {
      return noop;
    }
    let frameID = 0;
    const target = ref.current;
    const observer = new ResizeObserver((entries) => {
      if (isDevEnvironment) {
        frameID = requestAnimationFrame(() => {
          fnRef.current(entries);
        });
      } else {
        fnRef.current(entries);
      }
    });
    if (target) {
      observer.observe(target);
    }
    return () => {
      if (frameID) {
        cancelAnimationFrame(frameID);
      }
      observer.disconnect();
    };
  }, [ref, enabled]);
}

// node_modules/@mui/x-data-grid-pro/esm/components/GridDetailPanel.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var DetailPanel = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "DetailPanel",
  overridesResolver: (props, styles) => styles.detailPanel
})(({
  theme
}) => ({
  width: "calc(var(--DataGrid-rowWidth) - var(--DataGrid-hasScrollY) * var(--DataGrid-scrollbarSize))",
  backgroundColor: (theme.vars || theme).palette.background.default,
  overflow: "auto"
}));
function GridDetailPanel(props) {
  const {
    rowId,
    height,
    className,
    children
  } = props;
  const apiRef2 = useGridPrivateApiContext2();
  const ref = React47.useRef(null);
  const rootProps = useGridRootProps2();
  const ownerState = rootProps;
  const hasAutoHeight = height === "auto";
  React47.useLayoutEffect(() => {
    if (hasAutoHeight && typeof ResizeObserver === "undefined") {
      apiRef2.current.storeDetailPanelHeight(rowId, ref.current.clientHeight);
    }
  }, [apiRef2, hasAutoHeight, rowId]);
  useResizeObserver(ref, (entries) => {
    const [entry] = entries;
    const observedHeight = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;
    apiRef2.current.storeDetailPanelHeight(rowId, observedHeight);
  }, hasAutoHeight);
  return (0, import_jsx_runtime30.jsx)(DetailPanel, {
    ref,
    ownerState,
    role: "presentation",
    style: {
      height
    },
    className,
    children
  });
}

// node_modules/@mui/x-data-grid-pro/esm/components/GridDetailPanels.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var useUtilityClasses10 = () => {
  const slots = {
    detailPanel: ["detailPanel"]
  };
  return composeClasses(slots, getDataGridUtilityClass, {});
};
function GridDetailPanels(props) {
  const rootProps = useGridRootProps2();
  if (!rootProps.getDetailPanelContent) {
    return null;
  }
  return React48.createElement(GridDetailPanelsImpl, props);
}
function GridDetailPanelsImpl({
  virtualScroller
}) {
  const apiRef2 = useGridPrivateApiContext2();
  const classes = useUtilityClasses10();
  const {
    setPanels
  } = virtualScroller;
  const expandedRowIds = useGridSelector(apiRef2, gridDetailPanelExpandedRowIdsSelector);
  const detailPanelsContent = useGridSelector(apiRef2, gridDetailPanelExpandedRowsContentCacheSelector);
  const detailPanelsHeights = useGridSelector(apiRef2, gridDetailPanelExpandedRowsHeightCacheSelector);
  const getDetailPanel = React48.useCallback((rowId) => {
    const content = detailPanelsContent[rowId];
    const rowIndex = apiRef2.current.getRowIndexRelativeToVisibleRows(rowId);
    const exists = rowIndex !== void 0;
    if (!React48.isValidElement(content) || !exists) {
      return null;
    }
    const hasAutoHeight = apiRef2.current.detailPanelHasAutoHeight(rowId);
    const height = hasAutoHeight ? "auto" : detailPanelsHeights[rowId];
    return (0, import_jsx_runtime31.jsx)(GridDetailPanel, {
      rowId,
      height,
      className: classes.detailPanel,
      children: content
    }, `panel-${rowId}`);
  }, [apiRef2, classes.detailPanel, detailPanelsHeights, detailPanelsContent]);
  React48.useEffect(() => {
    if (expandedRowIds.length === 0) {
      setPanels(EMPTY_DETAIL_PANELS);
    } else {
      setPanels(new Map(expandedRowIds.map((rowId) => [rowId, getDetailPanel(rowId)])));
    }
  }, [expandedRowIds, setPanels, getDetailPanel]);
  return null;
}

// node_modules/@mui/x-data-grid-pro/esm/components/GridPinnedRows.js
var React49 = __toESM(require_react());
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var useUtilityClasses11 = () => {
  const slots = {
    root: ["pinnedRows"]
  };
  return composeClasses(slots, getDataGridUtilityClass, {});
};
function GridPinnedRows({
  position,
  virtualScroller
}) {
  const classes = useUtilityClasses11();
  const apiRef2 = useGridPrivateApiContext();
  const pinnedRowsData = useGridSelector(apiRef2, gridPinnedRowsSelector);
  const rows = pinnedRowsData[position];
  const pinnedRenderContext = React49.useMemo(() => ({
    firstRowIndex: 0,
    lastRowIndex: rows.length,
    firstColumnIndex: -1,
    lastColumnIndex: -1
  }), [rows]);
  if (rows.length === 0) {
    return null;
  }
  const pinnedRows = virtualScroller.getRows({
    position,
    rows,
    renderContext: pinnedRenderContext
  });
  return (0, import_jsx_runtime32.jsx)("div", {
    className: clsx_default(classes.root, gridClasses[`pinnedRows--${position}`]),
    role: "presentation",
    children: pinnedRows
  });
}

// node_modules/@mui/x-data-grid-pro/esm/material/index.js
var iconSlots = {
  columnMenuPinRightIcon: GridPushPinRightIcon,
  columnMenuPinLeftIcon: GridPushPinLeftIcon
};
var materialSlots = _extends({}, iconSlots);
var material_default = materialSlots;

// node_modules/@mui/x-data-grid-pro/esm/constants/dataGridProDefaultSlotsComponents.js
var DATA_GRID_PRO_DEFAULT_SLOTS_COMPONENTS = _extends({}, DATA_GRID_DEFAULT_SLOTS_COMPONENTS, material_default, {
  columnMenu: GridProColumnMenu,
  columnHeaders: GridColumnHeaders,
  detailPanels: GridDetailPanels,
  headerFilterCell: Memoized,
  headerFilterMenu: GridHeaderFilterMenu,
  pinnedRows: GridPinnedRows
});

// node_modules/@mui/x-data-grid-pro/esm/DataGridPro/useDataGridProProps.js
var getDataGridProForcedProps = (themedProps) => _extends({
  signature: "DataGridPro"
}, themedProps.unstable_dataSource ? {
  filterMode: "server",
  sortingMode: "server",
  paginationMode: "server"
} : {});
var DATA_GRID_PRO_PROPS_DEFAULT_VALUES = _extends({}, DATA_GRID_PROPS_DEFAULT_VALUES, {
  autosizeOnMount: false,
  defaultGroupingExpansionDepth: 0,
  disableAutosize: false,
  disableChildrenFiltering: false,
  disableChildrenSorting: false,
  disableColumnPinning: false,
  getDetailPanelHeight: () => 500,
  headerFilters: false,
  keepColumnPositionIfDraggedOutside: false,
  rowSelectionPropagation: ROW_SELECTION_PROPAGATION_DEFAULT,
  rowReordering: false,
  rowsLoadingMode: "client",
  scrollEndThreshold: 80,
  treeData: false,
  unstable_listView: false
});
var defaultSlots = DATA_GRID_PRO_DEFAULT_SLOTS_COMPONENTS;
var useDataGridProProps = (inProps) => {
  const themedProps = useProps(
    // eslint-disable-next-line material-ui/mui-name-matches-component-name
    useThemeProps({
      props: inProps,
      name: "MuiDataGrid"
    })
  );
  const localeText = React50.useMemo(() => _extends({}, GRID_DEFAULT_LOCALE_TEXT, themedProps.localeText), [themedProps.localeText]);
  const slots = React50.useMemo(() => computeSlots({
    defaultSlots,
    slots: themedProps.slots
  }), [themedProps.slots]);
  return React50.useMemo(() => _extends({}, DATA_GRID_PRO_PROPS_DEFAULT_VALUES, themedProps, {
    localeText,
    slots
  }, getDataGridProForcedProps(themedProps)), [themedProps, localeText, slots]);
};

// node_modules/@mui/x-data-grid-pro/esm/utils/releaseInfo.js
var getReleaseInfo = () => {
  const releaseInfo3 = "MTczOTc0NjgwMDAwMA==";
  if (true) {
    if (releaseInfo3 === "__RELEASE_INFO__") {
      return ponyfillGlobal_default.__MUI_RELEASE_INFO__;
    }
  }
  return releaseInfo3;
};

// node_modules/@mui/x-data-grid-pro/esm/internals/propValidation.js
var propValidatorsDataGridPro = [...propValidatorsDataGrid, (props) => props.pagination && props.hideFooterRowCount && "MUI X: The `hideFooterRowCount` prop has no effect when the pagination is enabled." || void 0, (props) => props.treeData && props.filterMode === "server" && !props.unstable_dataSource && 'MUI X: The `filterMode="server"` prop is not available when the `treeData` is enabled.' || void 0, (props) => !props.pagination && props.checkboxSelectionVisibleOnly && "MUI X: The `checkboxSelectionVisibleOnly` prop has no effect when the pagination is not enabled." || void 0, (props) => props.signature !== GridSignature.DataGrid && props.paginationMode === "client" && props.rowsLoadingMode !== "server" && isNumber(props.rowCount) && 'MUI X: Usage of the `rowCount` prop with client side pagination (`paginationMode="client"`) has no effect. `rowCount` is only meant to be used with `paginationMode="server"`.' || void 0];

// node_modules/@mui/x-data-grid-pro/esm/hooks/utils/useGridAriaAttributes.js
var useGridAriaAttributes2 = () => {
  const ariaAttributesCommunity = useGridAriaAttributes();
  const rootProps = useGridRootProps2();
  const ariaAttributesPro = rootProps.treeData ? {
    role: "treegrid"
  } : {};
  return _extends({}, ariaAttributesCommunity, ariaAttributesPro);
};

// node_modules/@mui/x-data-grid-pro/esm/hooks/features/rows/useGridRowAriaAttributes.js
var React51 = __toESM(require_react());
var useGridRowAriaAttributes2 = (addTreeDataAttributes) => {
  const apiRef2 = useGridPrivateApiContext2();
  const props = useGridRootProps2();
  const getRowAriaAttributesCommunity = useGridRowAriaAttributes();
  const filteredTopLevelRowCount = useGridSelector(apiRef2, gridFilteredTopLevelRowCountSelector);
  const filteredChildrenCountLookup = useGridSelector(apiRef2, gridFilteredChildrenCountLookupSelector);
  const sortedVisibleRowPositionsLookup = useGridSelector(apiRef2, gridExpandedSortedRowTreeLevelPositionLookupSelector);
  return React51.useCallback((rowNode, index) => {
    const ariaAttributes = getRowAriaAttributesCommunity(rowNode, index);
    if (rowNode === null || !(props.treeData || addTreeDataAttributes)) {
      return ariaAttributes;
    }
    if (rowNode.type === "footer" || rowNode.type === "pinnedRow") {
      return ariaAttributes;
    }
    ariaAttributes["aria-level"] = rowNode.depth + 1;
    const filteredChildrenCount = filteredChildrenCountLookup[rowNode.id] ?? 0;
    if (rowNode.type === "group" && filteredChildrenCount > 0) {
      ariaAttributes["aria-expanded"] = Boolean(rowNode.childrenExpanded);
    }
    if (rowNode.parent !== null) {
      ariaAttributes["aria-setsize"] = rowNode.parent === GRID_ROOT_GROUP_ID ? filteredTopLevelRowCount : filteredChildrenCountLookup[rowNode.parent];
      ariaAttributes["aria-posinset"] = sortedVisibleRowPositionsLookup[rowNode.id];
    }
    return ariaAttributes;
  }, [props.treeData, addTreeDataAttributes, filteredTopLevelRowCount, filteredChildrenCountLookup, sortedVisibleRowPositionsLookup, getRowAriaAttributesCommunity]);
};

// node_modules/@mui/x-data-grid-pro/esm/DataGridPro/DataGridPro.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
var configuration = {
  hooks: {
    useGridAriaAttributes: useGridAriaAttributes2,
    useGridRowAriaAttributes: useGridRowAriaAttributes2
  }
};
var releaseInfo = getReleaseInfo();
var watermark = (0, import_jsx_runtime33.jsx)(MemoizedWatermark, {
  packageName: "x-data-grid-pro",
  releaseInfo
});
var DataGridProRaw = forwardRef(function DataGridPro(inProps, ref) {
  var _a3;
  const props = useDataGridProProps(inProps);
  const privateApiRef = useDataGridProComponent(props.apiRef, props);
  useLicenseVerifier("x-data-grid-pro", releaseInfo);
  if (true) {
    validateProps(props, propValidatorsDataGridPro);
  }
  return (0, import_jsx_runtime33.jsx)(GridContextProvider, {
    privateApiRef,
    configuration,
    props,
    children: (0, import_jsx_runtime33.jsx)(MemoizedGridRoot, _extends({
      className: props.className,
      style: props.style,
      sx: props.sx
    }, props.forwardedProps, (_a3 = props.slotProps) == null ? void 0 : _a3.root, {
      ref,
      children: watermark
    }))
  });
});
var DataGridPro2 = React52.memo(DataGridProRaw);
DataGridProRaw.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The ref object that allows grid manipulation. Can be instantiated with `useGridApiRef()`.
   */
  apiRef: import_prop_types9.default.shape({
    current: import_prop_types9.default.object.isRequired
  }),
  /**
   * The label of the Data Grid.
   */
  "aria-label": import_prop_types9.default.string,
  /**
   * The id of the element containing a label for the Data Grid.
   */
  "aria-labelledby": import_prop_types9.default.string,
  /**
   * If `true`, the Data Grid height is dynamic and follows the number of rows in the Data Grid.
   * @default false
   * @deprecated Use flex parent container instead: https://mui.com/x/react-data-grid/layout/#flex-parent-container
   * @example
   * <div style={{ display: 'flex', flexDirection: 'column' }}>
   *   <DataGrid />
   * </div>
   */
  autoHeight: import_prop_types9.default.bool,
  /**
   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.
   * @default false
   */
  autoPageSize: import_prop_types9.default.bool,
  /**
   * If `true`, columns are autosized after the datagrid is mounted.
   * @default false
   */
  autosizeOnMount: import_prop_types9.default.bool,
  /**
   * The options for autosize when user-initiated.
   */
  autosizeOptions: import_prop_types9.default.shape({
    columns: import_prop_types9.default.arrayOf(import_prop_types9.default.string),
    disableColumnVirtualization: import_prop_types9.default.bool,
    expand: import_prop_types9.default.bool,
    includeHeaders: import_prop_types9.default.bool,
    includeOutliers: import_prop_types9.default.bool,
    outliersFactor: import_prop_types9.default.number
  }),
  /**
   * Controls the modes of the cells.
   */
  cellModesModel: import_prop_types9.default.object,
  /**
   * If `true`, the Data Grid will display an extra column with checkboxes for selecting rows.
   * @default false
   */
  checkboxSelection: import_prop_types9.default.bool,
  /**
   * If `true`, the "Select All" header checkbox selects only the rows on the current page. To be used in combination with `checkboxSelection`.
   * It only works if the pagination is enabled.
   * @default false
   */
  checkboxSelectionVisibleOnly: import_prop_types9.default.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types9.default.object,
  /**
   * The character used to separate cell values when copying to the clipboard.
   * @default '\t'
   */
  clipboardCopyCellDelimiter: import_prop_types9.default.string,
  /**
   * Column region in pixels to render before/after the viewport
   * @default 150
   */
  columnBufferPx: import_prop_types9.default.number,
  /**
   * Sets the height in pixels of the column group headers in the Data Grid.
   * Inherits the `columnHeaderHeight` value if not set.
   */
  columnGroupHeaderHeight: import_prop_types9.default.number,
  columnGroupingModel: import_prop_types9.default.arrayOf(import_prop_types9.default.object),
  /**
   * Sets the height in pixel of the column headers in the Data Grid.
   * @default 56
   */
  columnHeaderHeight: import_prop_types9.default.number,
  /**
   * Set of columns of type [[GridColDef]][].
   */
  columns: import_prop_types9.default.arrayOf(import_prop_types9.default.object).isRequired,
  /**
   * Set the column visibility model of the Data Grid.
   * If defined, the Data Grid will ignore the `hide` property in [[GridColDef]].
   */
  columnVisibilityModel: import_prop_types9.default.object,
  /**
   * If above 0, the row children will be expanded up to this depth.
   * If equal to -1, all the row children will be expanded.
   * @default 0
   */
  defaultGroupingExpansionDepth: import_prop_types9.default.number,
  /**
   * Set the density of the Data Grid.
   * @default "standard"
   */
  density: import_prop_types9.default.oneOf(["comfortable", "compact", "standard"]),
  /**
   * The row ids to show the detail panel.
   */
  detailPanelExpandedRowIds: import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.string]).isRequired),
  /**
   * If `true`, column autosizing on header separator double-click is disabled.
   * @default false
   */
  disableAutosize: import_prop_types9.default.bool,
  /**
   * If `true`, the filtering will only be applied to the top level rows when grouping rows with the `treeData` prop.
   * @default false
   */
  disableChildrenFiltering: import_prop_types9.default.bool,
  /**
   * If `true`, the sorting will only be applied to the top level rows when grouping rows with the `treeData` prop.
   * @default false
   */
  disableChildrenSorting: import_prop_types9.default.bool,
  /**
   * If `true`, column filters are disabled.
   * @default false
   */
  disableColumnFilter: import_prop_types9.default.bool,
  /**
   * If `true`, the column menu is disabled.
   * @default false
   */
  disableColumnMenu: import_prop_types9.default.bool,
  /**
   * If `true`, the column pinning is disabled.
   * @default false
   */
  disableColumnPinning: import_prop_types9.default.bool,
  /**
   * If `true`, reordering columns is disabled.
   * @default false
   */
  disableColumnReorder: import_prop_types9.default.bool,
  /**
   * If `true`, resizing columns is disabled.
   * @default false
   */
  disableColumnResize: import_prop_types9.default.bool,
  /**
   * If `true`, hiding/showing columns is disabled.
   * @default false
   */
  disableColumnSelector: import_prop_types9.default.bool,
  /**
   * If `true`, the column sorting feature will be disabled.
   * @default false
   */
  disableColumnSorting: import_prop_types9.default.bool,
  /**
   * If `true`, the density selector is disabled.
   * @default false
   */
  disableDensitySelector: import_prop_types9.default.bool,
  /**
   * If `true`, `eval()` is not used for performance optimization.
   * @default false
   */
  disableEval: import_prop_types9.default.bool,
  /**
   * If `true`, filtering with multiple columns is disabled.
   * @default false
   */
  disableMultipleColumnsFiltering: import_prop_types9.default.bool,
  /**
   * If `true`, the sorting with multiple columns is disabled.
   * @default false
   */
  disableMultipleColumnsSorting: import_prop_types9.default.bool,
  /**
   * If `true`, multiple selection using the Ctrl/CMD or Shift key is disabled.
   * The MIT DataGrid will ignore this prop, unless `checkboxSelection` is enabled.
   * @default false (`!props.checkboxSelection` for MIT Data Grid)
   */
  disableMultipleRowSelection: import_prop_types9.default.bool,
  /**
   * If `true`, the selection on click on a row or cell is disabled.
   * @default false
   */
  disableRowSelectionOnClick: import_prop_types9.default.bool,
  /**
   * If `true`, the virtualization is disabled.
   * @default false
   */
  disableVirtualization: import_prop_types9.default.bool,
  /**
   * Controls whether to use the cell or row editing.
   * @default "cell"
   */
  editMode: import_prop_types9.default.oneOf(["cell", "row"]),
  /**
   * Use if the actual rowCount is not known upfront, but an estimation is available.
   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.
   * Applicable only with `paginationMode="server"` and when `rowCount="-1"`
   */
  estimatedRowCount: import_prop_types9.default.number,
  /**
   * Unstable features, breaking changes might be introduced.
   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.
   */
  experimentalFeatures: import_prop_types9.default.shape({
    warnIfFocusStateIsNotSynced: import_prop_types9.default.bool
  }),
  /**
   * The milliseconds delay to wait after a keystroke before triggering filtering.
   * @default 150
   */
  filterDebounceMs: import_prop_types9.default.number,
  /**
   * Filtering can be processed on the server or client-side.
   * Set it to 'server' if you would like to handle filtering on the server-side.
   * @default "client"
   */
  filterMode: import_prop_types9.default.oneOf(["client", "server"]),
  /**
   * Set the filter model of the Data Grid.
   */
  filterModel: import_prop_types9.default.shape({
    items: import_prop_types9.default.arrayOf(import_prop_types9.default.shape({
      field: import_prop_types9.default.string.isRequired,
      id: import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.string]),
      operator: import_prop_types9.default.string.isRequired,
      value: import_prop_types9.default.any
    })).isRequired,
    logicOperator: import_prop_types9.default.oneOf(["and", "or"]),
    quickFilterExcludeHiddenColumns: import_prop_types9.default.bool,
    quickFilterLogicOperator: import_prop_types9.default.oneOf(["and", "or"]),
    quickFilterValues: import_prop_types9.default.array
  }),
  /**
   * Forwarded props for the Data Grid root element.
   * @ignore - do not document.
   */
  forwardedProps: import_prop_types9.default.object,
  /**
   * Function that applies CSS classes dynamically on cells.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @returns {string} The CSS class to apply to the cell.
   */
  getCellClassName: import_prop_types9.default.func,
  /**
   * Function that returns the element to render in row detail.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {React.JSX.Element} The row detail element.
   */
  getDetailPanelContent: import_prop_types9.default.func,
  /**
   * Function that returns the height of the row detail panel.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {number | string} The height in pixels or "auto" to use the content height.
   * @default "() => 500"
   */
  getDetailPanelHeight: import_prop_types9.default.func,
  /**
   * Function that returns the estimated height for a row.
   * Only works if dynamic row height is used.
   * Once the row height is measured this value is discarded.
   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.
   */
  getEstimatedRowHeight: import_prop_types9.default.func,
  /**
   * Function that applies CSS classes dynamically on rows.
   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].
   * @returns {string} The CSS class to apply to the row.
   */
  getRowClassName: import_prop_types9.default.func,
  /**
   * Function that sets the row height per row.
   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If "auto" then the row height is calculated based on the content.
   */
  getRowHeight: import_prop_types9.default.func,
  /**
   * Return the id of a given [[GridRowModel]].
   */
  getRowId: import_prop_types9.default.func,
  /**
   * Function that allows to specify the spacing between rows.
   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].
   * @returns {GridRowSpacing} The row spacing values.
   */
  getRowSpacing: import_prop_types9.default.func,
  /**
   * Determines the path of a row in the tree data.
   * For instance, a row with the path ["A", "B"] is the child of the row with the path ["A"].
   * Note that all paths must contain at least one element.
   * @template R
   * @param {R} row The row from which we want the path.
   * @returns {string[]} The path to the row.
   */
  getTreeDataPath: import_prop_types9.default.func,
  /**
   * The grouping column used by the tree data.
   */
  groupingColDef: import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object]),
  /**
   * Override the height of the header filters.
   */
  headerFilterHeight: import_prop_types9.default.number,
  /**
   * If `true`, the header filters feature is enabled.
   * @default false
   */
  headerFilters: import_prop_types9.default.bool,
  /**
   * If `true`, the footer component is hidden.
   * @default false
   */
  hideFooter: import_prop_types9.default.bool,
  /**
   * If `true`, the pagination component in the footer is hidden.
   * @default false
   */
  hideFooterPagination: import_prop_types9.default.bool,
  /**
   * If `true`, the row count in the footer is hidden.
   * It has no effect if the pagination is enabled.
   * @default false
   */
  hideFooterRowCount: import_prop_types9.default.bool,
  /**
   * If `true`, the selected row count in the footer is hidden.
   * @default false
   */
  hideFooterSelectedRowCount: import_prop_types9.default.bool,
  /**
   * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.
   * E.g. when filter value is `cafe`, the rows with `café` will be visible.
   * @default false
   */
  ignoreDiacritics: import_prop_types9.default.bool,
  /**
   * If `true`, the Data Grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.
   * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.
   * @default false
   */
  ignoreValueFormatterDuringExport: import_prop_types9.default.oneOfType([import_prop_types9.default.shape({
    clipboardExport: import_prop_types9.default.bool,
    csvExport: import_prop_types9.default.bool
  }), import_prop_types9.default.bool]),
  /**
   * If `select`, a group header checkbox in indeterminate state (like "Select All" checkbox)
   * will select all the rows under it.
   * If `deselect`, it will deselect all the rows under it.
   * Works only if `checkboxSelection` is enabled.
   * @default "deselect"
   * @deprecated `select` will be the default behavior from v8 onwards
   */
  indeterminateCheckboxAction: import_prop_types9.default.oneOf(["deselect", "select"]),
  /**
   * The initial state of the DataGridPro.
   * The data in it will be set in the state on initialization but will not be controlled.
   * If one of the data in `initialState` is also being controlled, then the control state wins.
   */
  initialState: import_prop_types9.default.object,
  /**
   * Callback fired when a cell is rendered, returns true if the cell is editable.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @returns {boolean} A boolean indicating if the cell is editable.
   */
  isCellEditable: import_prop_types9.default.func,
  /**
   * Determines if a group should be expanded after its creation.
   * This prop takes priority over the `defaultGroupingExpansionDepth` prop.
   * @param {GridGroupNode} node The node of the group to test.
   * @returns {boolean} A boolean indicating if the group is expanded.
   */
  isGroupExpandedByDefault: import_prop_types9.default.func,
  /**
   * Determines if a row can be selected.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {boolean} A boolean indicating if the row is selectable.
   */
  isRowSelectable: import_prop_types9.default.func,
  /**
   * If `true`, moving the mouse pointer outside the grid before releasing the mouse button
   * in a column re-order action will not cause the column to jump back to its original position.
   * @default false
   */
  keepColumnPositionIfDraggedOutside: import_prop_types9.default.bool,
  /**
   * If `true`, the selection model will retain selected rows that do not exist.
   * Useful when using server side pagination and row selections need to be retained
   * when changing pages.
   * @default false
   */
  keepNonExistentRowsSelected: import_prop_types9.default.bool,
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types9.default.bool,
  /**
   * Set the locale text of the Data Grid.
   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.
   */
  localeText: import_prop_types9.default.object,
  /**
   * Pass a custom logger in the components that implements the [[Logger]] interface.
   * @default console
   */
  logger: import_prop_types9.default.shape({
    debug: import_prop_types9.default.func.isRequired,
    error: import_prop_types9.default.func.isRequired,
    info: import_prop_types9.default.func.isRequired,
    warn: import_prop_types9.default.func.isRequired
  }),
  /**
   * Allows to pass the logging level or false to turn off logging.
   * @default "error" ("warn" in dev mode)
   */
  logLevel: import_prop_types9.default.oneOf(["debug", "error", "info", "warn", false]),
  /**
   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).
   */
  nonce: import_prop_types9.default.string,
  /**
   * Callback fired when any cell is clicked.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellClick: import_prop_types9.default.func,
  /**
   * Callback fired when a double click event comes from a cell element.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellDoubleClick: import_prop_types9.default.func,
  /**
   * Callback fired when the cell turns to edit mode.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
   */
  onCellEditStart: import_prop_types9.default.func,
  /**
   * Callback fired when the cell turns to view mode.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
   */
  onCellEditStop: import_prop_types9.default.func,
  /**
   * Callback fired when a keydown event comes from a cell element.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.KeyboardEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellKeyDown: import_prop_types9.default.func,
  /**
   * Callback fired when the `cellModesModel` prop changes.
   * @param {GridCellModesModel} cellModesModel Object containing which cells are in "edit" mode.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellModesModelChange: import_prop_types9.default.func,
  /**
   * Callback called when the data is copied to the clipboard.
   * @param {string} data The data copied to the clipboard.
   */
  onClipboardCopy: import_prop_types9.default.func,
  /**
   * Callback fired when a click event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderClick: import_prop_types9.default.func,
  /**
   * Callback fired when a contextmenu event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   */
  onColumnHeaderContextMenu: import_prop_types9.default.func,
  /**
   * Callback fired when a double click event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderDoubleClick: import_prop_types9.default.func,
  /**
   * Callback fired when a mouse enter event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderEnter: import_prop_types9.default.func,
  /**
   * Callback fired when a mouse leave event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderLeave: import_prop_types9.default.func,
  /**
   * Callback fired when a mouseout event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderOut: import_prop_types9.default.func,
  /**
   * Callback fired when a mouseover event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderOver: import_prop_types9.default.func,
  /**
   * Callback fired when a column is reordered.
   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnOrderChange: import_prop_types9.default.func,
  /**
   * Callback fired while a column is being resized.
   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnResize: import_prop_types9.default.func,
  /**
   * Callback fired when the column visibility model changes.
   * @param {GridColumnVisibilityModel} model The new model.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnVisibilityModelChange: import_prop_types9.default.func,
  /**
   * Callback fired when the width of a column is changed.
   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnWidthChange: import_prop_types9.default.func,
  /**
   * Callback fired when the density changes.
   * @param {GridDensity} density New density value.
   */
  onDensityChange: import_prop_types9.default.func,
  /**
   * Callback fired when the detail panel of a row is opened or closed.
   * @param {GridRowId[]} ids The ids of the rows which have the detail panel open.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onDetailPanelExpandedRowIdsChange: import_prop_types9.default.func,
  /**
   * Callback fired when rowCount is set and the next batch of virtualized rows is rendered.
   * @param {GridFetchRowsParams} params With all properties from [[GridFetchRowsParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onFetchRows: import_prop_types9.default.func,
  /**
   * Callback fired when the Filter model changes before the filters are applied.
   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onFilterModelChange: import_prop_types9.default.func,
  /**
   * Callback fired when the menu is closed.
   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onMenuClose: import_prop_types9.default.func,
  /**
   * Callback fired when the menu is opened.
   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onMenuOpen: import_prop_types9.default.func,
  /**
   * Callback fired when the pagination meta has changed.
   * @param {GridPaginationMeta} paginationMeta Updated pagination meta.
   */
  onPaginationMetaChange: import_prop_types9.default.func,
  /**
   * Callback fired when the pagination model has changed.
   * @param {GridPaginationModel} model Updated pagination model.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPaginationModelChange: import_prop_types9.default.func,
  /**
   * Callback fired when the pinned columns have changed.
   * @param {GridPinnedColumnFields} pinnedColumns The changed pinned columns.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPinnedColumnsChange: import_prop_types9.default.func,
  /**
   * Callback fired when the preferences panel is closed.
   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPreferencePanelClose: import_prop_types9.default.func,
  /**
   * Callback fired when the preferences panel is opened.
   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPreferencePanelOpen: import_prop_types9.default.func,
  /**
   * Callback called when `processRowUpdate` throws an error or rejects.
   * @param {any} error The error thrown.
   */
  onProcessRowUpdateError: import_prop_types9.default.func,
  /**
   * Callback fired when the Data Grid is resized.
   * @param {ElementSize} containerSize With all properties from [[ElementSize]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onResize: import_prop_types9.default.func,
  /**
   * Callback fired when a row is clicked.
   * Not called if the target clicked is an interactive element added by the built-in columns.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowClick: import_prop_types9.default.func,
  /**
   * Callback fired when the row count has changed.
   * @param {number} count Updated row count.
   */
  onRowCountChange: import_prop_types9.default.func,
  /**
   * Callback fired when a double click event comes from a row container element.
   * @param {GridRowParams} params With all properties from [[RowParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowDoubleClick: import_prop_types9.default.func,
  /**
   * Callback fired when the row turns to edit mode.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
   */
  onRowEditStart: import_prop_types9.default.func,
  /**
   * Callback fired when the row turns to view mode.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
   */
  onRowEditStop: import_prop_types9.default.func,
  /**
   * Callback fired when the `rowModesModel` prop changes.
   * @param {GridRowModesModel} rowModesModel Object containing which rows are in "edit" mode.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowModesModelChange: import_prop_types9.default.func,
  /**
   * Callback fired when a row is being reordered.
   * @param {GridRowOrderChangeParams} params With all properties from [[GridRowOrderChangeParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowOrderChange: import_prop_types9.default.func,
  /**
   * Callback fired when the selection state of one or multiple rows changes.
   * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowSelectionModelChange: import_prop_types9.default.func,
  /**
   * Callback fired when scrolling to the bottom of the grid viewport.
   * @param {GridRowScrollEndParams} params With all properties from [[GridRowScrollEndParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowsScrollEnd: import_prop_types9.default.func,
  /**
   * Callback fired when the sort model changes before a column is sorted.
   * @param {GridSortModel} model With all properties from [[GridSortModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onSortModelChange: import_prop_types9.default.func,
  /**
   * Callback fired when the state of the Data Grid is updated.
   * @param {GridState} state The new state.
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   * @ignore - do not document.
   */
  onStateChange: import_prop_types9.default.func,
  /**
   * Select the pageSize dynamically using the component UI.
   * @default [25, 50, 100]
   */
  pageSizeOptions: import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.shape({
    label: import_prop_types9.default.string.isRequired,
    value: import_prop_types9.default.number.isRequired
  })]).isRequired),
  /**
   * If `true`, pagination is enabled.
   * @default false
   */
  pagination: import_prop_types9.default.bool,
  /**
   * The extra information about the pagination state of the Data Grid.
   * Only applicable with `paginationMode="server"`.
   */
  paginationMeta: import_prop_types9.default.shape({
    hasNextPage: import_prop_types9.default.bool
  }),
  /**
   * Pagination can be processed on the server or client-side.
   * Set it to 'client' if you would like to handle the pagination on the client-side.
   * Set it to 'server' if you would like to handle the pagination on the server-side.
   * @default "client"
   */
  paginationMode: import_prop_types9.default.oneOf(["client", "server"]),
  /**
   * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.
   */
  paginationModel: import_prop_types9.default.shape({
    page: import_prop_types9.default.number.isRequired,
    pageSize: import_prop_types9.default.number.isRequired
  }),
  /**
   * The column fields to display pinned to left or right.
   */
  pinnedColumns: import_prop_types9.default.object,
  /**
   * Rows data to pin on top or bottom.
   */
  pinnedRows: import_prop_types9.default.shape({
    bottom: import_prop_types9.default.arrayOf(import_prop_types9.default.object),
    top: import_prop_types9.default.arrayOf(import_prop_types9.default.object)
  }),
  /**
   * Callback called before updating a row with new values in the row and cell editing.
   * @template R
   * @param {R} newRow Row object with the new values.
   * @param {R} oldRow Row object with the old values.
   * @param {{ rowId: GridRowId }} params Additional parameters.
   * @returns {Promise<R> | R} The final values to update the row.
   */
  processRowUpdate: import_prop_types9.default.func,
  /**
   * If `true`, the page is set to 0 after each sorting or filtering.
   * This prop will be removed in the next major version and resetting the page will become the default behavior.
   * @default false
   */
  resetPageOnSortFilter: import_prop_types9.default.bool,
  /**
   * The milliseconds throttle delay for resizing the grid.
   * @default 60
   */
  resizeThrottleMs: import_prop_types9.default.number,
  /**
   * Row region in pixels to render before/after the viewport
   * @default 150
   */
  rowBufferPx: import_prop_types9.default.number,
  /**
   * Set the total number of rows, if it is different from the length of the value `rows` prop.
   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.
   * Only works with `paginationMode="server"`, ignored when `paginationMode="client"`.
   */
  rowCount: import_prop_types9.default.number,
  /**
   * Sets the height in pixel of a row in the Data Grid.
   * @default 52
   */
  rowHeight: import_prop_types9.default.number,
  /**
   * Controls the modes of the rows.
   */
  rowModesModel: import_prop_types9.default.object,
  /**
   * The milliseconds delay to wait after measuring the row height before recalculating row positions.
   * Setting it to a lower value could be useful when using dynamic row height,
   * but might reduce performance when displaying a large number of rows.
   * @default 166
   * @deprecated
   */
  rowPositionsDebounceMs: import_prop_types9.default.number,
  /**
   * If `true`, the reordering of rows is enabled.
   * @default false
   */
  rowReordering: import_prop_types9.default.bool,
  /**
   * Set of rows of type [[GridRowsProp]].
   * @default []
   */
  rows: import_prop_types9.default.arrayOf(import_prop_types9.default.object),
  /**
   * If `false`, the row selection mode is disabled.
   * @default true
   */
  rowSelection: import_prop_types9.default.bool,
  /**
   * Sets the row selection model of the Data Grid.
   */
  rowSelectionModel: import_prop_types9.default.oneOfType([import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.string]).isRequired), import_prop_types9.default.number, import_prop_types9.default.string]),
  /**
   * When `rowSelectionPropagation.descendants` is set to `true`.
   * - Selecting a parent selects all its filtered descendants automatically.
   * - Deselecting a parent row deselects all its filtered descendants automatically.
   *
   * When `rowSelectionPropagation.parents` is set to `true`
   * - Selecting all the filtered descendants of a parent selects the parent automatically.
   * - Deselecting a descendant of a selected parent deselects the parent automatically.
   *
   * Works with tree data and row grouping on the client-side only.
   * @default { parents: false, descendants: false }
   */
  rowSelectionPropagation: import_prop_types9.default.shape({
    descendants: import_prop_types9.default.bool,
    parents: import_prop_types9.default.bool
  }),
  /**
   * Loading rows can be processed on the server or client-side.
   * Set it to 'client' if you would like enable infnite loading.
   * Set it to 'server' if you would like to enable lazy loading.
   * * @default "client"
   */
  rowsLoadingMode: import_prop_types9.default.oneOf(["client", "server"]),
  /**
   * Sets the type of space between rows added by `getRowSpacing`.
   * @default "margin"
   */
  rowSpacingType: import_prop_types9.default.oneOf(["border", "margin"]),
  /**
   * Override the height/width of the Data Grid inner scrollbar.
   */
  scrollbarSize: import_prop_types9.default.number,
  /**
   * Set the area in `px` at the bottom of the grid viewport where onRowsScrollEnd is called.
   * @default 80
   */
  scrollEndThreshold: import_prop_types9.default.number,
  /**
   * If `true`, vertical borders will be displayed between cells.
   * @default false
   */
  showCellVerticalBorder: import_prop_types9.default.bool,
  /**
   * If `true`, vertical borders will be displayed between column header items.
   * @default false
   */
  showColumnVerticalBorder: import_prop_types9.default.bool,
  /**
   * Overridable components props dynamically passed to the component at rendering.
   */
  slotProps: import_prop_types9.default.object,
  /**
   * Overridable components.
   */
  slots: import_prop_types9.default.object,
  /**
   * Sorting can be processed on the server or client-side.
   * Set it to 'client' if you would like to handle sorting on the client-side.
   * Set it to 'server' if you would like to handle sorting on the server-side.
   * @default "client"
   */
  sortingMode: import_prop_types9.default.oneOf(["client", "server"]),
  /**
   * The order of the sorting sequence.
   * @default ['asc', 'desc', null]
   */
  sortingOrder: import_prop_types9.default.arrayOf(import_prop_types9.default.oneOf(["asc", "desc"])),
  /**
   * Set the sort model of the Data Grid.
   */
  sortModel: import_prop_types9.default.arrayOf(import_prop_types9.default.shape({
    field: import_prop_types9.default.string.isRequired,
    sort: import_prop_types9.default.oneOf(["asc", "desc"])
  })),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types9.default.oneOfType([import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object, import_prop_types9.default.bool])), import_prop_types9.default.func, import_prop_types9.default.object]),
  /**
   * If positive, the Data Grid will throttle updates coming from `apiRef.current.updateRows` and `apiRef.current.setRows`.
   * It can be useful if you have a high update rate but do not want to do heavy work like filtering / sorting or rendering on each  individual update.
   * @default 0
   */
  throttleRowsMs: import_prop_types9.default.number,
  /**
   * If `true`, the rows will be gathered in a tree structure according to the `getTreeDataPath` prop.
   * @default false
   */
  treeData: import_prop_types9.default.bool,
  unstable_dataSource: import_prop_types9.default.shape({
    getChildrenCount: import_prop_types9.default.func,
    getGroupKey: import_prop_types9.default.func,
    getRows: import_prop_types9.default.func.isRequired,
    updateRow: import_prop_types9.default.func
  }),
  unstable_dataSourceCache: import_prop_types9.default.shape({
    clear: import_prop_types9.default.func.isRequired,
    get: import_prop_types9.default.func.isRequired,
    set: import_prop_types9.default.func.isRequired
  }),
  /**
   * Definition of the column rendered when the `unstable_listView` prop is enabled.
   */
  unstable_listColumn: import_prop_types9.default.shape({
    align: import_prop_types9.default.oneOf(["center", "left", "right"]),
    cellClassName: import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.string]),
    display: import_prop_types9.default.oneOf(["flex", "text"]),
    field: import_prop_types9.default.string.isRequired,
    renderCell: import_prop_types9.default.func
  }),
  /**
   * If `true`, displays the data in a list view.
   * Use in combination with `unstable_listColumn`.
   */
  unstable_listView: import_prop_types9.default.bool,
  unstable_onDataSourceError: import_prop_types9.default.func,
  /**
   * If `true`, the Data Grid will auto span the cells over the rows having the same value.
   * @default false
   */
  unstable_rowSpanning: import_prop_types9.default.bool,
  /**
   * If `true`, the Data Grid enables column virtualization when `getRowHeight` is set to `() => 'auto'`.
   * By default, column virtualization is disabled when dynamic row height is enabled to measure the row height correctly.
   * For datasets with a large number of columns, this can cause performance issues.
   * The downside of enabling this prop is that the row height will be estimated based the cells that are currently rendered, which can cause row height change when scrolling horizontally.
   * @default false
   */
  virtualizeColumnsWithAutoRowHeight: import_prop_types9.default.bool
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/useGridAggregation.js
var React53 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/gridAggregationSelectors.js
var gridAggregationStateSelector = (state) => state.aggregation;
var gridAggregationModelSelector = createSelector(gridAggregationStateSelector, (aggregationState) => aggregationState.model);
var gridAggregationLookupSelector = createSelector(gridAggregationStateSelector, (aggregationState) => aggregationState.lookup);

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/gridAggregationUtils.js
var GRID_AGGREGATION_ROOT_FOOTER_ROW_ID = "auto-generated-group-footer-root";
var getAggregationFooterRowIdFromGroupId = (groupId) => {
  if (groupId == null) {
    return GRID_AGGREGATION_ROOT_FOOTER_ROW_ID;
  }
  return `auto-generated-group-footer-${groupId}`;
};
var canColumnHaveAggregationFunction = ({
  colDef,
  aggregationFunctionName,
  aggregationFunction
}) => {
  if (!colDef) {
    return false;
  }
  if (!aggregationFunction) {
    return false;
  }
  if (colDef.availableAggregationFunctions != null) {
    return colDef.availableAggregationFunctions.includes(aggregationFunctionName);
  }
  if (!aggregationFunction.columnTypes) {
    return true;
  }
  return aggregationFunction.columnTypes.includes(colDef.type);
};
var getAvailableAggregationFunctions = ({
  aggregationFunctions,
  colDef
}) => Object.keys(aggregationFunctions).filter((aggregationFunctionName) => canColumnHaveAggregationFunction({
  colDef,
  aggregationFunctionName,
  aggregationFunction: aggregationFunctions[aggregationFunctionName]
}));
var mergeStateWithAggregationModel = (aggregationModel) => (state) => _extends({}, state, {
  aggregation: _extends({}, state.aggregation, {
    model: aggregationModel
  })
});
var getAggregationRules = ({
  columnsLookup,
  aggregationModel,
  aggregationFunctions
}) => {
  const aggregationRules = {};
  Object.entries(aggregationModel).forEach(([field, columnItem]) => {
    if (columnsLookup[field] && canColumnHaveAggregationFunction({
      colDef: columnsLookup[field],
      aggregationFunctionName: columnItem,
      aggregationFunction: aggregationFunctions[columnItem]
    })) {
      aggregationRules[field] = {
        aggregationFunctionName: columnItem,
        aggregationFunction: aggregationFunctions[columnItem]
      };
    }
  });
  return aggregationRules;
};
var addFooterRows = ({
  groupingParams,
  apiRef: apiRef2,
  getAggregationPosition,
  hasAggregationRule
}) => {
  let newGroupingParams = _extends({}, groupingParams, {
    tree: _extends({}, groupingParams.tree),
    treeDepths: _extends({}, groupingParams.treeDepths)
  });
  const updateChildGroupFooter = (groupNode) => {
    const shouldHaveFooter = hasAggregationRule && getAggregationPosition(groupNode) === "footer";
    if (shouldHaveFooter) {
      const footerId = getAggregationFooterRowIdFromGroupId(groupNode.id);
      if (groupNode.footerId !== footerId) {
        if (groupNode.footerId != null) {
          removeNodeFromTree({
            node: newGroupingParams.tree[groupNode.footerId],
            tree: newGroupingParams.tree,
            treeDepths: newGroupingParams.treeDepths
          });
        }
        const footerNode = {
          id: footerId,
          parent: groupNode.id,
          depth: groupNode ? groupNode.depth + 1 : 0,
          type: "footer"
        };
        insertNodeInTree(footerNode, newGroupingParams.tree, newGroupingParams.treeDepths, null);
      }
    } else if (groupNode.footerId != null) {
      removeNodeFromTree({
        node: newGroupingParams.tree[groupNode.footerId],
        tree: newGroupingParams.tree,
        treeDepths: newGroupingParams.treeDepths
      });
      newGroupingParams.tree[groupNode.id] = _extends({}, newGroupingParams.tree[groupNode.id], {
        footerId: null
      });
    }
  };
  const updateRootGroupFooter = (groupNode) => {
    const shouldHaveFooter = hasAggregationRule && getAggregationPosition(groupNode) === "footer" && groupNode.children.length > 0;
    if (shouldHaveFooter) {
      const rowId = getAggregationFooterRowIdFromGroupId(null);
      newGroupingParams = addPinnedRow({
        groupingParams: newGroupingParams,
        rowModel: {
          [GRID_ID_AUTOGENERATED]: rowId
        },
        rowId,
        position: "bottom",
        apiRef: apiRef2,
        isAutoGenerated: true
      });
    }
  };
  const updateGroupFooter = (groupNode) => {
    if (groupNode.id === GRID_ROOT_GROUP_ID) {
      updateRootGroupFooter(groupNode);
    } else {
      updateChildGroupFooter(groupNode);
    }
    groupNode.children.forEach((childId) => {
      const childNode = newGroupingParams.tree[childId];
      if (childNode.type === "group") {
        updateGroupFooter(childNode);
      }
    });
  };
  updateGroupFooter(newGroupingParams.tree[GRID_ROOT_GROUP_ID]);
  return newGroupingParams;
};
var areAggregationRulesEqual = (previousValue, newValue) => {
  const previousFields = Object.keys(previousValue ?? {});
  const newFields = Object.keys(newValue);
  if (!isDeepEqual(previousFields, newFields)) {
    return false;
  }
  return newFields.every((field) => {
    const previousRule = previousValue == null ? void 0 : previousValue[field];
    const newRule = newValue[field];
    if ((previousRule == null ? void 0 : previousRule.aggregationFunction) !== (newRule == null ? void 0 : newRule.aggregationFunction)) {
      return false;
    }
    if ((previousRule == null ? void 0 : previousRule.aggregationFunctionName) !== (newRule == null ? void 0 : newRule.aggregationFunctionName)) {
      return false;
    }
    return true;
  });
};
var getAggregationFunctionLabel = ({
  apiRef: apiRef2,
  aggregationRule
}) => {
  if (aggregationRule.aggregationFunction.label != null) {
    return aggregationRule.aggregationFunction.label;
  }
  try {
    return apiRef2.current.getLocaleText(`aggregationFunctionLabel${capitalize(aggregationRule.aggregationFunctionName)}`);
  } catch {
    return aggregationRule.aggregationFunctionName;
  }
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/createAggregationLookup.js
var getAggregationCellValue = ({
  apiRef: apiRef2,
  groupId,
  field,
  aggregationFunction,
  aggregationRowsScope
}) => {
  const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef2);
  const rowIds = apiRef2.current.getRowGroupChildren({
    groupId
  });
  const values = [];
  rowIds.forEach((rowId) => {
    if (aggregationRowsScope === "filtered" && filteredRowsLookup[rowId] === false) {
      return;
    }
    const rowNode = apiRef2.current.getRowNode(rowId);
    if (rowNode.type === "group") {
      return;
    }
    if (typeof aggregationFunction.getCellValue === "function") {
      const row = apiRef2.current.getRow(rowId);
      values.push(aggregationFunction.getCellValue({
        row
      }));
    } else {
      values.push(apiRef2.current.getCellValue(rowId, field));
    }
  });
  return aggregationFunction.apply({
    values,
    groupId,
    field
    // Added per user request in https://github.com/mui/mui-x/issues/6995#issuecomment-1327423455
  });
};
var getGroupAggregatedValue = ({
  groupId,
  apiRef: apiRef2,
  aggregationRowsScope,
  aggregatedFields,
  aggregationRules,
  position
}) => {
  const groupAggregationLookup = {};
  for (let j = 0; j < aggregatedFields.length; j += 1) {
    const aggregatedField = aggregatedFields[j];
    const columnAggregationRules = aggregationRules[aggregatedField];
    groupAggregationLookup[aggregatedField] = {
      position,
      value: getAggregationCellValue({
        apiRef: apiRef2,
        groupId,
        field: aggregatedField,
        aggregationFunction: columnAggregationRules.aggregationFunction,
        aggregationRowsScope
      })
    };
  }
  return groupAggregationLookup;
};
var createAggregationLookup = ({
  apiRef: apiRef2,
  aggregationFunctions,
  aggregationRowsScope,
  getAggregationPosition
}) => {
  const aggregationRules = getAggregationRules({
    columnsLookup: gridColumnLookupSelector(apiRef2),
    aggregationModel: gridAggregationModelSelector(apiRef2),
    aggregationFunctions
  });
  const aggregatedFields = Object.keys(aggregationRules);
  if (aggregatedFields.length === 0) {
    return {};
  }
  const aggregationLookup = {};
  const rowTree = gridRowTreeSelector(apiRef2);
  const createGroupAggregationLookup = (groupNode) => {
    for (let i2 = 0; i2 < groupNode.children.length; i2 += 1) {
      const childId = groupNode.children[i2];
      const childNode = rowTree[childId];
      if (childNode.type === "group") {
        createGroupAggregationLookup(childNode);
      }
    }
    const hasAggregableChildren = groupNode.children.length;
    if (hasAggregableChildren) {
      const position = getAggregationPosition(groupNode);
      if (position != null) {
        aggregationLookup[groupNode.id] = getGroupAggregatedValue({
          groupId: groupNode.id,
          apiRef: apiRef2,
          aggregatedFields,
          aggregationRowsScope,
          aggregationRules,
          position
        });
      }
    }
  };
  createGroupAggregationLookup(rowTree[GRID_ROOT_GROUP_ID]);
  return aggregationLookup;
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/useGridAggregation.js
var aggregationStateInitializer = (state, props, apiRef2) => {
  var _a3, _b2;
  apiRef2.current.caches.aggregation = {
    rulesOnLastColumnHydration: {},
    rulesOnLastRowHydration: {}
  };
  return _extends({}, state, {
    aggregation: {
      model: props.aggregationModel ?? ((_b2 = (_a3 = props.initialState) == null ? void 0 : _a3.aggregation) == null ? void 0 : _b2.model) ?? {}
    }
  });
};
var useGridAggregation = (apiRef2, props) => {
  apiRef2.current.registerControlState({
    stateId: "aggregation",
    propModel: props.aggregationModel,
    propOnChange: props.onAggregationModelChange,
    stateSelector: gridAggregationModelSelector,
    changeEvent: "aggregationModelChange"
  });
  const setAggregationModel = React53.useCallback((model) => {
    const currentModel = gridAggregationModelSelector(apiRef2);
    if (currentModel !== model) {
      apiRef2.current.setState(mergeStateWithAggregationModel(model));
    }
  }, [apiRef2]);
  const applyAggregation = React53.useCallback(() => {
    const aggregationLookup = createAggregationLookup({
      apiRef: apiRef2,
      getAggregationPosition: props.getAggregationPosition,
      aggregationFunctions: props.aggregationFunctions,
      aggregationRowsScope: props.aggregationRowsScope
    });
    apiRef2.current.setState((state) => _extends({}, state, {
      aggregation: _extends({}, state.aggregation, {
        lookup: aggregationLookup
      })
    }));
  }, [apiRef2, props.getAggregationPosition, props.aggregationFunctions, props.aggregationRowsScope]);
  const aggregationApi = {
    setAggregationModel
  };
  useGridApiMethod(apiRef2, aggregationApi, "public");
  const checkAggregationRulesDiff = React53.useCallback(() => {
    const {
      rulesOnLastRowHydration,
      rulesOnLastColumnHydration
    } = apiRef2.current.caches.aggregation;
    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({
      columnsLookup: gridColumnLookupSelector(apiRef2),
      aggregationModel: gridAggregationModelSelector(apiRef2),
      aggregationFunctions: props.aggregationFunctions
    });
    if (!areAggregationRulesEqual(rulesOnLastRowHydration, aggregationRules)) {
      apiRef2.current.requestPipeProcessorsApplication("hydrateRows");
      applyAggregation();
    }
    if (!areAggregationRulesEqual(rulesOnLastColumnHydration, aggregationRules)) {
      apiRef2.current.requestPipeProcessorsApplication("hydrateColumns");
    }
  }, [apiRef2, applyAggregation, props.aggregationFunctions, props.disableAggregation]);
  useGridApiEventHandler(apiRef2, "aggregationModelChange", checkAggregationRulesDiff);
  useGridApiEventHandler(apiRef2, "columnsChange", checkAggregationRulesDiff);
  useGridApiEventHandler(apiRef2, "filteredRowsSet", applyAggregation);
  React53.useEffect(() => {
    if (props.aggregationModel !== void 0) {
      apiRef2.current.setAggregationModel(props.aggregationModel);
    }
  }, [apiRef2, props.aggregationModel]);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/useGridAggregationPreProcessors.js
var React57 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/wrapColumnWithAggregation.js
var React56 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/components/GridFooterCell.js
var React54 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/utils/useGridRootProps.js
var useGridRootProps3 = useGridRootProps2;

// node_modules/@mui/x-data-grid-premium/esm/components/GridFooterCell.js
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var _excluded7 = ["formattedValue", "colDef", "cellMode", "row", "api", "id", "value", "rowNode", "field", "focusElementRef", "hasFocus", "tabIndex", "isEditable"];
var GridFooterCellRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "FooterCell",
  overridesResolver: (_, styles) => styles.footerCell
})(({
  theme
}) => ({
  fontWeight: theme.typography.fontWeightMedium,
  color: (theme.vars || theme).palette.primary.dark
}));
var useUtilityClasses12 = (ownerState) => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ["footerCell"]
  };
  return composeClasses(slots, getDataGridUtilityClass, classes);
};
function GridFooterCell(props) {
  const {
    formattedValue
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
  const rootProps = useGridRootProps3();
  const ownerState = rootProps;
  const classes = useUtilityClasses12(ownerState);
  return (0, import_jsx_runtime34.jsx)(GridFooterCellRoot, _extends({
    ownerState,
    className: classes.root
  }, other, {
    children: formattedValue
  }));
}

// node_modules/@mui/x-data-grid-premium/esm/components/GridAggregationHeader.js
var React55 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/utils/useGridApiContext.js
var useGridApiContext3 = useGridApiContext;

// node_modules/@mui/x-data-grid-premium/esm/components/GridAggregationHeader.js
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var _excluded8 = ["renderHeader"];
var GridAggregationHeaderRoot = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "AggregationColumnHeader",
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.aggregationColumnHeader, ownerState.colDef.headerAlign === "left" && styles["aggregationColumnHeader--alignLeft"], ownerState.colDef.headerAlign === "center" && styles["aggregationColumnHeader--alignCenter"], ownerState.colDef.headerAlign === "right" && styles["aggregationColumnHeader--alignRight"]];
  }
})({
  display: "flex",
  flexDirection: "column",
  [`&.${gridClasses["aggregationColumnHeader--alignRight"]}`]: {
    alignItems: "flex-end"
  },
  [`&.${gridClasses["aggregationColumnHeader--alignCenter"]}`]: {
    alignItems: "center"
  }
});
var GridAggregationFunctionLabel = styled_default2("div", {
  name: "MuiDataGrid",
  slot: "AggregationColumnHeaderLabel",
  overridesResolver: (_, styles) => styles.aggregationColumnHeaderLabel
})(({
  theme
}) => {
  return {
    fontSize: theme.typography.caption.fontSize,
    lineHeight: "normal",
    color: theme.palette.text.secondary,
    marginTop: -1
  };
});
var useUtilityClasses13 = (ownerState) => {
  const {
    classes,
    colDef
  } = ownerState;
  const slots = {
    root: ["aggregationColumnHeader", colDef.headerAlign === "left" && "aggregationColumnHeader--alignLeft", colDef.headerAlign === "center" && "aggregationColumnHeader--alignCenter", colDef.headerAlign === "right" && "aggregationColumnHeader--alignRight"],
    aggregationLabel: ["aggregationColumnHeaderLabel"]
  };
  return composeClasses(slots, getDataGridUtilityClass, classes);
};
function GridAggregationHeader(props) {
  const {
    renderHeader
  } = props, params = _objectWithoutPropertiesLoose(props, _excluded8);
  const {
    colDef,
    aggregation
  } = params;
  const apiRef2 = useGridApiContext3();
  const rootProps = useGridRootProps3();
  const ownerState = _extends({}, rootProps, {
    classes: rootProps.classes,
    colDef
  });
  const classes = useUtilityClasses13(ownerState);
  if (!aggregation) {
    return null;
  }
  const aggregationLabel = getAggregationFunctionLabel({
    apiRef: apiRef2,
    aggregationRule: aggregation.aggregationRule
  });
  return (0, import_jsx_runtime35.jsxs)(GridAggregationHeaderRoot, {
    ownerState,
    className: classes.root,
    children: [renderHeader ? renderHeader(params) : (0, import_jsx_runtime35.jsx)(GridColumnHeaderTitle, {
      label: colDef.headerName ?? colDef.field,
      description: colDef.description,
      columnWidth: colDef.computedWidth
    }), (0, import_jsx_runtime35.jsx)(GridAggregationFunctionLabel, {
      ownerState,
      className: classes.aggregationLabel,
      children: aggregationLabel
    })]
  });
}

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/wrapColumnWithAggregation.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var _excluded9 = ["aggregationWrappedProperties"];
var getAggregationValueWrappedValueGetter = ({
  value: valueGetter,
  getCellAggregationResult
}) => {
  const wrappedValueGetter = (value, row, column, apiRef2) => {
    var _a3, _b2;
    const rowId = (_b2 = (_a3 = apiRef2.current).getRowId) == null ? void 0 : _b2.call(_a3, row);
    const cellAggregationResult = rowId ? getCellAggregationResult(rowId, column.field) : null;
    if (cellAggregationResult != null) {
      return (cellAggregationResult == null ? void 0 : cellAggregationResult.value) ?? null;
    }
    if (valueGetter) {
      return valueGetter(value, row, column, apiRef2);
    }
    return row[column.field];
  };
  return wrappedValueGetter;
};
var getAggregationValueWrappedValueFormatter = ({
  value: valueFormatter,
  aggregationRule,
  getCellAggregationResult
}) => {
  if (!aggregationRule.aggregationFunction.valueFormatter) {
    return valueFormatter;
  }
  const wrappedValueFormatter = (value, row, column, apiRef2) => {
    var _a3, _b2;
    const rowId = apiRef2.current.getRowId(row);
    if (rowId != null) {
      const cellAggregationResult = getCellAggregationResult(rowId, column.field);
      if (cellAggregationResult != null) {
        return (_b2 = (_a3 = aggregationRule.aggregationFunction).valueFormatter) == null ? void 0 : _b2.call(_a3, value, row, column, apiRef2);
      }
    }
    if (valueFormatter) {
      return valueFormatter(value, row, column, apiRef2);
    }
    return value;
  };
  return wrappedValueFormatter;
};
var getAggregationValueWrappedRenderCell = ({
  value: renderCell,
  aggregationRule,
  getCellAggregationResult
}) => {
  const wrappedRenderCell = (params) => {
    const cellAggregationResult = getCellAggregationResult(params.id, params.field);
    if (cellAggregationResult != null) {
      if (!renderCell) {
        if (cellAggregationResult.position === "footer") {
          return (0, import_jsx_runtime36.jsx)(GridFooterCell, _extends({}, params));
        }
        return params.formattedValue;
      }
      const aggregationMeta = {
        hasCellUnit: aggregationRule.aggregationFunction.hasCellUnit ?? true,
        aggregationFunctionName: aggregationRule.aggregationFunctionName
      };
      return renderCell(_extends({}, params, {
        aggregation: aggregationMeta
      }));
    }
    if (!renderCell) {
      return params.formattedValue;
    }
    return renderCell(params);
  };
  return wrappedRenderCell;
};
var getWrappedFilterOperators = ({
  value: filterOperators,
  apiRef: apiRef2,
  getCellAggregationResult
}) => filterOperators.map((operator) => {
  const baseGetApplyFilterFn = operator.getApplyFilterFn;
  const getApplyFilterFn = (filterItem, colDef) => {
    const filterFn = baseGetApplyFilterFn(filterItem, colDef);
    if (!filterFn) {
      return null;
    }
    return (value, row, column, api) => {
      if (getCellAggregationResult(apiRef2.current.getRowId(row), column.field) != null) {
        return true;
      }
      return filterFn(value, row, column, api);
    };
  };
  return _extends({}, operator, {
    getApplyFilterFn
  });
});
var getWrappedRenderHeader = ({
  value: renderHeader,
  aggregationRule
}) => {
  const wrappedRenderHeader = (params) => {
    return (0, import_jsx_runtime36.jsx)(GridAggregationHeader, _extends({}, params, {
      aggregation: {
        aggregationRule
      },
      renderHeader
    }));
  };
  return wrappedRenderHeader;
};
var wrapColumnWithAggregationValue = ({
  column,
  apiRef: apiRef2,
  aggregationRule
}) => {
  const getCellAggregationResult = (id, field) => {
    var _a3, _b2;
    let cellAggregationPosition = null;
    const rowNode = apiRef2.current.getRowNode(id);
    if (rowNode.type === "group") {
      cellAggregationPosition = "inline";
    } else if (id.toString().startsWith("auto-generated-group-footer-")) {
      cellAggregationPosition = "footer";
    }
    if (cellAggregationPosition == null) {
      return null;
    }
    const groupId = cellAggregationPosition === "inline" ? id : rowNode.parent ?? "";
    const aggregationResult = (_b2 = (_a3 = gridAggregationLookupSelector(apiRef2)) == null ? void 0 : _a3[groupId]) == null ? void 0 : _b2[field];
    if (!aggregationResult || aggregationResult.position !== cellAggregationPosition) {
      return null;
    }
    return aggregationResult;
  };
  let didWrapSomeProperty = false;
  const wrappedColumn = _extends({}, column, {
    aggregationWrappedProperties: []
  });
  const wrapColumnProperty = (property, wrapper) => {
    const originalValue = column[property];
    const wrappedProperty = wrapper({
      apiRef: apiRef2,
      value: originalValue,
      colDef: column,
      aggregationRule,
      getCellAggregationResult
    });
    if (wrappedProperty !== originalValue) {
      didWrapSomeProperty = true;
      wrappedColumn[property] = wrappedProperty;
      wrappedColumn.aggregationWrappedProperties.push({
        name: property,
        originalValue,
        wrappedValue: wrappedProperty
      });
    }
  };
  wrapColumnProperty("valueGetter", getAggregationValueWrappedValueGetter);
  wrapColumnProperty("valueFormatter", getAggregationValueWrappedValueFormatter);
  wrapColumnProperty("renderCell", getAggregationValueWrappedRenderCell);
  wrapColumnProperty("renderHeader", getWrappedRenderHeader);
  wrapColumnProperty("filterOperators", getWrappedFilterOperators);
  if (!didWrapSomeProperty) {
    return column;
  }
  return wrappedColumn;
};
var unwrapColumnFromAggregation = ({
  column
}) => {
  if (!column.aggregationWrappedProperties) {
    return column;
  }
  const _ref = column, {
    aggregationWrappedProperties
  } = _ref, unwrappedColumn = _objectWithoutPropertiesLoose(_ref, _excluded9);
  aggregationWrappedProperties.forEach(({
    name,
    originalValue,
    wrappedValue
  }) => {
    if (wrappedValue !== unwrappedColumn[name]) {
      return;
    }
    unwrappedColumn[name] = originalValue;
  });
  return unwrappedColumn;
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/useGridAggregationPreProcessors.js
var useGridAggregationPreProcessors = (apiRef2, props) => {
  const rulesOnLastColumnHydration = React57.useRef({});
  const updateAggregatedColumns = React57.useCallback((columnsState) => {
    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({
      columnsLookup: columnsState.lookup,
      aggregationModel: gridAggregationModelSelector(apiRef2),
      aggregationFunctions: props.aggregationFunctions
    });
    columnsState.orderedFields.forEach((field) => {
      const shouldHaveAggregationValue = !!aggregationRules[field];
      const haveAggregationColumnValue = !!rulesOnLastColumnHydration.current[field];
      let column = columnsState.lookup[field];
      if (haveAggregationColumnValue) {
        column = unwrapColumnFromAggregation({
          column
        });
      }
      if (shouldHaveAggregationValue) {
        column = wrapColumnWithAggregationValue({
          column,
          aggregationRule: aggregationRules[field],
          apiRef: apiRef2
        });
      }
      columnsState.lookup[field] = column;
    });
    rulesOnLastColumnHydration.current = aggregationRules;
    apiRef2.current.caches.aggregation.rulesOnLastColumnHydration = aggregationRules;
    return columnsState;
  }, [apiRef2, props.aggregationFunctions, props.disableAggregation]);
  const addGroupFooterRows = React57.useCallback((value) => {
    const aggregationRules = props.disableAggregation ? {} : getAggregationRules({
      columnsLookup: gridColumnLookupSelector(apiRef2),
      aggregationModel: gridAggregationModelSelector(apiRef2),
      aggregationFunctions: props.aggregationFunctions
    });
    const hasAggregationRule = Object.keys(aggregationRules).length > 0;
    if (Object.keys(apiRef2.current.caches.aggregation.rulesOnLastRowHydration).length === 0 && !hasAggregationRule) {
      return value;
    }
    apiRef2.current.caches.aggregation.rulesOnLastRowHydration = aggregationRules;
    return addFooterRows({
      apiRef: apiRef2,
      groupingParams: value,
      getAggregationPosition: props.getAggregationPosition,
      hasAggregationRule
    });
  }, [apiRef2, props.disableAggregation, props.getAggregationPosition, props.aggregationFunctions]);
  const addColumnMenuButtons = React57.useCallback((columnMenuItems, colDef) => {
    if (props.disableAggregation || !colDef.aggregable) {
      return columnMenuItems;
    }
    const availableAggregationFunctions = getAvailableAggregationFunctions({
      aggregationFunctions: props.aggregationFunctions,
      colDef
    });
    if (availableAggregationFunctions.length === 0) {
      return columnMenuItems;
    }
    return [...columnMenuItems, "columnMenuAggregationItem"];
  }, [props.aggregationFunctions, props.disableAggregation]);
  const stateExportPreProcessing = React57.useCallback((prevState) => {
    if (props.disableAggregation) {
      return prevState;
    }
    const aggregationModelToExport = gridAggregationModelSelector(apiRef2);
    if (Object.values(aggregationModelToExport).length === 0) {
      return prevState;
    }
    return _extends({}, prevState, {
      aggregation: {
        model: aggregationModelToExport
      }
    });
  }, [apiRef2, props.disableAggregation]);
  const stateRestorePreProcessing = React57.useCallback((params, context) => {
    var _a3;
    if (props.disableAggregation) {
      return params;
    }
    const aggregationModel = (_a3 = context.stateToRestore.aggregation) == null ? void 0 : _a3.model;
    if (aggregationModel != null) {
      apiRef2.current.setState(mergeStateWithAggregationModel(aggregationModel));
    }
    return params;
  }, [apiRef2, props.disableAggregation]);
  useGridRegisterPipeProcessor(apiRef2, "hydrateColumns", updateAggregatedColumns);
  useGridRegisterPipeProcessor(apiRef2, "hydrateRows", addGroupFooterRows);
  useGridRegisterPipeProcessor(apiRef2, "columnMenu", addColumnMenuButtons);
  useGridRegisterPipeProcessor(apiRef2, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor(apiRef2, "restoreState", stateRestorePreProcessing);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/useGridRowGrouping.js
var React58 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/gridRowGroupingSelector.js
var gridRowGroupingStateSelector = (state) => state.rowGrouping;
var gridRowGroupingModelSelector = createSelector(gridRowGroupingStateSelector, (rowGrouping) => rowGrouping.model);
var gridRowGroupingSanitizedModelSelector = createSelectorMemoized(gridRowGroupingModelSelector, gridColumnLookupSelector, (model, columnsLookup) => model.filter((field) => !!columnsLookup[field]));

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/gridRowGroupingUtils.js
var RowGroupingStrategy = function(RowGroupingStrategy2) {
  RowGroupingStrategy2["Default"] = "grouping-columns";
  RowGroupingStrategy2["DataSource"] = "grouping-columns-data-source";
  return RowGroupingStrategy2;
}({});
var getRowGroupingFieldFromGroupingCriteria = (groupingCriteria) => {
  if (groupingCriteria === null) {
    return GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD;
  }
  return `__row_group_by_columns_group_${groupingCriteria}__`;
};
var shouldApplyFilterItemOnGroup = (columnField, node) => {
  if (columnField === GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD) {
    return true;
  }
  const groupingCriteriaField = getRowGroupingCriteriaFromGroupingField(columnField);
  return groupingCriteriaField === node.groupingField;
};
var filterRowTreeFromGroupingColumns = (params) => {
  const {
    apiRef: apiRef2,
    rowTree,
    isRowMatchingFilters,
    filterModel
  } = params;
  const filteredRowsLookup = {};
  const filteredChildrenCountLookup = {};
  const filteredDescendantCountLookup = {};
  const filterCache = {};
  const filterTreeNode = (node, areAncestorsExpanded, ancestorsResults) => {
    const filterResults = {
      passingFilterItems: null,
      passingQuickFilterValues: null
    };
    let isPassingFiltering = false;
    if (isRowMatchingFilters && node.type !== "footer") {
      const shouldApplyItem = node.type === "group" && node.isAutoGenerated ? (columnField) => shouldApplyFilterItemOnGroup(columnField, node) : void 0;
      const row = apiRef2.current.getRow(node.id);
      isRowMatchingFilters(row, shouldApplyItem, filterResults);
    } else {
      isPassingFiltering = true;
    }
    let filteredChildrenCount = 0;
    let filteredDescendantCount = 0;
    if (node.type === "group") {
      node.children.forEach((childId) => {
        const childNode = rowTree[childId];
        const childSubTreeSize = filterTreeNode(childNode, areAncestorsExpanded && !!node.childrenExpanded, [...ancestorsResults, filterResults]);
        filteredDescendantCount += childSubTreeSize;
        if (childSubTreeSize > 0) {
          filteredChildrenCount += 1;
        }
      });
    }
    if (isPassingFiltering === false) {
      if (node.type === "group") {
        isPassingFiltering = filteredDescendantCount > 0;
      } else {
        const allResults = [...ancestorsResults, filterResults];
        isPassingFiltering = passFilterLogic(allResults.map((result) => result.passingFilterItems), allResults.map((result) => result.passingQuickFilterValues), filterModel, params.apiRef, filterCache);
      }
    }
    filteredRowsLookup[node.id] = isPassingFiltering;
    if (!isPassingFiltering) {
      return 0;
    }
    filteredChildrenCountLookup[node.id] = filteredChildrenCount;
    filteredDescendantCountLookup[node.id] = filteredDescendantCount;
    if (node.type !== "group") {
      return filteredDescendantCount + 1;
    }
    return filteredDescendantCount;
  };
  const nodes = Object.values(rowTree);
  for (let i2 = 0; i2 < nodes.length; i2 += 1) {
    const node = nodes[i2];
    if (node.depth === 0) {
      filterTreeNode(node, true, []);
    }
  }
  return {
    filteredRowsLookup,
    filteredChildrenCountLookup,
    filteredDescendantCountLookup
  };
};
var getColDefOverrides = (groupingColDefProp, fields, strategy) => {
  if (typeof groupingColDefProp === "function") {
    return groupingColDefProp({
      groupingName: strategy ?? RowGroupingStrategy.Default,
      fields
    });
  }
  return groupingColDefProp;
};
var mergeStateWithRowGroupingModel = (rowGroupingModel) => (state) => _extends({}, state, {
  rowGrouping: _extends({}, state.rowGrouping, {
    model: rowGroupingModel
  })
});
var setStrategyAvailability = (privateApiRef, disableRowGrouping, dataSource) => {
  let isAvailable;
  if (disableRowGrouping) {
    isAvailable = () => false;
  } else {
    isAvailable = () => {
      const rowGroupingSanitizedModel = gridRowGroupingSanitizedModelSelector(privateApiRef);
      return rowGroupingSanitizedModel.length > 0;
    };
  }
  const strategy = dataSource ? RowGroupingStrategy.DataSource : RowGroupingStrategy.Default;
  privateApiRef.current.setStrategyAvailability("rowTree", strategy, isAvailable);
};
var getCellGroupingCriteria = ({
  row,
  colDef,
  groupingRule,
  apiRef: apiRef2
}) => {
  let key;
  if (groupingRule.groupingValueGetter) {
    key = groupingRule.groupingValueGetter(row[groupingRule.field], row, colDef, apiRef2);
  } else {
    key = row[groupingRule.field];
  }
  return {
    key,
    field: groupingRule.field
  };
};
var getGroupingRules = ({
  sanitizedRowGroupingModel,
  columnsLookup
}) => sanitizedRowGroupingModel.map((field) => {
  var _a3;
  return {
    field,
    groupingValueGetter: (_a3 = columnsLookup[field]) == null ? void 0 : _a3.groupingValueGetter
  };
});
var areGroupingRulesEqual = (newValue, previousValue) => {
  if (previousValue.length !== newValue.length) {
    return false;
  }
  return newValue.every((newRule, newRuleIndex) => {
    const previousRule = previousValue[newRuleIndex];
    if (previousRule.groupingValueGetter !== newRule.groupingValueGetter) {
      return false;
    }
    if (previousRule.field !== newRule.field) {
      return false;
    }
    return true;
  });
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/useGridRowGrouping.js
var rowGroupingStateInitializer = (state, props, apiRef2) => {
  var _a3, _b2;
  apiRef2.current.caches.rowGrouping = {
    rulesOnLastRowTreeCreation: []
  };
  return _extends({}, state, {
    rowGrouping: {
      model: props.rowGroupingModel ?? ((_b2 = (_a3 = props.initialState) == null ? void 0 : _a3.rowGrouping) == null ? void 0 : _b2.model) ?? []
    }
  });
};
var useGridRowGrouping = (apiRef2, props) => {
  var _a3, _b2;
  apiRef2.current.registerControlState({
    stateId: "rowGrouping",
    propModel: props.rowGroupingModel,
    propOnChange: props.onRowGroupingModelChange,
    stateSelector: gridRowGroupingModelSelector,
    changeEvent: "rowGroupingModelChange"
  });
  const setRowGroupingModel = React58.useCallback((model) => {
    const currentModel = gridRowGroupingModelSelector(apiRef2);
    if (currentModel !== model) {
      apiRef2.current.setState(mergeStateWithRowGroupingModel(model));
      setStrategyAvailability(apiRef2, props.disableRowGrouping);
      apiRef2.current.forceUpdate();
    }
  }, [apiRef2, props.disableRowGrouping]);
  const addRowGroupingCriteria = React58.useCallback((field, groupingIndex) => {
    const currentModel = gridRowGroupingModelSelector(apiRef2);
    if (currentModel.includes(field)) {
      return;
    }
    const cleanGroupingIndex = groupingIndex ?? currentModel.length;
    const updatedModel = [...currentModel.slice(0, cleanGroupingIndex), field, ...currentModel.slice(cleanGroupingIndex)];
    apiRef2.current.setRowGroupingModel(updatedModel);
  }, [apiRef2]);
  const removeRowGroupingCriteria = React58.useCallback((field) => {
    const currentModel = gridRowGroupingModelSelector(apiRef2);
    if (!currentModel.includes(field)) {
      return;
    }
    apiRef2.current.setRowGroupingModel(currentModel.filter((el) => el !== field));
  }, [apiRef2]);
  const setRowGroupingCriteriaIndex = React58.useCallback((field, targetIndex) => {
    const currentModel = gridRowGroupingModelSelector(apiRef2);
    const currentTargetIndex = currentModel.indexOf(field);
    if (currentTargetIndex === -1) {
      return;
    }
    const updatedModel = [...currentModel];
    updatedModel.splice(targetIndex, 0, updatedModel.splice(currentTargetIndex, 1)[0]);
    apiRef2.current.setRowGroupingModel(updatedModel);
  }, [apiRef2]);
  const rowGroupingApi = {
    setRowGroupingModel,
    addRowGroupingCriteria,
    removeRowGroupingCriteria,
    setRowGroupingCriteriaIndex
  };
  useGridApiMethod(apiRef2, rowGroupingApi, "public");
  const addColumnMenuButtons = React58.useCallback((columnMenuItems, colDef) => {
    if (props.disableRowGrouping) {
      return columnMenuItems;
    }
    if (isGroupingColumn(colDef.field) || colDef.groupable) {
      return [...columnMenuItems, "columnMenuGroupingItem"];
    }
    return columnMenuItems;
  }, [props.disableRowGrouping]);
  const addGetRowsParams = React58.useCallback((params) => {
    return _extends({}, params, {
      groupFields: gridRowGroupingModelSelector(apiRef2)
    });
  }, [apiRef2]);
  const stateExportPreProcessing = React58.useCallback((prevState, context) => {
    var _a4, _b3;
    const rowGroupingModelToExport = gridRowGroupingModelSelector(apiRef2);
    const shouldExportRowGroupingModel = (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      !context.exportOnlyDirtyModels || // Always export if the model is controlled
      props.rowGroupingModel != null || // Always export if the model has been initialized
      ((_b3 = (_a4 = props.initialState) == null ? void 0 : _a4.rowGrouping) == null ? void 0 : _b3.model) != null || // Export if the model is not empty
      Object.keys(rowGroupingModelToExport).length > 0
    );
    if (!shouldExportRowGroupingModel) {
      return prevState;
    }
    return _extends({}, prevState, {
      rowGrouping: {
        model: rowGroupingModelToExport
      }
    });
  }, [apiRef2, props.rowGroupingModel, (_b2 = (_a3 = props.initialState) == null ? void 0 : _a3.rowGrouping) == null ? void 0 : _b2.model]);
  const stateRestorePreProcessing = React58.useCallback((params, context) => {
    var _a4;
    if (props.disableRowGrouping) {
      return params;
    }
    const rowGroupingModel = (_a4 = context.stateToRestore.rowGrouping) == null ? void 0 : _a4.model;
    if (rowGroupingModel != null) {
      apiRef2.current.setState(mergeStateWithRowGroupingModel(rowGroupingModel));
    }
    return params;
  }, [apiRef2, props.disableRowGrouping]);
  useGridRegisterPipeProcessor(apiRef2, "columnMenu", addColumnMenuButtons);
  useGridRegisterPipeProcessor(apiRef2, "getRowsParams", addGetRowsParams);
  useGridRegisterPipeProcessor(apiRef2, "exportState", stateExportPreProcessing);
  useGridRegisterPipeProcessor(apiRef2, "restoreState", stateRestorePreProcessing);
  const handleCellKeyDown = React58.useCallback((params, event) => {
    const cellParams = apiRef2.current.getCellParams(params.id, params.field);
    if (isGroupingColumn(cellParams.field) && event.key === " " && !event.shiftKey) {
      event.stopPropagation();
      event.preventDefault();
      if (params.rowNode.type !== "group") {
        return;
      }
      const isOnGroupingCell = props.rowGroupingColumnMode === "single" || getRowGroupingFieldFromGroupingCriteria(params.rowNode.groupingField) === params.field;
      if (!isOnGroupingCell) {
        return;
      }
      if (props.unstable_dataSource && !params.rowNode.childrenExpanded) {
        apiRef2.current.unstable_dataSource.fetchRows(params.id);
        return;
      }
      apiRef2.current.setRowChildrenExpansion(params.id, !params.rowNode.childrenExpanded);
    }
  }, [apiRef2, props.rowGroupingColumnMode, props.unstable_dataSource]);
  const checkGroupingColumnsModelDiff = React58.useCallback(() => {
    const sanitizedRowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef2);
    const rulesOnLastRowTreeCreation = apiRef2.current.caches.rowGrouping.rulesOnLastRowTreeCreation || [];
    const groupingRules = getGroupingRules({
      sanitizedRowGroupingModel,
      columnsLookup: gridColumnLookupSelector(apiRef2)
    });
    if (!areGroupingRulesEqual(rulesOnLastRowTreeCreation, groupingRules)) {
      apiRef2.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;
      apiRef2.current.requestPipeProcessorsApplication("hydrateColumns");
      setStrategyAvailability(apiRef2, props.disableRowGrouping);
      if (apiRef2.current.getActiveStrategy("rowTree") === RowGroupingStrategy.Default) {
        apiRef2.current.publishEvent("activeStrategyProcessorChange", "rowTreeCreation");
      }
    }
  }, [apiRef2, props.disableRowGrouping]);
  useGridApiEventHandler(apiRef2, "cellKeyDown", handleCellKeyDown);
  useGridApiEventHandler(apiRef2, "columnsChange", checkGroupingColumnsModelDiff);
  useGridApiEventHandler(apiRef2, "rowGroupingModelChange", checkGroupingColumnsModelDiff);
  useGridApiEventHandler(apiRef2, "rowGroupingModelChange", () => apiRef2.current.unstable_dataSource.fetchRows());
  React58.useEffect(() => {
    if (props.rowGroupingModel !== void 0) {
      apiRef2.current.setRowGroupingModel(props.rowGroupingModel);
    }
  }, [apiRef2, props.rowGroupingModel]);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/useGridRowGroupingPreProcessors.js
var React64 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/createGroupingColDef.js
var React63 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/components/GridGroupingColumnFooterCell.js
var React59 = __toESM(require_react());
var import_jsx_runtime37 = __toESM(require_jsx_runtime());
function GridGroupingColumnFooterCell(props) {
  const rootProps = useGridRootProps3();
  const sx3 = {
    ml: 0
  };
  if (props.rowNode.parent == null) {
    sx3.ml = 0;
  } else if (rootProps.rowGroupingColumnMode === "multiple") {
    sx3.ml = 2;
  } else {
    sx3.ml = (theme) => `calc(var(--DataGrid-cellOffsetMultiplier) * ${theme.spacing(props.rowNode.depth)})`;
  }
  return (0, import_jsx_runtime37.jsx)(GridFooterCell, _extends({
    sx: sx3
  }, props));
}

// node_modules/@mui/x-data-grid-premium/esm/components/GridGroupingCriteriaCell.js
var React60 = __toESM(require_react());
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var useUtilityClasses14 = (ownerState) => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ["groupingCriteriaCell"],
    toggle: ["groupingCriteriaCellToggle"]
  };
  return composeClasses(slots, getDataGridUtilityClass, classes);
};
function GridGroupingCriteriaCell(props) {
  var _a3;
  const {
    id,
    field,
    rowNode,
    hideDescendantCount,
    formattedValue
  } = props;
  const rootProps = useGridRootProps3();
  const apiRef2 = useGridApiContext3();
  const ownerState = {
    classes: rootProps.classes
  };
  const classes = useUtilityClasses14(ownerState);
  const filteredDescendantCountLookup = useGridSelector(apiRef2, gridFilteredDescendantCountLookupSelector);
  const filteredDescendantCount = filteredDescendantCountLookup[rowNode.id] ?? 0;
  const Icon = rowNode.childrenExpanded ? rootProps.slots.groupingCriteriaCollapseIcon : rootProps.slots.groupingCriteriaExpandIcon;
  const handleKeyDown = (event) => {
    if (event.key === " ") {
      event.stopPropagation();
    }
    apiRef2.current.publishEvent("cellKeyDown", props, event);
  };
  const handleClick = (event) => {
    apiRef2.current.setRowChildrenExpansion(id, !rowNode.childrenExpanded);
    apiRef2.current.setCellFocus(id, field);
    event.stopPropagation();
  };
  let cellContent;
  const colDef = apiRef2.current.getColumn(rowNode.groupingField);
  if (typeof colDef.renderCell === "function") {
    cellContent = colDef.renderCell(props);
  } else if (typeof formattedValue !== "undefined") {
    cellContent = (0, import_jsx_runtime38.jsx)("span", {
      children: formattedValue
    });
  } else {
    cellContent = (0, import_jsx_runtime38.jsx)("span", {
      children: rowNode.groupingKey
    });
  }
  return (0, import_jsx_runtime38.jsxs)(Box_default, {
    className: classes.root,
    sx: [rootProps.rowGroupingColumnMode === "multiple" ? {
      ml: 0
    } : (theme) => ({
      ml: `calc(var(--DataGrid-cellOffsetMultiplier) * var(--depth) * ${theme.spacing(1)})`
    })],
    style: {
      "--depth": rowNode.depth
    },
    children: [(0, import_jsx_runtime38.jsx)("div", {
      className: classes.toggle,
      children: filteredDescendantCount > 0 && (0, import_jsx_runtime38.jsx)(rootProps.slots.baseIconButton, _extends({
        size: "small",
        onClick: handleClick,
        onKeyDown: handleKeyDown,
        tabIndex: -1,
        "aria-label": rowNode.childrenExpanded ? apiRef2.current.getLocaleText("treeDataCollapse") : apiRef2.current.getLocaleText("treeDataExpand")
      }, (_a3 = rootProps.slotProps) == null ? void 0 : _a3.baseIconButton, {
        children: (0, import_jsx_runtime38.jsx)(Icon, {
          fontSize: "inherit"
        })
      }))
    }), cellContent, !hideDescendantCount && filteredDescendantCount > 0 ? (0, import_jsx_runtime38.jsxs)("span", {
      style: {
        whiteSpace: "pre"
      },
      children: [" (", filteredDescendantCount, ")"]
    }) : null]
  });
}

// node_modules/@mui/x-data-grid-premium/esm/components/GridDataSourceGroupingCriteriaCell.js
var React61 = __toESM(require_react());
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
var useUtilityClasses15 = (ownerState) => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ["groupingCriteriaCell"],
    toggle: ["groupingCriteriaCellToggle"],
    loadingContainer: ["groupingCriteriaCellLoadingContainer"]
  };
  return composeClasses(slots, getDataGridUtilityClass, classes);
};
function GridGroupingCriteriaCellIcon(props) {
  var _a3;
  const apiRef2 = useGridPrivateApiContext();
  const rootProps = useGridRootProps3();
  const classes = useUtilityClasses15(rootProps);
  const {
    rowNode,
    id,
    field,
    descendantCount
  } = props;
  const loadingSelector = (state) => state.dataSource.loading[id] ?? false;
  const errorSelector = (state) => state.dataSource.errors[id];
  const isDataLoading = useGridSelector(apiRef2, loadingSelector);
  const error = useGridSelector(apiRef2, errorSelector);
  const handleClick = (event) => {
    if (!rowNode.childrenExpanded) {
      apiRef2.current.unstable_dataSource.fetchRows(id);
    } else {
      apiRef2.current.setRowChildrenExpansion(id, !rowNode.childrenExpanded);
    }
    apiRef2.current.setCellFocus(id, field);
    event.stopPropagation();
  };
  const Icon = rowNode.childrenExpanded ? rootProps.slots.groupingCriteriaCollapseIcon : rootProps.slots.groupingCriteriaExpandIcon;
  if (isDataLoading) {
    return (0, import_jsx_runtime39.jsx)("div", {
      className: classes.loadingContainer,
      children: (0, import_jsx_runtime39.jsx)(CircularProgress_default, {
        size: "1rem",
        color: "inherit"
      })
    });
  }
  return descendantCount > 0 ? (0, import_jsx_runtime39.jsx)(rootProps.slots.baseIconButton, _extends({
    size: "small",
    onClick: handleClick,
    tabIndex: -1,
    "aria-label": rowNode.childrenExpanded ? apiRef2.current.getLocaleText("treeDataCollapse") : apiRef2.current.getLocaleText("treeDataExpand")
  }, (_a3 = rootProps == null ? void 0 : rootProps.slotProps) == null ? void 0 : _a3.baseIconButton, {
    children: (0, import_jsx_runtime39.jsx)(rootProps.slots.baseTooltip, {
      title: (error == null ? void 0 : error.message) ?? null,
      children: (0, import_jsx_runtime39.jsx)(rootProps.slots.baseBadge, {
        variant: "dot",
        color: "error",
        invisible: !error,
        children: (0, import_jsx_runtime39.jsx)(Icon, {
          fontSize: "inherit"
        })
      })
    })
  })) : null;
}
function GridDataSourceGroupingCriteriaCell(props) {
  var _a3, _b2;
  const {
    id,
    field,
    rowNode,
    hideDescendantCount,
    formattedValue
  } = props;
  const rootProps = useGridRootProps3();
  const apiRef2 = useGridApiContext3();
  const rowSelector = (state) => state.rows.dataRowIdToModelLookup[id];
  const row = useGridSelector(apiRef2, rowSelector);
  const classes = useUtilityClasses15(rootProps);
  let descendantCount = 0;
  if (row) {
    descendantCount = Math.max(((_b2 = (_a3 = rootProps.unstable_dataSource) == null ? void 0 : _a3.getChildrenCount) == null ? void 0 : _b2.call(_a3, row)) ?? 0, 0);
  }
  let cellContent;
  const colDef = apiRef2.current.getColumn(rowNode.groupingField);
  if (typeof (colDef == null ? void 0 : colDef.renderCell) === "function") {
    cellContent = colDef.renderCell(props);
  } else if (typeof formattedValue !== "undefined") {
    cellContent = (0, import_jsx_runtime39.jsx)("span", {
      children: formattedValue
    });
  } else {
    cellContent = (0, import_jsx_runtime39.jsx)("span", {
      children: rowNode.groupingKey
    });
  }
  return (0, import_jsx_runtime39.jsxs)(Box_default, {
    className: classes.root,
    sx: {
      ml: rootProps.rowGroupingColumnMode === "multiple" ? 0 : (theme) => `calc(var(--DataGrid-cellOffsetMultiplier) * ${theme.spacing(rowNode.depth)})`
    },
    children: [(0, import_jsx_runtime39.jsx)("div", {
      className: classes.toggle,
      children: (0, import_jsx_runtime39.jsx)(GridGroupingCriteriaCellIcon, {
        id,
        field,
        rowNode,
        row,
        descendantCount
      })
    }), cellContent, !hideDescendantCount && descendantCount > 0 ? (0, import_jsx_runtime39.jsxs)("span", {
      style: {
        whiteSpace: "pre"
      },
      children: [" (", descendantCount, ")"]
    }) : null]
  });
}

// node_modules/@mui/x-data-grid-premium/esm/components/GridGroupingColumnLeafCell.js
var React62 = __toESM(require_react());
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
function GridGroupingColumnLeafCell(props) {
  const {
    rowNode
  } = props;
  const rootProps = useGridRootProps3();
  return (0, import_jsx_runtime40.jsx)(Box_default, {
    sx: [rootProps.rowGroupingColumnMode === "multiple" ? {
      ml: 1
    } : (theme) => ({
      ml: `calc(var(--DataGrid-cellOffsetMultiplier) * var(--depth) * ${theme.spacing(1)})`
    })],
    style: {
      "--depth": rowNode.depth
    },
    children: props.formattedValue ?? props.value
  });
}

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/createGroupingColDef.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
var _excluded10 = ["leafField", "mainGroupingCriteria", "hideDescendantCount"];
var _excluded22 = ["leafField", "mainGroupingCriteria", "hideDescendantCount"];
var GROUPING_COL_DEF_DEFAULT_PROPERTIES = _extends({}, GRID_STRING_COL_DEF, {
  type: "custom",
  disableReorder: true
});
var GROUPING_COL_DEF_FORCED_PROPERTIES_DEFAULT = {
  editable: false,
  groupable: false
};
var GROUPING_COL_DEF_FORCED_PROPERTIES_DATA_SOURCE = _extends({}, GROUPING_COL_DEF_FORCED_PROPERTIES_DEFAULT, {
  // TODO: Support these features on the grouping column(s)
  filterable: false,
  sortable: false
});
var groupingFieldIndexComparator = (v1, v2, cellParams1, cellParams2) => {
  const model = gridRowGroupingSanitizedModelSelector(cellParams1.api.state, cellParams1.api.instanceId);
  const groupingField1 = cellParams1.rowNode.groupingField ?? null;
  const groupingField2 = cellParams2.rowNode.groupingField ?? null;
  if (groupingField1 === groupingField2) {
    return 0;
  }
  if (groupingField1 == null) {
    return -1;
  }
  if (groupingField2 == null) {
    return 1;
  }
  if (model.indexOf(groupingField1) < model.indexOf(groupingField2)) {
    return -1;
  }
  return 1;
};
var getLeafProperties = (leafColDef) => ({
  headerName: leafColDef.headerName ?? leafColDef.field,
  sortable: leafColDef.sortable,
  filterable: leafColDef.filterable,
  valueOptions: isSingleSelectColDef(leafColDef) ? leafColDef.valueOptions : void 0,
  filterOperators: leafColDef.filterOperators,
  sortComparator: (v1, v2, cellParams1, cellParams2) => {
    if (cellParams1.rowNode.type === "leaf" && cellParams2.rowNode.type === "leaf") {
      return leafColDef.sortComparator(v1, v2, cellParams1, cellParams2);
    }
    return groupingFieldIndexComparator(v1, v2, cellParams1, cellParams2);
  }
});
var groupedByColValueFormatter = (groupedByColDef) => (value, row, _, apiRef2) => groupedByColDef.valueFormatter(value, row, groupedByColDef, apiRef2);
var getGroupingCriteriaProperties = (groupedByColDef, applyHeaderName) => {
  const properties = {
    sortable: groupedByColDef.sortable,
    filterable: groupedByColDef.filterable,
    valueFormatter: groupedByColDef.valueFormatter ? groupedByColValueFormatter(groupedByColDef) : void 0,
    valueOptions: isSingleSelectColDef(groupedByColDef) ? groupedByColDef.valueOptions : void 0,
    sortComparator: (v1, v2, cellParams1, cellParams2) => {
      if (cellParams1.rowNode.type === "group" && cellParams2.rowNode.type === "group" && cellParams1.rowNode.groupingField === cellParams2.rowNode.groupingField) {
        const colDef = cellParams1.api.getColumn(cellParams1.rowNode.groupingField);
        return colDef.sortComparator(v1, v2, cellParams1, cellParams2);
      }
      return groupingFieldIndexComparator(v1, v2, cellParams1, cellParams2);
    },
    filterOperators: groupedByColDef.filterOperators
  };
  if (applyHeaderName) {
    properties.headerName = groupedByColDef.headerName ?? groupedByColDef.field;
  }
  return properties;
};
var createGroupingColDefForOneGroupingCriteria = ({
  columnsLookup,
  groupedByColDef,
  groupingCriteria,
  colDefOverride,
  strategy = RowGroupingStrategy.Default
}) => {
  const _ref = colDefOverride ?? {}, {
    leafField,
    mainGroupingCriteria,
    hideDescendantCount
  } = _ref, colDefOverrideProperties = _objectWithoutPropertiesLoose(_ref, _excluded10);
  const leafColDef = leafField ? columnsLookup[leafField] : null;
  const CriteriaCell = strategy === RowGroupingStrategy.Default ? GridGroupingCriteriaCell : GridDataSourceGroupingCriteriaCell;
  const commonProperties = {
    width: Math.max((groupedByColDef.width ?? GRID_STRING_COL_DEF.width) + 40, (leafColDef == null ? void 0 : leafColDef.width) ?? 0),
    renderCell: (params) => {
      if (params.rowNode.type === "footer" || params.rowNode.type === "pinnedRow") {
        return (0, import_jsx_runtime41.jsx)(GridGroupingColumnFooterCell, _extends({}, params));
      }
      if (params.rowNode.type === "leaf") {
        if (leafColDef) {
          const leafParams = _extends({}, params.api.getCellParams(params.id, leafField), {
            api: params.api,
            hasFocus: params.hasFocus
          });
          if (leafColDef.renderCell) {
            return leafColDef.renderCell(leafParams);
          }
          return (0, import_jsx_runtime41.jsx)(GridGroupingColumnLeafCell, _extends({}, leafParams));
        }
        return "";
      }
      if (params.rowNode.groupingField === groupingCriteria) {
        return (0, import_jsx_runtime41.jsx)(CriteriaCell, _extends({}, params, {
          hideDescendantCount
        }));
      }
      return "";
    },
    valueGetter: (value, row, column, apiRef2) => {
      const rowId = apiRef2.current.getRowId(row);
      const rowNode = apiRef2.current.getRowNode(rowId);
      if (!rowNode || rowNode.type === "footer" || rowNode.type === "pinnedRow") {
        return void 0;
      }
      if (rowNode.type === "leaf") {
        if (leafColDef) {
          return apiRef2.current.getCellValue(rowId, leafField);
        }
        return void 0;
      }
      if (rowNode.groupingField === groupingCriteria) {
        return rowNode.groupingKey;
      }
      return void 0;
    }
  };
  let sourceProperties;
  if (mainGroupingCriteria && mainGroupingCriteria === groupingCriteria) {
    sourceProperties = getGroupingCriteriaProperties(groupedByColDef, true);
  } else if (leafColDef) {
    sourceProperties = getLeafProperties(leafColDef);
  } else {
    sourceProperties = getGroupingCriteriaProperties(groupedByColDef, true);
  }
  const forcedProperties = _extends({
    field: getRowGroupingFieldFromGroupingCriteria(groupingCriteria)
  }, GROUPING_COL_DEF_FORCED_PROPERTIES_DEFAULT);
  return _extends({}, GROUPING_COL_DEF_DEFAULT_PROPERTIES, commonProperties, sourceProperties, colDefOverrideProperties, forcedProperties);
};
var createGroupingColDefForAllGroupingCriteria = ({
  apiRef: apiRef2,
  columnsLookup,
  rowGroupingModel,
  colDefOverride,
  strategy = RowGroupingStrategy.Default
}) => {
  const _ref2 = colDefOverride ?? {}, {
    leafField,
    mainGroupingCriteria,
    hideDescendantCount
  } = _ref2, colDefOverrideProperties = _objectWithoutPropertiesLoose(_ref2, _excluded22);
  const leafColDef = leafField ? columnsLookup[leafField] : null;
  const CriteriaCell = strategy === RowGroupingStrategy.Default ? GridGroupingCriteriaCell : GridDataSourceGroupingCriteriaCell;
  const commonProperties = {
    headerName: apiRef2.current.getLocaleText("groupingColumnHeaderName"),
    width: Math.max(...rowGroupingModel.map((field) => (columnsLookup[field].width ?? GRID_STRING_COL_DEF.width) + 40), (leafColDef == null ? void 0 : leafColDef.width) ?? 0),
    renderCell: (params) => {
      if (params.rowNode.type === "footer" || params.rowNode.type === "pinnedRow") {
        return (0, import_jsx_runtime41.jsx)(GridGroupingColumnFooterCell, _extends({}, params));
      }
      if (params.rowNode.type === "leaf") {
        if (leafColDef) {
          const leafParams = _extends({}, params.api.getCellParams(params.id, leafField), {
            api: params.api,
            hasFocus: params.hasFocus
          });
          if (leafColDef.renderCell) {
            return leafColDef.renderCell(leafParams);
          }
          return (0, import_jsx_runtime41.jsx)(GridGroupingColumnLeafCell, _extends({}, leafParams));
        }
        return "";
      }
      return (0, import_jsx_runtime41.jsx)(CriteriaCell, _extends({}, params, {
        hideDescendantCount
      }));
    },
    valueGetter: (value, row) => {
      const rowId = apiRef2.current.getRowId(row);
      const rowNode = apiRef2.current.getRowNode(rowId);
      if (!rowNode || rowNode.type === "footer" || rowNode.type === "pinnedRow") {
        return void 0;
      }
      if (rowNode.type === "leaf") {
        if (leafColDef) {
          return apiRef2.current.getCellValue(rowId, leafField);
        }
        return void 0;
      }
      return rowNode.groupingKey;
    }
  };
  let sourceProperties;
  if (mainGroupingCriteria && rowGroupingModel.includes(mainGroupingCriteria)) {
    sourceProperties = getGroupingCriteriaProperties(columnsLookup[mainGroupingCriteria], true);
  } else if (leafColDef) {
    sourceProperties = getLeafProperties(leafColDef);
  } else {
    sourceProperties = getGroupingCriteriaProperties(columnsLookup[rowGroupingModel[0]], rowGroupingModel.length === 1);
  }
  const forcedProperties = _extends({
    field: GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD
  }, strategy === RowGroupingStrategy.Default ? GROUPING_COL_DEF_FORCED_PROPERTIES_DEFAULT : GROUPING_COL_DEF_FORCED_PROPERTIES_DATA_SOURCE);
  return _extends({}, GROUPING_COL_DEF_DEFAULT_PROPERTIES, commonProperties, sourceProperties, colDefOverrideProperties, forcedProperties);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/useGridRowGroupingPreProcessors.js
var useGridRowGroupingPreProcessors = (apiRef2, props) => {
  const getGroupingColDefs = React64.useCallback((columnsState) => {
    if (props.disableRowGrouping) {
      return [];
    }
    const strategy = props.unstable_dataSource ? RowGroupingStrategy.DataSource : RowGroupingStrategy.Default;
    const groupingColDefProp = props.groupingColDef;
    const rowGroupingModel = gridRowGroupingModelSelector(apiRef2).filter((field) => !!columnsState.lookup[field]);
    if (rowGroupingModel.length === 0) {
      return [];
    }
    switch (props.rowGroupingColumnMode) {
      case "single": {
        return [createGroupingColDefForAllGroupingCriteria({
          apiRef: apiRef2,
          rowGroupingModel,
          colDefOverride: getColDefOverrides(groupingColDefProp, rowGroupingModel, strategy),
          columnsLookup: columnsState.lookup,
          strategy
        })];
      }
      case "multiple": {
        return rowGroupingModel.map((groupingCriteria) => createGroupingColDefForOneGroupingCriteria({
          groupingCriteria,
          colDefOverride: getColDefOverrides(groupingColDefProp, [groupingCriteria]),
          groupedByColDef: columnsState.lookup[groupingCriteria],
          columnsLookup: columnsState.lookup,
          strategy
        }));
      }
      default: {
        return [];
      }
    }
  }, [apiRef2, props.groupingColDef, props.rowGroupingColumnMode, props.disableRowGrouping, props.unstable_dataSource]);
  const updateGroupingColumn = React64.useCallback((columnsState) => {
    const groupingColDefs = getGroupingColDefs(columnsState);
    let newColumnFields = [];
    const newColumnsLookup = {};
    const prevGroupingfields = [];
    columnsState.orderedFields.forEach((field) => {
      if (isGroupingColumn(field)) {
        prevGroupingfields.push(field);
      } else {
        newColumnFields.push(field);
        newColumnsLookup[field] = columnsState.lookup[field];
      }
    });
    groupingColDefs.forEach((groupingColDef) => {
      const matchingGroupingColDef = columnsState.lookup[groupingColDef.field];
      if (matchingGroupingColDef) {
        groupingColDef.width = matchingGroupingColDef.width;
        groupingColDef.flex = matchingGroupingColDef.flex;
      }
      newColumnsLookup[groupingColDef.field] = groupingColDef;
    });
    if (prevGroupingfields.length !== groupingColDefs.length) {
      const startIndex = newColumnFields[0] === GRID_CHECKBOX_SELECTION_FIELD ? 1 : 0;
      newColumnFields = [...newColumnFields.slice(0, startIndex), ...groupingColDefs.map((colDef) => colDef.field), ...newColumnFields.slice(startIndex)];
      columnsState.orderedFields = newColumnFields;
    }
    columnsState.lookup = newColumnsLookup;
    return columnsState;
  }, [getGroupingColDefs]);
  const createRowTreeForRowGrouping = React64.useCallback((params) => {
    const sanitizedRowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef2);
    const columnsLookup = gridColumnLookupSelector(apiRef2);
    const groupingRules = getGroupingRules({
      sanitizedRowGroupingModel,
      columnsLookup
    });
    apiRef2.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;
    const getRowTreeBuilderNode = (rowId) => {
      const row = params.dataRowIdToModelLookup[rowId];
      const parentPath = groupingRules.map((groupingRule) => getCellGroupingCriteria({
        row,
        groupingRule,
        colDef: columnsLookup[groupingRule.field],
        apiRef: apiRef2
      })).filter((cell) => cell.key != null);
      const leafGroupingCriteria = {
        key: rowId.toString(),
        field: null
      };
      return {
        path: [...parentPath, leafGroupingCriteria],
        id: rowId
      };
    };
    if (params.updates.type === "full") {
      return createRowTree({
        previousTree: params.previousTree,
        nodes: params.updates.rows.map(getRowTreeBuilderNode),
        defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,
        isGroupExpandedByDefault: props.isGroupExpandedByDefault,
        groupingName: RowGroupingStrategy.Default
      });
    }
    return updateRowTree({
      nodes: {
        inserted: params.updates.actions.insert.map(getRowTreeBuilderNode),
        modified: params.updates.actions.modify.map(getRowTreeBuilderNode),
        removed: params.updates.actions.remove
      },
      previousTree: params.previousTree,
      previousTreeDepth: params.previousTreeDepths,
      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,
      isGroupExpandedByDefault: props.isGroupExpandedByDefault,
      groupingName: RowGroupingStrategy.Default
    });
  }, [apiRef2, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);
  const filterRows = React64.useCallback((params) => {
    const rowTree = gridRowTreeSelector(apiRef2);
    return filterRowTreeFromGroupingColumns({
      rowTree,
      isRowMatchingFilters: params.isRowMatchingFilters,
      filterModel: params.filterModel,
      apiRef: apiRef2
    });
  }, [apiRef2]);
  const sortRows = React64.useCallback((params) => {
    const rowTree = gridRowTreeSelector(apiRef2);
    return sortRowTree({
      rowTree,
      sortRowList: params.sortRowList,
      disableChildrenSorting: false,
      shouldRenderGroupBelowLeaves: true
    });
  }, [apiRef2]);
  useGridRegisterPipeProcessor(apiRef2, "hydrateColumns", updateGroupingColumn);
  useGridRegisterStrategyProcessor(apiRef2, RowGroupingStrategy.Default, "rowTreeCreation", createRowTreeForRowGrouping);
  useGridRegisterStrategyProcessor(apiRef2, RowGroupingStrategy.Default, "filtering", filterRows);
  useGridRegisterStrategyProcessor(apiRef2, RowGroupingStrategy.Default, "sorting", sortRows);
  useGridRegisterStrategyProcessor(apiRef2, RowGroupingStrategy.Default, "visibleRowsLookupCreation", getVisibleRowsLookup);
  useFirstRender(() => {
    setStrategyAvailability(apiRef2, props.disableRowGrouping, props.unstable_dataSource);
  });
  const isFirstRender = React64.useRef(true);
  React64.useEffect(() => {
    if (!isFirstRender.current) {
      setStrategyAvailability(apiRef2, props.disableRowGrouping, props.unstable_dataSource);
    } else {
      isFirstRender.current = false;
    }
  }, [apiRef2, props.disableRowGrouping, props.unstable_dataSource]);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rowGrouping/useGridDataSourceRowGroupingPreProcessors.js
var React65 = __toESM(require_react());
var useGridDataSourceRowGroupingPreProcessors = (apiRef2, props) => {
  const createRowTreeForRowGrouping = React65.useCallback((params) => {
    var _a3, _b2;
    const getGroupKey = (_a3 = props.unstable_dataSource) == null ? void 0 : _a3.getGroupKey;
    if (!getGroupKey) {
      throw new Error("MUI X: No `getGroupKey` method provided with the dataSource.");
    }
    const getChildrenCount = (_b2 = props.unstable_dataSource) == null ? void 0 : _b2.getChildrenCount;
    if (!getChildrenCount) {
      throw new Error("MUI X: No `getChildrenCount` method provided with the dataSource.");
    }
    const sanitizedRowGroupingModel = gridRowGroupingSanitizedModelSelector(apiRef2);
    const columnsLookup = gridColumnLookupSelector(apiRef2);
    const groupingRules = getGroupingRules({
      sanitizedRowGroupingModel,
      columnsLookup
    });
    apiRef2.current.caches.rowGrouping.rulesOnLastRowTreeCreation = groupingRules;
    const getRowTreeBuilderNode = (rowId) => {
      const parentPath = params.updates.groupKeys ?? [];
      const row = params.dataRowIdToModelLookup[rowId];
      const groupingRule = groupingRules[parentPath.length];
      const groupingValueGetter = groupingRule == null ? void 0 : groupingRule.groupingValueGetter;
      const leafKey = (groupingValueGetter == null ? void 0 : groupingValueGetter(row[groupingRule.field], row, columnsLookup[groupingRule.field], apiRef2)) ?? getGroupKey(params.dataRowIdToModelLookup[rowId]);
      return {
        id: rowId,
        path: [...parentPath, leafKey ?? rowId.toString()].map((key, i2) => {
          var _a4;
          return {
            key,
            field: ((_a4 = groupingRules[i2]) == null ? void 0 : _a4.field) ?? null
          };
        }),
        serverChildrenCount: getChildrenCount(params.dataRowIdToModelLookup[rowId]) ?? 0
      };
    };
    if (params.updates.type === "full") {
      return createRowTree({
        previousTree: params.previousTree,
        nodes: params.updates.rows.map(getRowTreeBuilderNode),
        defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,
        isGroupExpandedByDefault: props.isGroupExpandedByDefault,
        groupingName: RowGroupingStrategy.DataSource
      });
    }
    return updateRowTree({
      nodes: {
        inserted: params.updates.actions.insert.map(getRowTreeBuilderNode),
        modified: params.updates.actions.modify.map(getRowTreeBuilderNode),
        removed: params.updates.actions.remove
      },
      previousTree: params.previousTree,
      previousGroupsToFetch: params.previousGroupsToFetch,
      previousTreeDepth: params.previousTreeDepths,
      defaultGroupingExpansionDepth: props.defaultGroupingExpansionDepth,
      isGroupExpandedByDefault: props.isGroupExpandedByDefault,
      groupingName: RowGroupingStrategy.DataSource
    });
  }, [apiRef2, props.unstable_dataSource, props.defaultGroupingExpansionDepth, props.isGroupExpandedByDefault]);
  const filterRows = React65.useCallback(() => {
    const rowTree = gridRowTreeSelector(apiRef2);
    return skipFiltering(rowTree);
  }, [apiRef2]);
  const sortRows = React65.useCallback(() => {
    const rowTree = gridRowTreeSelector(apiRef2);
    return skipSorting(rowTree);
  }, [apiRef2]);
  useGridRegisterStrategyProcessor(apiRef2, RowGroupingStrategy.DataSource, "rowTreeCreation", createRowTreeForRowGrouping);
  useGridRegisterStrategyProcessor(apiRef2, RowGroupingStrategy.DataSource, "filtering", filterRows);
  useGridRegisterStrategyProcessor(apiRef2, RowGroupingStrategy.DataSource, "sorting", sortRows);
  useGridRegisterStrategyProcessor(apiRef2, RowGroupingStrategy.DataSource, "visibleRowsLookupCreation", getVisibleRowsLookup);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/export/useGridExcelExport.js
var React72 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/export/serializer/utils.js
var getExcelJs = async () => {
  const excelJsModule = await import("./exceljs.min-PLRYFDOI.js");
  return excelJsModule.default ?? excelJsModule;
};
var addColumnGroupingHeaders = (worksheet, columns, columnGroupPaths, columnGroupDetails) => {
  const maxDepth = Math.max(...columns.map(({
    key
  }) => {
    var _a3;
    return ((_a3 = columnGroupPaths[key]) == null ? void 0 : _a3.length) ?? 0;
  }));
  if (maxDepth === 0) {
    return;
  }
  for (let rowIndex = 0; rowIndex < maxDepth; rowIndex += 1) {
    const row = columns.map(({
      key
    }) => {
      const groupingPath = columnGroupPaths[key];
      if (groupingPath.length <= rowIndex) {
        return {
          groupId: null,
          parents: groupingPath
        };
      }
      return _extends({}, columnGroupDetails[groupingPath[rowIndex]], {
        parents: groupingPath.slice(0, rowIndex)
      });
    });
    const newRow = worksheet.addRow(row.map((group) => group.groupId === null ? null : (group == null ? void 0 : group.headerName) ?? group.groupId));
    const lastRowIndex = newRow.worksheet.rowCount;
    let leftIndex = 0;
    let rightIndex = 1;
    while (rightIndex < columns.length) {
      const {
        groupId: leftGroupId,
        parents: leftParents
      } = row[leftIndex];
      const {
        groupId: rightGroupId,
        parents: rightParents
      } = row[rightIndex];
      const areInSameGroup = leftGroupId === rightGroupId && leftParents.length === rightParents.length && leftParents.every((leftParent, index) => rightParents[index] === leftParent);
      if (areInSameGroup) {
        rightIndex += 1;
      } else {
        if (rightIndex - leftIndex > 1) {
          worksheet.mergeCells(lastRowIndex, leftIndex + 1, lastRowIndex, rightIndex);
        }
        leftIndex = rightIndex;
        rightIndex += 1;
      }
    }
    if (rightIndex - leftIndex > 1) {
      worksheet.mergeCells(lastRowIndex, leftIndex + 1, lastRowIndex, rightIndex);
    }
  }
};
function addSerializedRowToWorksheet(serializedRow, worksheet) {
  const {
    row,
    dataValidation,
    outlineLevel,
    mergedCells
  } = serializedRow;
  const newRow = worksheet.addRow(row);
  Object.keys(dataValidation).forEach((field) => {
    newRow.getCell(field).dataValidation = _extends({}, dataValidation[field]);
  });
  if (outlineLevel) {
    newRow.outlineLevel = outlineLevel;
  }
  const lastRowIndex = newRow.worksheet.rowCount;
  mergedCells.forEach((mergedCell) => {
    worksheet.mergeCells(lastRowIndex, mergedCell.leftIndex, lastRowIndex, mergedCell.rightIndex);
  });
}
async function createValueOptionsSheetIfNeeded(valueOptionsData, sheetName, workbook) {
  if (Object.keys(valueOptionsData).length === 0) {
    return;
  }
  const valueOptionsWorksheet = workbook.addWorksheet(sheetName);
  valueOptionsWorksheet.columns = Object.keys(valueOptionsData).map((key) => ({
    key
  }));
  Object.entries(valueOptionsData).forEach(([field, {
    values
  }]) => {
    valueOptionsWorksheet.getColumn(field).values = values;
  });
}

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/export/serializer/excelSerializer.js
var getFormattedValueOptions = (colDef, row, valueOptions, api, callback) => {
  if (!colDef.valueOptions) {
    return;
  }
  const valueFormatter = colDef.valueFormatter;
  for (let i2 = 0; i2 < valueOptions.length; i2 += 1) {
    const option = valueOptions[i2];
    let value;
    if (valueFormatter) {
      if (typeof option === "object") {
        value = option.label;
      } else {
        value = String(colDef.valueFormatter(option, row, colDef, {
          current: api
        }));
      }
    } else {
      value = typeof option === "object" ? option.label : option;
    }
    callback(value, i2);
  }
};
var commaRegex = /,/g;
var commaReplacement = "CHAR(44)";
var serializeRowUnsafe = (id, columns, apiRef2, defaultValueOptionsFormulae, options) => {
  const serializedRow = {};
  const dataValidation = {};
  const mergedCells = [];
  const row = apiRef2.current.getRow(id);
  const rowNode = apiRef2.current.getRowNode(id);
  if (!row || !rowNode) {
    throw new Error(`No row with id #${id} found`);
  }
  const outlineLevel = rowNode.depth;
  const hasColSpan = gridHasColSpanSelector(apiRef2);
  if (hasColSpan) {
    apiRef2.current.calculateColSpan({
      rowId: id,
      minFirstColumn: 0,
      maxLastColumn: columns.length,
      columns
    });
  }
  columns.forEach((column, colIndex) => {
    const colSpanInfo = hasColSpan ? apiRef2.current.unstable_getCellColSpanInfo(id, colIndex) : void 0;
    if (colSpanInfo && colSpanInfo.spannedByColSpan) {
      return;
    }
    if (colSpanInfo && colSpanInfo.cellProps.colSpan > 1) {
      mergedCells.push({
        leftIndex: colIndex + 1,
        rightIndex: colIndex + colSpanInfo.cellProps.colSpan
      });
    }
    let cellValue;
    switch (column.type) {
      case "singleSelect": {
        const castColumn = column;
        if (typeof castColumn.valueOptions === "function") {
          const valueOptions = castColumn.valueOptions({
            id,
            row,
            field: column.field
          });
          let formulae = '"';
          getFormattedValueOptions(castColumn, row, valueOptions, apiRef2.current, (value, index) => {
            const formatted = value.toString().replace(commaRegex, commaReplacement);
            formulae += formatted;
            if (index < valueOptions.length - 1) {
              formulae += ",";
            }
          });
          formulae += '"';
          dataValidation[castColumn.field] = {
            type: "list",
            allowBlank: true,
            formulae: [formulae]
          };
        } else {
          const address = defaultValueOptionsFormulae[column.field].address;
          dataValidation[castColumn.field] = {
            type: "list",
            allowBlank: true,
            formulae: [address]
          };
        }
        const formattedValue = apiRef2.current.getRowFormattedValue(row, castColumn);
        if (true) {
          if (String(formattedValue) === "[object Object]") {
            warnOnce(["MUI X: When the value of a field is an object or a `renderCell` is provided, the Excel export might not display the value correctly.", "You can provide a `valueFormatter` with a string representation to be used."]);
          }
        }
        if (isObject(formattedValue)) {
          serializedRow[castColumn.field] = formattedValue == null ? void 0 : formattedValue.label;
        } else {
          serializedRow[castColumn.field] = formattedValue;
        }
        break;
      }
      case "boolean":
      case "number":
        cellValue = apiRef2.current.getRowValue(row, column);
        break;
      case "date":
      case "dateTime": {
        const value = apiRef2.current.getRowValue(row, column);
        if (!value) {
          break;
        }
        const utcDate = new Date(Date.UTC(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds()));
        serializedRow[column.field] = utcDate;
        break;
      }
      case "actions":
        break;
      default:
        cellValue = apiRef2.current.getRowFormattedValue(row, column);
        if (true) {
          if (String(cellValue) === "[object Object]") {
            warnOnce(["MUI X: When the value of a field is an object or a `renderCell` is provided, the Excel export might not display the value correctly.", "You can provide a `valueFormatter` with a string representation to be used."]);
          }
        }
        break;
    }
    if (typeof cellValue === "string" && options.escapeFormulas) {
      if (["=", "+", "-", "@", "	", "\r"].includes(cellValue[0])) {
        cellValue = `'${cellValue}`;
      }
    }
    if (typeof cellValue !== "undefined") {
      serializedRow[column.field] = cellValue;
    }
  });
  return {
    row: serializedRow,
    dataValidation,
    outlineLevel,
    mergedCells
  };
};
var defaultColumnsStyles = {
  [GRID_DATE_COL_DEF.type]: {
    numFmt: "dd.mm.yyyy"
  },
  [GRID_DATETIME_COL_DEF.type]: {
    numFmt: "dd.mm.yyyy hh:mm"
  }
};
var serializeColumn = (column, columnsStyles) => {
  const {
    field,
    type
  } = column;
  return {
    key: field,
    headerText: column.headerName ?? column.field,
    // Excel width must stay between 0 and 255 (https://support.microsoft.com/en-us/office/change-the-column-width-and-row-height-72f5e3cc-994d-43e8-ae58-9774a0905f46)
    // From the example of column width behavior (https://docs.microsoft.com/en-US/office/troubleshoot/excel/determine-column-widths#example-of-column-width-behavior)
    // a value of 10 corresponds to 75px. This is an approximation, because column width depends on the font-size
    width: Math.min(255, column.width ? column.width / 7.5 : 8.43),
    style: _extends({}, type && (defaultColumnsStyles == null ? void 0 : defaultColumnsStyles[type]), columnsStyles == null ? void 0 : columnsStyles[field])
  };
};
function serializeColumns(columns, styles) {
  return columns.map((column) => serializeColumn(column, styles));
}
async function getDataForValueOptionsSheet(columns, valueOptionsSheetName, api) {
  const excelJS = await getExcelJs();
  const workbook = new excelJS.Workbook();
  const worksheet = workbook.addWorksheet("Sheet1");
  const record = {};
  const worksheetColumns = [];
  for (let i2 = 0; i2 < columns.length; i2 += 1) {
    const column = columns[i2];
    const isCandidateColumn = isSingleSelectColDef(column) && Array.isArray(column.valueOptions);
    if (!isCandidateColumn) {
      continue;
    }
    worksheetColumns.push({
      key: column.field
    });
    worksheet.columns = worksheetColumns;
    const header = column.headerName ?? column.field;
    const values = [header];
    getFormattedValueOptions(column, {}, column.valueOptions, api, (value) => {
      values.push(value);
    });
    const letter = worksheet.getColumn(column.field).letter;
    const address = `${valueOptionsSheetName}!$${letter}$2:$${letter}$${values.length}`;
    record[column.field] = {
      values,
      address
    };
  }
  return record;
}
async function buildExcel(options, apiRef2) {
  const {
    columns,
    rowIds,
    includeHeaders,
    includeColumnGroupsHeaders,
    valueOptionsSheetName = "Options",
    exceljsPreProcess,
    exceljsPostProcess,
    columnsStyles = {}
  } = options;
  const excelJS = await getExcelJs();
  const workbook = new excelJS.Workbook();
  const worksheet = workbook.addWorksheet("Sheet1");
  const serializedColumns = serializeColumns(columns, columnsStyles);
  worksheet.columns = serializedColumns;
  if (exceljsPreProcess) {
    await exceljsPreProcess({
      workbook,
      worksheet
    });
  }
  if (includeColumnGroupsHeaders) {
    const columnGroupPaths = columns.reduce((acc, column) => {
      acc[column.field] = apiRef2.current.getColumnGroupPath(column.field);
      return acc;
    }, {});
    addColumnGroupingHeaders(worksheet, serializedColumns, columnGroupPaths, apiRef2.current.getAllGroupDetails());
  }
  if (includeHeaders) {
    worksheet.addRow(columns.map((column) => column.headerName ?? column.field));
  }
  const valueOptionsData = await getDataForValueOptionsSheet(columns, valueOptionsSheetName, apiRef2.current);
  createValueOptionsSheetIfNeeded(valueOptionsData, valueOptionsSheetName, workbook);
  apiRef2.current.resetColSpan();
  rowIds.forEach((id) => {
    const serializedRow = serializeRowUnsafe(id, columns, apiRef2, valueOptionsData, options);
    addSerializedRowToWorksheet(serializedRow, worksheet);
  });
  apiRef2.current.resetColSpan();
  if (exceljsPostProcess) {
    await exceljsPostProcess({
      workbook,
      worksheet
    });
  }
  return workbook;
}

// node_modules/@mui/x-data-grid-premium/esm/components/GridExcelExportMenuItem.js
var React66 = __toESM(require_react());
var import_prop_types10 = __toESM(require_prop_types());
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var _excluded11 = ["hideMenu", "options"];
function GridExcelExportMenuItem(props) {
  const apiRef2 = useGridApiContext3();
  const {
    hideMenu,
    options
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);
  return (0, import_jsx_runtime42.jsx)(MenuItem_default, _extends({
    onClick: () => {
      apiRef2.current.exportDataAsExcel(options);
      hideMenu == null ? void 0 : hideMenu();
    }
  }, other, {
    children: apiRef2.current.getLocaleText("toolbarExportExcel")
  }));
}
true ? GridExcelExportMenuItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  hideMenu: import_prop_types10.default.func,
  options: import_prop_types10.default.shape({
    allColumns: import_prop_types10.default.bool,
    columnsStyles: import_prop_types10.default.object,
    disableToolbarButton: import_prop_types10.default.bool,
    escapeFormulas: import_prop_types10.default.bool,
    exceljsPostProcess: import_prop_types10.default.func,
    exceljsPreProcess: import_prop_types10.default.func,
    fields: import_prop_types10.default.arrayOf(import_prop_types10.default.string),
    fileName: import_prop_types10.default.string,
    getRowsToExport: import_prop_types10.default.func,
    includeColumnGroupsHeaders: import_prop_types10.default.bool,
    includeHeaders: import_prop_types10.default.bool,
    valueOptionsSheetName: import_prop_types10.default.string,
    worker: import_prop_types10.default.func
  })
} : void 0;

// node_modules/@mui/x-data-grid-premium/esm/material/icons.js
var React67 = __toESM(require_react());
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var GridWorkspacesIcon = createSvgIcon((0, import_jsx_runtime43.jsx)("g", {
  children: (0, import_jsx_runtime43.jsx)("path", {
    d: "M6,13c-2.2,0-4,1.8-4,4s1.8,4,4,4s4-1.8,4-4S8.2,13,6,13z M12,3C9.8,3,8,4.8,8,7s1.8,4,4,4s4-1.8,4-4S14.2,3,12,3z M18,13 c-2.2,0-4,1.8-4,4s1.8,4,4,4s4-1.8,4-4S20.2,13,18,13z"
  })
}), "Workspaces");
var GridGroupWorkIcon = createSvgIcon((0, import_jsx_runtime43.jsx)("path", {
  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM8 17.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zM9.5 8c0-1.38 1.12-2.5 2.5-2.5s2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5S9.5 9.38 9.5 8zm6.5 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"
}), "GroupWork");
var GridFunctionsIcon = createSvgIcon((0, import_jsx_runtime43.jsx)("path", {
  d: "M18 4H6v2l6.5 6L6 18v2h12v-3h-7l5-5-5-5h7z"
}), "Functions");

// node_modules/@mui/x-data-grid-premium/esm/components/GridColumnMenuAggregationItem.js
var React68 = __toESM(require_react());
var import_prop_types11 = __toESM(require_prop_types());
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
function GridColumnMenuAggregationItem(props) {
  const {
    colDef
  } = props;
  const apiRef2 = useGridApiContext3();
  const rootProps = useGridRootProps3();
  const id = useId();
  const aggregationModel = useGridSelector(apiRef2, gridAggregationModelSelector);
  const availableAggregationFunctions = React68.useMemo(() => getAvailableAggregationFunctions({
    aggregationFunctions: rootProps.aggregationFunctions,
    colDef
  }), [colDef, rootProps.aggregationFunctions]);
  const selectedAggregationRule = React68.useMemo(() => {
    if (!colDef || !aggregationModel[colDef.field]) {
      return "";
    }
    const aggregationFunctionName = aggregationModel[colDef.field];
    if (canColumnHaveAggregationFunction({
      colDef,
      aggregationFunctionName,
      aggregationFunction: rootProps.aggregationFunctions[aggregationFunctionName]
    })) {
      return aggregationFunctionName;
    }
    return "";
  }, [rootProps.aggregationFunctions, aggregationModel, colDef]);
  const handleAggregationItemChange = (event) => {
    var _a3;
    const newAggregationItem = ((_a3 = event.target) == null ? void 0 : _a3.value) || void 0;
    const currentModel = gridAggregationModelSelector(apiRef2);
    const _colDef$field = colDef.field, otherColumnItems = _objectWithoutPropertiesLoose(currentModel, [_colDef$field].map(toPropertyKey));
    const newModel = newAggregationItem == null ? otherColumnItems : _extends({}, otherColumnItems, {
      [colDef == null ? void 0 : colDef.field]: newAggregationItem
    });
    apiRef2.current.setAggregationModel(newModel);
    apiRef2.current.hideColumnMenu();
  };
  const label = apiRef2.current.getLocaleText("aggregationMenuItemHeader");
  return (0, import_jsx_runtime44.jsxs)(MenuItem_default, {
    disableRipple: true,
    children: [(0, import_jsx_runtime44.jsx)(ListItemIcon_default, {
      children: (0, import_jsx_runtime44.jsx)(rootProps.slots.columnMenuAggregationIcon, {
        fontSize: "small"
      })
    }), (0, import_jsx_runtime44.jsx)(ListItemText_default, {
      children: (0, import_jsx_runtime44.jsxs)(FormControl_default, {
        size: "small",
        fullWidth: true,
        sx: {
          minWidth: 150
        },
        children: [(0, import_jsx_runtime44.jsx)(InputLabel_default, {
          id: `${id}-label`,
          children: label
        }), (0, import_jsx_runtime44.jsxs)(Select_default, {
          labelId: `${id}-label`,
          id: `${id}-input`,
          value: selectedAggregationRule,
          label,
          color: "primary",
          onChange: handleAggregationItemChange,
          onBlur: (event) => event.stopPropagation(),
          fullWidth: true,
          children: [(0, import_jsx_runtime44.jsx)(MenuItem_default, {
            value: "",
            children: "..."
          }), availableAggregationFunctions.map((aggFunc) => (0, import_jsx_runtime44.jsx)(MenuItem_default, {
            value: aggFunc,
            children: getAggregationFunctionLabel({
              apiRef: apiRef2,
              aggregationRule: {
                aggregationFunctionName: aggFunc,
                aggregationFunction: rootProps.aggregationFunctions[aggFunc]
              }
            })
          }, aggFunc))]
        })]
      })
    })]
  });
}
true ? GridColumnMenuAggregationItem.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: import_prop_types11.default.object.isRequired,
  onClick: import_prop_types11.default.func.isRequired
} : void 0;

// node_modules/@mui/x-data-grid-premium/esm/components/GridPremiumColumnMenu.js
var React71 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/components/GridColumnMenuRowGroupItem.js
var React69 = __toESM(require_react());
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
function GridColumnMenuRowGroupItem(props) {
  const {
    colDef,
    onClick
  } = props;
  const apiRef2 = useGridApiContext3();
  const rowGroupingModel = useGridSelector(apiRef2, gridRowGroupingSanitizedModelSelector);
  const columnsLookup = useGridSelector(apiRef2, gridColumnLookupSelector);
  const rootProps = useGridRootProps3();
  const renderUnGroupingMenuItem = (field) => {
    const ungroupColumn = (event) => {
      apiRef2.current.removeRowGroupingCriteria(field);
      onClick(event);
    };
    const groupedColumn = columnsLookup[field];
    const name = groupedColumn.headerName ?? field;
    return (0, import_jsx_runtime45.jsxs)(MenuItem_default, {
      onClick: ungroupColumn,
      disabled: !groupedColumn.groupable,
      children: [(0, import_jsx_runtime45.jsx)(ListItemIcon_default, {
        children: (0, import_jsx_runtime45.jsx)(rootProps.slots.columnMenuUngroupIcon, {
          fontSize: "small"
        })
      }), (0, import_jsx_runtime45.jsx)(ListItemText_default, {
        children: apiRef2.current.getLocaleText("unGroupColumn")(name)
      })]
    }, field);
  };
  if (!colDef || !isGroupingColumn(colDef.field)) {
    return null;
  }
  if (colDef.field === GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD) {
    return (0, import_jsx_runtime45.jsx)(React69.Fragment, {
      children: rowGroupingModel.map(renderUnGroupingMenuItem)
    });
  }
  return renderUnGroupingMenuItem(getRowGroupingCriteriaFromGroupingField(colDef.field));
}

// node_modules/@mui/x-data-grid-premium/esm/components/GridColumnMenuRowUngroupItem.js
var React70 = __toESM(require_react());
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
function GridColumnMenuRowUngroupItem(props) {
  const {
    colDef,
    onClick
  } = props;
  const apiRef2 = useGridApiContext3();
  const rowGroupingModel = useGridSelector(apiRef2, gridRowGroupingSanitizedModelSelector);
  const columnsLookup = useGridSelector(apiRef2, gridColumnLookupSelector);
  const rootProps = useGridRootProps3();
  if (!colDef.groupable) {
    return null;
  }
  const ungroupColumn = (event) => {
    apiRef2.current.removeRowGroupingCriteria(colDef.field);
    onClick(event);
  };
  const groupColumn = (event) => {
    apiRef2.current.addRowGroupingCriteria(colDef.field);
    onClick(event);
  };
  const name = columnsLookup[colDef.field].headerName ?? colDef.field;
  if (rowGroupingModel.includes(colDef.field)) {
    return (0, import_jsx_runtime46.jsxs)(MenuItem_default, {
      onClick: ungroupColumn,
      children: [(0, import_jsx_runtime46.jsx)(ListItemIcon_default, {
        children: (0, import_jsx_runtime46.jsx)(rootProps.slots.columnMenuUngroupIcon, {
          fontSize: "small"
        })
      }), (0, import_jsx_runtime46.jsx)(ListItemText_default, {
        children: apiRef2.current.getLocaleText("unGroupColumn")(name)
      })]
    });
  }
  return (0, import_jsx_runtime46.jsxs)(MenuItem_default, {
    onClick: groupColumn,
    children: [(0, import_jsx_runtime46.jsx)(ListItemIcon_default, {
      children: (0, import_jsx_runtime46.jsx)(rootProps.slots.columnMenuGroupIcon, {
        fontSize: "small"
      })
    }), (0, import_jsx_runtime46.jsx)(ListItemText_default, {
      children: apiRef2.current.getLocaleText("groupColumn")(name)
    })]
  });
}

// node_modules/@mui/x-data-grid-premium/esm/components/GridPremiumColumnMenu.js
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
function GridColumnMenuGroupingItem(props) {
  const {
    colDef
  } = props;
  if (isGroupingColumn(colDef.field)) {
    return (0, import_jsx_runtime47.jsx)(GridColumnMenuRowGroupItem, _extends({}, props));
  }
  return (0, import_jsx_runtime47.jsx)(GridColumnMenuRowUngroupItem, _extends({}, props));
}
var GRID_COLUMN_MENU_SLOTS_PREMIUM = _extends({}, GRID_COLUMN_MENU_SLOTS_PRO, {
  columnMenuAggregationItem: GridColumnMenuAggregationItem,
  columnMenuGroupingItem: GridColumnMenuGroupingItem
});
var GRID_COLUMN_MENU_SLOT_PROPS_PREMIUM = _extends({}, GRID_COLUMN_MENU_SLOT_PROPS_PRO, {
  columnMenuAggregationItem: {
    displayOrder: 23
  },
  columnMenuGroupingItem: {
    displayOrder: 27
  }
});
var GridPremiumColumnMenu = forwardRef(function GridPremiumColumnMenuSimple(props, ref) {
  return (0, import_jsx_runtime47.jsx)(GridGenericColumnMenu, _extends({}, props, {
    defaultSlots: GRID_COLUMN_MENU_SLOTS_PREMIUM,
    defaultSlotProps: GRID_COLUMN_MENU_SLOT_PROPS_PREMIUM,
    ref
  }));
});

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/export/useGridExcelExport.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime());
var _excluded12 = ["worker", "exceljsPostProcess", "exceljsPreProcess", "columnsStyles", "includeHeaders", "getRowsToExport", "valueOptionsSheetName"];
var useGridExcelExport = (apiRef2, props) => {
  const logger = useGridLogger(apiRef2, "useGridExcelExport");
  const getDataAsExcel = React72.useCallback((options = {}) => {
    logger.debug(`Get data as excel`);
    const getRowsToExport = options.getRowsToExport ?? defaultGetRowsToExport;
    const exportedRowIds = getRowsToExport({
      apiRef: apiRef2
    });
    const exportedColumns = getColumnsToExport({
      apiRef: apiRef2,
      options
    });
    return buildExcel({
      columns: exportedColumns,
      rowIds: exportedRowIds,
      includeHeaders: options.includeHeaders ?? true,
      includeColumnGroupsHeaders: options.includeColumnGroupsHeaders ?? true,
      valueOptionsSheetName: (options == null ? void 0 : options.valueOptionsSheetName) || "Options",
      columnsStyles: options == null ? void 0 : options.columnsStyles,
      exceljsPreProcess: options == null ? void 0 : options.exceljsPreProcess,
      exceljsPostProcess: options == null ? void 0 : options.exceljsPostProcess,
      escapeFormulas: options.escapeFormulas ?? true
    }, apiRef2);
  }, [logger, apiRef2]);
  const exportDataAsExcel = React72.useCallback(async (options = {}) => {
    const {
      worker: workerFn,
      exceljsPostProcess,
      exceljsPreProcess,
      getRowsToExport = defaultGetRowsToExport,
      valueOptionsSheetName = "Options"
    } = options, cloneableOptions = _objectWithoutPropertiesLoose(options, _excluded12);
    const sendExcelToUser = (buffer) => {
      const blob = new Blob([buffer], {
        type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
      });
      exportAs(blob, "xlsx", options == null ? void 0 : options.fileName);
    };
    if (!workerFn) {
      apiRef2.current.publishEvent("excelExportStateChange", "pending");
      const workbook = await getDataAsExcel(options);
      if (workbook === null) {
        return;
      }
      const content = await workbook.xlsx.writeBuffer();
      apiRef2.current.publishEvent("excelExportStateChange", "finished");
      sendExcelToUser(content);
      return;
    }
    if (true) {
      if (exceljsPostProcess) {
        console.warn([`MUI X: The exceljsPostProcess option is not supported when a web worker is used.`, "As alternative, pass the callback to the same option in setupExcelExportWebWorker."].join("\n"));
      }
      if (exceljsPreProcess) {
        console.warn([`MUI X: The exceljsPreProcess option is not supported when a web worker is used.`, "As alternative, pass the callback to the same option in setupExcelExportWebWorker."].join("\n"));
      }
    }
    const worker = workerFn();
    apiRef2.current.publishEvent("excelExportStateChange", "pending");
    worker.onmessage = async (event) => {
      sendExcelToUser(event.data);
      apiRef2.current.publishEvent("excelExportStateChange", "finished");
      worker.terminate();
    };
    const exportedRowIds = getRowsToExport({
      apiRef: apiRef2
    });
    const exportedColumns = getColumnsToExport({
      apiRef: apiRef2,
      options
    });
    const valueOptionsData = await getDataForValueOptionsSheet(exportedColumns, valueOptionsSheetName, apiRef2.current);
    const serializedColumns = serializeColumns(exportedColumns, options.columnsStyles || {});
    apiRef2.current.resetColSpan();
    const serializedRows = [];
    for (let i2 = 0; i2 < exportedRowIds.length; i2 += 1) {
      const id = exportedRowIds[i2];
      const serializedRow = serializeRowUnsafe(id, exportedColumns, apiRef2, valueOptionsData, {
        escapeFormulas: options.escapeFormulas ?? true
      });
      serializedRows.push(serializedRow);
    }
    apiRef2.current.resetColSpan();
    const columnGroupPaths = exportedColumns.reduce((acc, column) => {
      acc[column.field] = apiRef2.current.getColumnGroupPath(column.field);
      return acc;
    }, {});
    const message = {
      // workers share the pub-sub channel namespace. Use this property to filter out messages.
      namespace: "mui-x-data-grid-export",
      serializedColumns,
      serializedRows,
      valueOptionsData,
      columnGroupPaths,
      columnGroupDetails: apiRef2.current.getAllGroupDetails(),
      options: cloneableOptions,
      valueOptionsSheetName
    };
    worker.postMessage(message);
  }, [apiRef2, getDataAsExcel]);
  const excelExportApi = {
    getDataAsExcel,
    exportDataAsExcel
  };
  useGridApiMethod(apiRef2, excelExportApi, "public");
  const addExportMenuButtons = React72.useCallback((initialValue, options) => {
    var _a3;
    if ((_a3 = options.excelOptions) == null ? void 0 : _a3.disableToolbarButton) {
      return initialValue;
    }
    return [...initialValue, {
      component: (0, import_jsx_runtime48.jsx)(GridExcelExportMenuItem, {
        options: options.excelOptions
      }),
      componentName: "excelExport"
    }];
  }, []);
  useGridRegisterPipeProcessor(apiRef2, "exportMenu", addExportMenuButtons);
  useGridApiOptionHandler(apiRef2, "excelExportStateChange", props.onExcelExportStateChange);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/cellSelection/useGridCellSelection.js
var React73 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/cellSelection/gridCellSelectionSelector.js
var gridCellSelectionStateSelector = (state) => state.cellSelection;

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/cellSelection/useGridCellSelection.js
var cellSelectionStateInitializer = (state, props) => {
  var _a3;
  return _extends({}, state, {
    cellSelection: _extends({}, props.cellSelectionModel ?? ((_a3 = props.initialState) == null ? void 0 : _a3.cellSelection))
  });
};
function isKeyboardEvent(event) {
  return !!event.key;
}
var AUTO_SCROLL_SENSITIVITY = 50;
var AUTO_SCROLL_SPEED = 20;
var useGridCellSelection = (apiRef2, props) => {
  const hasRootReference = apiRef2.current.rootElementRef.current !== null;
  const cellWithVirtualFocus = React73.useRef(null);
  const lastMouseDownCell = React73.useRef(null);
  const mousePosition = React73.useRef(null);
  const autoScrollRAF = React73.useRef(null);
  const totalHeaderHeight = getTotalHeaderHeight(apiRef2, props);
  const ignoreValueFormatterProp = props.ignoreValueFormatterDuringExport;
  const ignoreValueFormatter = (typeof ignoreValueFormatterProp === "object" ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.clipboardExport : ignoreValueFormatterProp) || false;
  const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;
  apiRef2.current.registerControlState({
    stateId: "cellSelection",
    propModel: props.cellSelectionModel,
    propOnChange: props.onCellSelectionModelChange,
    stateSelector: gridCellSelectionStateSelector,
    changeEvent: "cellSelectionChange"
  });
  const runIfCellSelectionIsEnabled = (callback) => (...args) => {
    if (props.cellSelection) {
      callback(...args);
    }
  };
  const isCellSelected = React73.useCallback((id, field) => {
    if (!props.cellSelection) {
      return false;
    }
    const cellSelectionModel = gridCellSelectionStateSelector(apiRef2.current.state);
    return cellSelectionModel[id] ? !!cellSelectionModel[id][field] : false;
  }, [apiRef2, props.cellSelection]);
  const getCellSelectionModel = React73.useCallback(() => {
    return gridCellSelectionStateSelector(apiRef2.current.state);
  }, [apiRef2]);
  const setCellSelectionModel = React73.useCallback((newModel) => {
    if (!props.cellSelection) {
      return;
    }
    apiRef2.current.setState((prevState) => _extends({}, prevState, {
      cellSelection: newModel
    }));
    apiRef2.current.forceUpdate();
  }, [apiRef2, props.cellSelection]);
  const selectCellRange = React73.useCallback((start, end, keepOtherSelected = false) => {
    const startRowIndex = apiRef2.current.getRowIndexRelativeToVisibleRows(start.id);
    const startColumnIndex = apiRef2.current.getColumnIndex(start.field);
    const endRowIndex = apiRef2.current.getRowIndexRelativeToVisibleRows(end.id);
    const endColumnIndex = apiRef2.current.getColumnIndex(end.field);
    let finalStartRowIndex = startRowIndex;
    let finalStartColumnIndex = startColumnIndex;
    let finalEndRowIndex = endRowIndex;
    let finalEndColumnIndex = endColumnIndex;
    if (finalStartRowIndex > finalEndRowIndex) {
      finalStartRowIndex = endRowIndex;
      finalEndRowIndex = startRowIndex;
    }
    if (finalStartColumnIndex > finalEndColumnIndex) {
      finalStartColumnIndex = endColumnIndex;
      finalEndColumnIndex = startColumnIndex;
    }
    const visibleColumns = apiRef2.current.getVisibleColumns();
    const visibleRows = getVisibleRows(apiRef2);
    const rowsInRange = visibleRows.rows.slice(finalStartRowIndex, finalEndRowIndex + 1);
    const columnsInRange = visibleColumns.slice(finalStartColumnIndex, finalEndColumnIndex + 1);
    const newModel = keepOtherSelected ? _extends({}, apiRef2.current.getCellSelectionModel()) : {};
    rowsInRange.forEach((row) => {
      if (!newModel[row.id]) {
        newModel[row.id] = {};
      }
      columnsInRange.forEach((column) => {
        newModel[row.id][column.field] = true;
      }, {});
    });
    apiRef2.current.setCellSelectionModel(newModel);
  }, [apiRef2]);
  const getSelectedCellsAsArray = React73.useCallback(() => {
    const selectionModel = apiRef2.current.getCellSelectionModel();
    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef2);
    const currentVisibleRows = getVisibleRows(apiRef2, props);
    const sortedEntries = currentVisibleRows.rows.reduce((result, row) => {
      if (row.id in selectionModel) {
        result.push([row.id, selectionModel[row.id]]);
      }
      return result;
    }, []);
    return sortedEntries.reduce((selectedCells, [id, fields]) => {
      selectedCells.push(...Object.entries(fields).reduce((selectedFields, [field, isSelected]) => {
        if (isSelected) {
          selectedFields.push({
            id: idToIdLookup[id],
            field
          });
        }
        return selectedFields;
      }, []));
      return selectedCells;
    }, []);
  }, [apiRef2, props]);
  const cellSelectionApi = {
    isCellSelected,
    getCellSelectionModel,
    setCellSelectionModel,
    selectCellRange,
    getSelectedCellsAsArray
  };
  useGridApiMethod(apiRef2, cellSelectionApi, "public");
  const hasClickedValidCellForRangeSelection = React73.useCallback((params) => {
    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {
      return false;
    }
    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
      return false;
    }
    const column = apiRef2.current.getColumn(params.field);
    if (column.type === GRID_ACTIONS_COLUMN_TYPE) {
      return false;
    }
    return params.rowNode.type !== "pinnedRow";
  }, [apiRef2]);
  const handleMouseUp = useEventCallback_default2(() => {
    var _a3, _b2;
    lastMouseDownCell.current = null;
    (_b2 = (_a3 = apiRef2.current.rootElementRef) == null ? void 0 : _a3.current) == null ? void 0 : _b2.classList.remove(gridClasses["root--disableUserSelection"]);
    stopAutoScroll();
  });
  const handleCellMouseDown = React73.useCallback((params, event) => {
    var _a3, _b2, _c;
    const isMacOs = window.navigator.platform.toUpperCase().indexOf("MAC") >= 0;
    if (event.button !== 0 || event.ctrlKey && isMacOs) {
      return;
    }
    if (params.field === GRID_REORDER_COL_DEF.field) {
      return;
    }
    const focusedCell = gridFocusCellSelector(apiRef2);
    if (hasClickedValidCellForRangeSelection(params) && event.shiftKey && focusedCell) {
      event.preventDefault();
    }
    lastMouseDownCell.current = {
      id: params.id,
      field: params.field
    };
    (_b2 = (_a3 = apiRef2.current.rootElementRef) == null ? void 0 : _a3.current) == null ? void 0 : _b2.classList.add(gridClasses["root--disableUserSelection"]);
    const document2 = ownerDocument_default((_c = apiRef2.current.rootElementRef) == null ? void 0 : _c.current);
    document2.addEventListener("mouseup", handleMouseUp, {
      once: true
    });
  }, [apiRef2, handleMouseUp, hasClickedValidCellForRangeSelection]);
  const stopAutoScroll = React73.useCallback(() => {
    if (autoScrollRAF.current) {
      cancelAnimationFrame(autoScrollRAF.current);
      autoScrollRAF.current = null;
    }
  }, []);
  const handleCellFocusIn = React73.useCallback((params) => {
    cellWithVirtualFocus.current = {
      id: params.id,
      field: params.field
    };
  }, []);
  const startAutoScroll = React73.useCallback(() => {
    var _a3;
    if (autoScrollRAF.current) {
      return;
    }
    if (!((_a3 = apiRef2.current.virtualScrollerRef) == null ? void 0 : _a3.current)) {
      return;
    }
    function autoScroll() {
      var _a4;
      if (!mousePosition.current || !((_a4 = apiRef2.current.virtualScrollerRef) == null ? void 0 : _a4.current)) {
        return;
      }
      const dimensions = gridDimensionsSelector(apiRef2.current.state);
      const {
        x: mouseX,
        y: mouseY
      } = mousePosition.current;
      const {
        width,
        height: viewportOuterHeight
      } = dimensions.viewportOuterSize;
      const height = viewportOuterHeight - totalHeaderHeight;
      let deltaX = 0;
      let deltaY = 0;
      let factor = 0;
      if (mouseY <= AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollY) {
        factor = (AUTO_SCROLL_SENSITIVITY - mouseY) / -AUTO_SCROLL_SENSITIVITY;
        deltaY = AUTO_SCROLL_SPEED;
      } else if (mouseY >= height - AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollY) {
        factor = (mouseY - (height - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;
        deltaY = AUTO_SCROLL_SPEED;
      } else if (mouseX <= AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollX) {
        factor = (AUTO_SCROLL_SENSITIVITY - mouseX) / -AUTO_SCROLL_SENSITIVITY;
        deltaX = AUTO_SCROLL_SPEED;
      } else if (mouseX >= width - AUTO_SCROLL_SENSITIVITY && dimensions.hasScrollX) {
        factor = (mouseX - (width - AUTO_SCROLL_SENSITIVITY)) / AUTO_SCROLL_SENSITIVITY;
        deltaX = AUTO_SCROLL_SPEED;
      }
      if (deltaX !== 0 || deltaY !== 0) {
        const {
          scrollLeft,
          scrollTop
        } = apiRef2.current.virtualScrollerRef.current;
        apiRef2.current.scroll({
          top: scrollTop + deltaY * factor,
          left: scrollLeft + deltaX * factor
        });
      }
      autoScrollRAF.current = requestAnimationFrame(autoScroll);
    }
    autoScroll();
  }, [apiRef2, totalHeaderHeight]);
  const handleCellMouseOver = React73.useCallback((params, event) => {
    var _a3, _b2;
    if (!lastMouseDownCell.current) {
      return;
    }
    const {
      id,
      field
    } = params;
    apiRef2.current.selectCellRange(lastMouseDownCell.current, {
      id,
      field
    }, event.ctrlKey || event.metaKey);
    const virtualScrollerRect = (_b2 = (_a3 = apiRef2.current.virtualScrollerRef) == null ? void 0 : _a3.current) == null ? void 0 : _b2.getBoundingClientRect();
    if (!virtualScrollerRect) {
      return;
    }
    const dimensions = gridDimensionsSelector(apiRef2.current.state);
    const {
      x,
      y
    } = virtualScrollerRect;
    const {
      width,
      height: viewportOuterHeight
    } = dimensions.viewportOuterSize;
    const height = viewportOuterHeight - totalHeaderHeight;
    const mouseX = event.clientX - x;
    const mouseY = event.clientY - y - totalHeaderHeight;
    mousePosition.current = {
      x: mouseX,
      y: mouseY
    };
    const hasEnteredVerticalSensitivityArea = mouseY <= AUTO_SCROLL_SENSITIVITY || mouseY >= height - AUTO_SCROLL_SENSITIVITY;
    const hasEnteredHorizontalSensitivityArea = mouseX <= AUTO_SCROLL_SENSITIVITY || mouseX >= width - AUTO_SCROLL_SENSITIVITY;
    const hasEnteredSensitivityArea = hasEnteredVerticalSensitivityArea || hasEnteredHorizontalSensitivityArea;
    if (hasEnteredSensitivityArea) {
      startAutoScroll();
    } else {
      stopAutoScroll();
    }
  }, [apiRef2, startAutoScroll, stopAutoScroll, totalHeaderHeight]);
  const handleCellClick = useEventCallback_default2((params, event) => {
    const {
      id,
      field
    } = params;
    if (!hasClickedValidCellForRangeSelection(params)) {
      return;
    }
    const focusedCell = gridFocusCellSelector(apiRef2);
    if (event.shiftKey && focusedCell) {
      apiRef2.current.selectCellRange(focusedCell, {
        id,
        field
      });
      cellWithVirtualFocus.current = {
        id,
        field
      };
      return;
    }
    if (event.ctrlKey || event.metaKey) {
      const prevModel = apiRef2.current.getCellSelectionModel();
      apiRef2.current.setCellSelectionModel(_extends({}, prevModel, {
        [id]: _extends({}, prevModel[id], {
          [field]: !apiRef2.current.isCellSelected(id, field)
        })
      }));
    } else {
      apiRef2.current.setCellSelectionModel({
        [id]: {
          [field]: true
        }
      });
    }
  });
  const handleCellKeyDown = useEventCallback_default2((params, event) => {
    if (!isNavigationKey(event.key) || !cellWithVirtualFocus.current) {
      return;
    }
    if (!event.shiftKey) {
      apiRef2.current.setCellSelectionModel({});
      return;
    }
    const {
      current: otherCell
    } = cellWithVirtualFocus;
    let endRowIndex = apiRef2.current.getRowIndexRelativeToVisibleRows(otherCell.id);
    let endColumnIndex = apiRef2.current.getColumnIndex(otherCell.field);
    if (event.key === "ArrowDown") {
      endRowIndex += 1;
    } else if (event.key === "ArrowUp") {
      endRowIndex -= 1;
    } else if (event.key === "ArrowRight") {
      endColumnIndex += 1;
    } else if (event.key === "ArrowLeft") {
      endColumnIndex -= 1;
    }
    const visibleRows = getVisibleRows(apiRef2);
    if (endRowIndex < 0 || endRowIndex >= visibleRows.rows.length) {
      return;
    }
    const visibleColumns = apiRef2.current.getVisibleColumns();
    if (endColumnIndex < 0 || endColumnIndex >= visibleColumns.length) {
      return;
    }
    cellWithVirtualFocus.current = {
      id: visibleRows.rows[endRowIndex].id,
      field: visibleColumns[endColumnIndex].field
    };
    apiRef2.current.scrollToIndexes({
      rowIndex: endRowIndex,
      colIndex: endColumnIndex
    });
    const {
      id,
      field
    } = params;
    apiRef2.current.selectCellRange({
      id,
      field
    }, cellWithVirtualFocus.current);
  });
  useGridApiEventHandler(apiRef2, "cellClick", runIfCellSelectionIsEnabled(handleCellClick));
  useGridApiEventHandler(apiRef2, "cellFocusIn", runIfCellSelectionIsEnabled(handleCellFocusIn));
  useGridApiEventHandler(apiRef2, "cellKeyDown", runIfCellSelectionIsEnabled(handleCellKeyDown));
  useGridApiEventHandler(apiRef2, "cellMouseDown", runIfCellSelectionIsEnabled(handleCellMouseDown));
  useGridApiEventHandler(apiRef2, "cellMouseOver", runIfCellSelectionIsEnabled(handleCellMouseOver));
  React73.useEffect(() => {
    if (props.cellSelectionModel) {
      apiRef2.current.setCellSelectionModel(props.cellSelectionModel);
    }
  }, [apiRef2, props.cellSelectionModel]);
  React73.useEffect(() => {
    var _a3;
    const rootRef = (_a3 = apiRef2.current.rootElementRef) == null ? void 0 : _a3.current;
    return () => {
      stopAutoScroll();
      const document2 = ownerDocument_default(rootRef);
      document2.removeEventListener("mouseup", handleMouseUp);
    };
  }, [apiRef2, hasRootReference, handleMouseUp, stopAutoScroll]);
  const checkIfCellIsSelected = React73.useCallback((isSelected, {
    id,
    field
  }) => {
    return apiRef2.current.isCellSelected(id, field);
  }, [apiRef2]);
  const addClassesToCells = React73.useCallback((classes, {
    id,
    field
  }) => {
    const visibleRows = getVisibleRows(apiRef2);
    if (!visibleRows.range || !apiRef2.current.isCellSelected(id, field)) {
      return classes;
    }
    const newClasses = [...classes];
    const rowIndex = apiRef2.current.getRowIndexRelativeToVisibleRows(id);
    const columnIndex = apiRef2.current.getColumnIndex(field);
    const visibleColumns = apiRef2.current.getVisibleColumns();
    if (rowIndex > 0) {
      const {
        id: previousRowId
      } = visibleRows.rows[rowIndex - 1];
      if (!apiRef2.current.isCellSelected(previousRowId, field)) {
        newClasses.push(gridClasses["cell--rangeTop"]);
      }
    } else {
      newClasses.push(gridClasses["cell--rangeTop"]);
    }
    if (rowIndex + visibleRows.range.firstRowIndex < visibleRows.range.lastRowIndex) {
      const {
        id: nextRowId
      } = visibleRows.rows[rowIndex + 1];
      if (!apiRef2.current.isCellSelected(nextRowId, field)) {
        newClasses.push(gridClasses["cell--rangeBottom"]);
      }
    } else {
      newClasses.push(gridClasses["cell--rangeBottom"]);
    }
    if (columnIndex > 0) {
      const {
        field: previousColumnField
      } = visibleColumns[columnIndex - 1];
      if (!apiRef2.current.isCellSelected(id, previousColumnField)) {
        newClasses.push(gridClasses["cell--rangeLeft"]);
      }
    } else {
      newClasses.push(gridClasses["cell--rangeLeft"]);
    }
    if (columnIndex < visibleColumns.length - 1) {
      const {
        field: nextColumnField
      } = visibleColumns[columnIndex + 1];
      if (!apiRef2.current.isCellSelected(id, nextColumnField)) {
        newClasses.push(gridClasses["cell--rangeRight"]);
      }
    } else {
      newClasses.push(gridClasses["cell--rangeRight"]);
    }
    return newClasses;
  }, [apiRef2]);
  const canUpdateFocus = React73.useCallback((initialValue, {
    event,
    cell
  }) => {
    if (!cell || !props.cellSelection || !event.shiftKey) {
      return initialValue;
    }
    if (isKeyboardEvent(event)) {
      return isNavigationKey(event.key) ? false : initialValue;
    }
    const focusedCell = gridFocusCellSelector(apiRef2);
    if (hasClickedValidCellForRangeSelection(cell) && focusedCell) {
      return false;
    }
    return initialValue;
  }, [apiRef2, props.cellSelection, hasClickedValidCellForRangeSelection]);
  const handleClipboardCopy = React73.useCallback((value) => {
    if (apiRef2.current.getSelectedCellsAsArray().length <= 1) {
      return value;
    }
    const sortedRowIds = gridSortedRowIdsSelector(apiRef2);
    const cellSelectionModel = apiRef2.current.getCellSelectionModel();
    const unsortedSelectedRowIds = Object.keys(cellSelectionModel);
    const sortedSelectedRowIds = sortedRowIds.filter((id) => unsortedSelectedRowIds.includes(`${id}`));
    const copyData = sortedSelectedRowIds.reduce((acc, rowId) => {
      const fieldsMap = cellSelectionModel[rowId];
      const rowString = Object.keys(fieldsMap).reduce((acc2, field) => {
        let cellData;
        if (fieldsMap[field]) {
          const cellParams = apiRef2.current.getCellParams(rowId, field);
          cellData = serializeCellValue(cellParams, {
            csvOptions: {
              delimiter: clipboardCopyCellDelimiter,
              shouldAppendQuotes: false,
              escapeFormulas: false
            },
            ignoreValueFormatter
          });
        } else {
          cellData = "";
        }
        return acc2 === "" ? cellData : [acc2, cellData].join(clipboardCopyCellDelimiter);
      }, "");
      return acc === "" ? rowString : [acc, rowString].join("\r\n");
    }, "");
    return copyData;
  }, [apiRef2, ignoreValueFormatter, clipboardCopyCellDelimiter]);
  useGridRegisterPipeProcessor(apiRef2, "isCellSelected", checkIfCellIsSelected);
  useGridRegisterPipeProcessor(apiRef2, "cellClassName", addClassesToCells);
  useGridRegisterPipeProcessor(apiRef2, "canUpdateFocus", canUpdateFocus);
  useGridRegisterPipeProcessor(apiRef2, "clipboardCopy", handleClipboardCopy);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/clipboard/useGridClipboardImport.js
var React74 = __toESM(require_react());
var columnFieldsToExcludeFromPaste = [GRID_CHECKBOX_SELECTION_FIELD, GRID_REORDER_COL_DEF.field, GRID_DETAIL_PANEL_TOGGLE_FIELD];
function batchRowUpdates(func, wait) {
  let rows = [];
  const debounced = debounce(() => {
    func(rows);
    rows = [];
  }, wait);
  return (row) => {
    rows.push(row);
    debounced();
  };
}
async function getTextFromClipboard(rootEl) {
  return new Promise((resolve) => {
    const focusedCell = getActiveElement(document);
    const el = document.createElement("input");
    el.style.width = "0px";
    el.style.height = "0px";
    el.style.border = "none";
    el.style.margin = "0";
    el.style.padding = "0";
    el.style.outline = "none";
    el.style.position = "absolute";
    el.style.top = "0";
    el.style.left = "0";
    const handlePasteEvent = (event) => {
      var _a3;
      el.removeEventListener("paste", handlePasteEvent);
      const text = (_a3 = event.clipboardData) == null ? void 0 : _a3.getData("text/plain");
      if (focusedCell instanceof HTMLElement) {
        focusedCell.focus({
          preventScroll: true
        });
      }
      el.remove();
      resolve(text || "");
    };
    el.addEventListener("paste", handlePasteEvent);
    rootEl.appendChild(el);
    el.focus({
      preventScroll: true
    });
  });
}
var CellValueUpdater = class {
  constructor(options) {
    this.rowsToUpdate = {};
    this.updateRow = void 0;
    this.options = void 0;
    this.options = options;
    this.updateRow = batchRowUpdates(options.apiRef.current.updateRows, 50);
  }
  updateCell({
    rowId,
    field,
    pastedCellValue
  }) {
    if (pastedCellValue === void 0) {
      return;
    }
    const {
      apiRef: apiRef2,
      getRowId
    } = this.options;
    const colDef = apiRef2.current.getColumn(field);
    if (!colDef || !colDef.editable) {
      return;
    }
    const row = this.rowsToUpdate[rowId] || _extends({}, apiRef2.current.getRow(rowId));
    if (!row) {
      return;
    }
    let parsedValue = pastedCellValue;
    if (colDef.pastedValueParser) {
      parsedValue = colDef.pastedValueParser(pastedCellValue, row, colDef, apiRef2);
    } else if (colDef.valueParser) {
      parsedValue = colDef.valueParser(parsedValue, row, colDef, apiRef2);
    }
    if (parsedValue === void 0) {
      return;
    }
    let rowCopy = _extends({}, row);
    if (typeof colDef.valueSetter === "function") {
      rowCopy = colDef.valueSetter(parsedValue, rowCopy, colDef, apiRef2);
    } else {
      rowCopy[field] = parsedValue;
    }
    const newRowId = getRowIdFromRowModel(rowCopy, getRowId);
    if (String(newRowId) !== String(rowId)) {
      return;
    }
    this.rowsToUpdate[rowId] = rowCopy;
  }
  applyUpdates() {
    const {
      apiRef: apiRef2,
      processRowUpdate,
      onProcessRowUpdateError
    } = this.options;
    const rowsToUpdate = this.rowsToUpdate;
    const rowIdsToUpdate = Object.keys(rowsToUpdate);
    if (rowIdsToUpdate.length === 0) {
      apiRef2.current.publishEvent("clipboardPasteEnd");
      return;
    }
    const handleRowUpdate = async (rowId) => {
      const newRow = rowsToUpdate[rowId];
      if (typeof processRowUpdate === "function") {
        const handleError = (errorThrown) => {
          if (onProcessRowUpdateError) {
            onProcessRowUpdateError(errorThrown);
          } else if (true) {
            warnOnce(["MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.", "To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.", "For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence."], "error");
          }
        };
        try {
          const oldRow = apiRef2.current.getRow(rowId);
          const finalRowUpdate = await processRowUpdate(newRow, oldRow, {
            rowId
          });
          this.updateRow(finalRowUpdate);
        } catch (error) {
          handleError(error);
        }
      } else {
        this.updateRow(newRow);
      }
    };
    const promises = rowIdsToUpdate.map((rowId) => {
      return new Promise((resolve) => {
        handleRowUpdate(rowId).then(resolve).catch(resolve);
      });
    });
    Promise.all(promises).then(() => {
      this.rowsToUpdate = {};
      apiRef2.current.publishEvent("clipboardPasteEnd");
    });
  }
};
function defaultPasteResolver({
  pastedData,
  apiRef: apiRef2,
  updateCell,
  pagination,
  paginationMode
}) {
  const isSingleValuePasted = pastedData.length === 1 && pastedData[0].length === 1;
  const cellSelectionModel = apiRef2.current.getCellSelectionModel();
  const selectedCellsArray = apiRef2.current.getSelectedCellsAsArray();
  if (cellSelectionModel && selectedCellsArray.length > 1) {
    let lastRowId = selectedCellsArray[0].id;
    let rowIndex = 0;
    let colIndex = 0;
    selectedCellsArray.forEach(({
      id: rowId,
      field
    }) => {
      if (rowId !== lastRowId) {
        lastRowId = rowId;
        rowIndex += 1;
        colIndex = 0;
      }
      const rowDataArr = pastedData[isSingleValuePasted ? 0 : rowIndex];
      const hasRowData = isSingleValuePasted ? true : rowDataArr !== void 0;
      if (hasRowData) {
        const cellValue = isSingleValuePasted ? rowDataArr[0] : rowDataArr[colIndex];
        updateCell({
          rowId,
          field,
          pastedCellValue: cellValue
        });
      }
      colIndex += 1;
    });
    return;
  }
  const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef2).filter((field) => {
    if (columnFieldsToExcludeFromPaste.includes(field)) {
      return false;
    }
    return true;
  });
  const selectedRows = apiRef2.current.getSelectedRows();
  if (selectedRows.size > 0 && !isSingleValuePasted) {
    const pastedRowsDataCount = pastedData.length;
    selectedRows.forEach((row, rowId) => {
      let rowData;
      if (pastedRowsDataCount === 1) {
        rowData = pastedData[0];
      } else {
        rowData = pastedData.shift();
      }
      if (rowData === void 0) {
        return;
      }
      rowData.forEach((newCellValue, cellIndex) => {
        updateCell({
          rowId,
          field: visibleColumnFields[cellIndex],
          pastedCellValue: newCellValue
        });
      });
    });
    return;
  }
  let selectedCell = gridFocusCellSelector(apiRef2);
  if (!selectedCell && selectedCellsArray.length === 1) {
    selectedCell = selectedCellsArray[0];
  }
  if (!selectedCell) {
    return;
  }
  if (columnFieldsToExcludeFromPaste.includes(selectedCell.field)) {
    return;
  }
  const selectedRowId = selectedCell.id;
  const selectedRowIndex = apiRef2.current.getRowIndexRelativeToVisibleRows(selectedRowId);
  const visibleRowIds = pagination && paginationMode === "client" ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef2) : gridExpandedSortedRowIdsSelector(apiRef2);
  const selectedFieldIndex = visibleColumnFields.indexOf(selectedCell.field);
  pastedData.forEach((rowData, index) => {
    const rowId = visibleRowIds[selectedRowIndex + index];
    if (typeof rowId === "undefined") {
      return;
    }
    for (let i2 = selectedFieldIndex; i2 < visibleColumnFields.length; i2 += 1) {
      const field = visibleColumnFields[i2];
      const stringValue = rowData[i2 - selectedFieldIndex];
      updateCell({
        rowId,
        field,
        pastedCellValue: stringValue
      });
    }
  });
}
var useGridClipboardImport = (apiRef2, props) => {
  const processRowUpdate = props.processRowUpdate;
  const onProcessRowUpdateError = props.onProcessRowUpdateError;
  const getRowId = props.getRowId;
  const enableClipboardPaste = !props.disableClipboardPaste;
  const logger = useGridLogger(apiRef2, "useGridClipboardImport");
  const splitClipboardPastedText = props.splitClipboardPastedText;
  const {
    pagination,
    paginationMode,
    onBeforeClipboardPasteStart
  } = props;
  const handlePaste = React74.useCallback(async (params, event) => {
    var _a3;
    if (!enableClipboardPaste) {
      return;
    }
    if (!isPasteShortcut(event)) {
      return;
    }
    const focusedCell = gridFocusCellSelector(apiRef2);
    if (focusedCell !== null) {
      const cellMode = apiRef2.current.getCellMode(focusedCell.id, focusedCell.field);
      if (cellMode === "edit") {
        return;
      }
    }
    const rootEl = (_a3 = apiRef2.current.rootElementRef) == null ? void 0 : _a3.current;
    if (!rootEl) {
      return;
    }
    const text = await getTextFromClipboard(rootEl);
    if (!text) {
      return;
    }
    const pastedData = splitClipboardPastedText(text);
    if (!pastedData) {
      return;
    }
    if (onBeforeClipboardPasteStart) {
      try {
        await onBeforeClipboardPasteStart({
          data: pastedData
        });
      } catch (error) {
        logger.debug("Clipboard paste operation cancelled");
        return;
      }
    }
    const cellUpdater = new CellValueUpdater({
      apiRef: apiRef2,
      processRowUpdate,
      onProcessRowUpdateError,
      getRowId
    });
    apiRef2.current.publishEvent("clipboardPasteStart", {
      data: pastedData
    });
    defaultPasteResolver({
      pastedData,
      apiRef: getPublicApiRef(apiRef2),
      updateCell: (...args) => {
        cellUpdater.updateCell(...args);
      },
      pagination,
      paginationMode
    });
    cellUpdater.applyUpdates();
  }, [apiRef2, processRowUpdate, onProcessRowUpdateError, getRowId, enableClipboardPaste, splitClipboardPastedText, pagination, paginationMode, onBeforeClipboardPasteStart, logger]);
  const checkIfCanStartEditing = React74.useCallback((initialValue, {
    event
  }) => {
    if (isPasteShortcut(event) && enableClipboardPaste) {
      return false;
    }
    return initialValue;
  }, [enableClipboardPaste]);
  useGridApiEventHandler(apiRef2, "cellKeyDown", handlePaste);
  useGridApiOptionHandler(apiRef2, "clipboardPasteStart", props.onClipboardPasteStart);
  useGridApiOptionHandler(apiRef2, "clipboardPasteEnd", props.onClipboardPasteEnd);
  useGridRegisterPipeProcessor(apiRef2, "canStartEditing", checkIfCanStartEditing);
};

// node_modules/@mui/x-data-grid-premium/esm/DataGridPremium/useDataGridPremiumComponent.js
var useDataGridPremiumComponent = (inputApiRef, props) => {
  const apiRef2 = useGridInitialization(inputApiRef, props);
  useGridRowSelectionPreProcessors(apiRef2, props);
  useGridRowReorderPreProcessors(apiRef2, props);
  useGridRowGroupingPreProcessors(apiRef2, props);
  useGridDataSourceRowGroupingPreProcessors(apiRef2, props);
  useGridTreeDataPreProcessors(apiRef2, props);
  useGridDataSourceTreeDataPreProcessors(apiRef2, props);
  useGridLazyLoaderPreProcessors(apiRef2, props);
  useGridRowPinningPreProcessors(apiRef2);
  useGridAggregationPreProcessors(apiRef2, props);
  useGridDetailPanelPreProcessors(apiRef2, props);
  useGridColumnPinningPreProcessors(apiRef2, props);
  useGridRowsPreProcessors(apiRef2);
  useGridInitializeState(headerFilteringStateInitializer, apiRef2, props);
  useGridInitializeState(rowGroupingStateInitializer, apiRef2, props);
  useGridInitializeState(aggregationStateInitializer, apiRef2, props);
  useGridInitializeState(rowSelectionStateInitializer, apiRef2, props);
  useGridInitializeState(cellSelectionStateInitializer, apiRef2, props);
  useGridInitializeState(detailPanelStateInitializer, apiRef2, props);
  useGridInitializeState(columnPinningStateInitializer, apiRef2, props);
  useGridInitializeState(columnsStateInitializer, apiRef2, props);
  useGridInitializeState(rowPinningStateInitializer, apiRef2, props);
  useGridInitializeState(rowsStateInitializer, apiRef2, props);
  useGridInitializeState(paginationStateInitializer, apiRef2, props);
  useGridInitializeState(editingStateInitializer, apiRef2, props);
  useGridInitializeState(focusStateInitializer, apiRef2, props);
  useGridInitializeState(sortingStateInitializer, apiRef2, props);
  useGridInitializeState(preferencePanelStateInitializer, apiRef2, props);
  useGridInitializeState(filterStateInitializer, apiRef2, props);
  useGridInitializeState(rowSpanningStateInitializer, apiRef2, props);
  useGridInitializeState(densityStateInitializer, apiRef2, props);
  useGridInitializeState(columnReorderStateInitializer, apiRef2, props);
  useGridInitializeState(columnResizeStateInitializer, apiRef2, props);
  useGridInitializeState(columnMenuStateInitializer, apiRef2, props);
  useGridInitializeState(columnGroupsStateInitializer, apiRef2, props);
  useGridInitializeState(virtualizationStateInitializer, apiRef2, props);
  useGridInitializeState(dataSourceStateInitializer, apiRef2, props);
  useGridInitializeState(dimensionsStateInitializer, apiRef2, props);
  useGridInitializeState(rowsMetaStateInitializer, apiRef2, props);
  useGridInitializeState(listViewStateInitializer, apiRef2, props);
  useGridRowGrouping(apiRef2, props);
  useGridHeaderFiltering(apiRef2, props);
  useGridTreeData(apiRef2, props);
  useGridAggregation(apiRef2, props);
  useGridKeyboardNavigation(apiRef2, props);
  useGridRowSelection(apiRef2, props);
  useGridCellSelection(apiRef2, props);
  useGridColumnPinning(apiRef2, props);
  useGridRowPinning(apiRef2, props);
  useGridColumns(apiRef2, props);
  useGridRows(apiRef2, props);
  useGridRowSpanning(apiRef2, props);
  useGridParamsApi(apiRef2, props);
  useGridDetailPanel(apiRef2, props);
  useGridColumnSpanning(apiRef2);
  useGridColumnGrouping(apiRef2, props);
  useGridClipboardImport(apiRef2, props);
  useGridEditing(apiRef2, props);
  useGridFocus(apiRef2, props);
  useGridPreferencesPanel(apiRef2, props);
  useGridFilter(apiRef2, props);
  useGridSorting(apiRef2, props);
  useGridDensity(apiRef2, props);
  useGridColumnReorder(apiRef2, props);
  useGridColumnResize(apiRef2, props);
  useGridPagination(apiRef2, props);
  useGridRowsMeta(apiRef2, props);
  useGridRowReorder(apiRef2, props);
  useGridScroll(apiRef2, props);
  useGridInfiniteLoader(apiRef2, props);
  useGridLazyLoader(apiRef2, props);
  useGridColumnMenu(apiRef2);
  useGridCsvExport(apiRef2, props);
  useGridPrintExport(apiRef2, props);
  useGridExcelExport(apiRef2, props);
  useGridClipboard(apiRef2, props);
  useGridDimensions(apiRef2, props);
  useGridEvents(apiRef2, props);
  useGridStatePersistence(apiRef2);
  useGridDataSource(apiRef2, props);
  useGridVirtualization(apiRef2, props);
  useGridListView(apiRef2, props);
  return apiRef2;
};

// node_modules/@mui/x-data-grid-premium/esm/DataGridPremium/useDataGridPremiumProps.js
var React75 = __toESM(require_react());

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/aggregation/gridAggregationFunctions.js
var sumAgg = {
  apply: ({
    values
  }) => {
    let sum = 0;
    for (let i2 = 0; i2 < values.length; i2 += 1) {
      const value = values[i2];
      if (isNumber(value)) {
        sum += value;
      }
    }
    return sum;
  },
  columnTypes: ["number"]
};
var avgAgg = {
  apply: ({
    values
  }) => {
    if (values.length === 0) {
      return null;
    }
    let sum = 0;
    let valuesCount = 0;
    for (let i2 = 0; i2 < values.length; i2 += 1) {
      const value = values[i2];
      if (isNumber(value)) {
        valuesCount += 1;
        sum += value;
      }
    }
    return sum / valuesCount;
  },
  columnTypes: ["number"]
};
var minAgg = {
  apply: ({
    values
  }) => {
    if (values.length === 0) {
      return null;
    }
    let min = Infinity;
    for (let i2 = 0; i2 < values.length; i2 += 1) {
      const value = values[i2];
      if (value != null && value < min) {
        min = value;
      }
    }
    return min;
  },
  columnTypes: ["number", "date", "dateTime"]
};
var maxAgg = {
  apply: ({
    values
  }) => {
    if (values.length === 0) {
      return null;
    }
    let max = -Infinity;
    for (let i2 = 0; i2 < values.length; i2 += 1) {
      const value = values[i2];
      if (value != null && value > max) {
        max = value;
      }
    }
    return max;
  },
  columnTypes: ["number", "date", "dateTime"]
};
var sizeAgg = {
  apply: ({
    values
  }) => {
    return values.filter((value) => typeof value !== "undefined").length;
  },
  valueFormatter: (value) => {
    if (value == null || !isNumber(value)) {
      return value;
    }
    return value.toLocaleString();
  },
  hasCellUnit: false
};
var GRID_AGGREGATION_FUNCTIONS = {
  sum: sumAgg,
  avg: avgAgg,
  min: minAgg,
  max: maxAgg,
  size: sizeAgg
};

// node_modules/@mui/x-data-grid-premium/esm/material/index.js
var iconsSlots = {
  columnMenuUngroupIcon: GridWorkspacesIcon,
  columnMenuGroupIcon: GridGroupWorkIcon,
  columnMenuAggregationIcon: GridFunctionsIcon
};
var materialSlots2 = _extends({}, iconsSlots);
var material_default2 = materialSlots2;

// node_modules/@mui/x-data-grid-premium/esm/constants/dataGridPremiumDefaultSlotsComponents.js
var DATA_GRID_PREMIUM_DEFAULT_SLOTS_COMPONENTS = _extends({}, DATA_GRID_PRO_DEFAULT_SLOTS_COMPONENTS, material_default2, {
  columnMenu: GridPremiumColumnMenu
});

// node_modules/@mui/x-data-grid-premium/esm/DataGridPremium/useDataGridPremiumProps.js
var getDataGridPremiumForcedProps = (themedProps) => _extends({
  signature: GridSignature.DataGridPremium
}, themedProps.unstable_dataSource ? {
  filterMode: "server",
  sortingMode: "server",
  paginationMode: "server"
} : {});
var DATA_GRID_PREMIUM_PROPS_DEFAULT_VALUES = _extends({}, DATA_GRID_PRO_PROPS_DEFAULT_VALUES, {
  cellSelection: false,
  disableAggregation: false,
  disableRowGrouping: false,
  rowGroupingColumnMode: "single",
  aggregationFunctions: GRID_AGGREGATION_FUNCTIONS,
  aggregationRowsScope: "filtered",
  getAggregationPosition: (groupNode) => groupNode.depth === -1 ? "footer" : "inline",
  disableClipboardPaste: false,
  splitClipboardPastedText: (pastedText) => {
    const text = pastedText.replace(/\r?\n$/, "");
    return text.split(/\r\n|\n|\r/).map((row) => row.split("	"));
  }
});
var defaultSlots2 = DATA_GRID_PREMIUM_DEFAULT_SLOTS_COMPONENTS;
var useDataGridPremiumProps = (inProps) => {
  const themedProps = useProps(
    // eslint-disable-next-line material-ui/mui-name-matches-component-name
    useThemeProps({
      props: inProps,
      name: "MuiDataGrid"
    })
  );
  const localeText = React75.useMemo(() => _extends({}, GRID_DEFAULT_LOCALE_TEXT, themedProps.localeText), [themedProps.localeText]);
  const slots = React75.useMemo(() => computeSlots({
    defaultSlots: defaultSlots2,
    slots: themedProps.slots
  }), [themedProps.slots]);
  return React75.useMemo(() => _extends({}, DATA_GRID_PREMIUM_PROPS_DEFAULT_VALUES, themedProps, {
    localeText,
    slots
  }, getDataGridPremiumForcedProps(themedProps)), [themedProps, localeText, slots]);
};

// node_modules/@mui/x-data-grid-premium/esm/utils/releaseInfo.js
var getReleaseInfo2 = () => {
  const releaseInfo3 = "MTczOTc0NjgwMDAwMA==";
  if (true) {
    if (releaseInfo3 === "__RELEASE_INFO__") {
      return ponyfillGlobal_default.__MUI_RELEASE_INFO__;
    }
  }
  return releaseInfo3;
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/utils/useGridPrivateApiContext.js
var useGridPrivateApiContext3 = useGridPrivateApiContext;

// node_modules/@mui/x-data-grid-premium/esm/hooks/utils/useGridAriaAttributes.js
var useGridAriaAttributes3 = () => {
  var _a3;
  const rootProps = useGridRootProps3();
  const ariaAttributesPro = useGridAriaAttributes2();
  const apiRef2 = useGridPrivateApiContext3();
  const gridRowGroupingModel = useGridSelector(apiRef2, gridRowGroupingSanitizedModelSelector);
  const ariaAttributesPremium = ((_a3 = rootProps.experimentalFeatures) == null ? void 0 : _a3.ariaV8) && gridRowGroupingModel.length > 0 ? {
    role: "treegrid"
  } : {};
  return _extends({}, ariaAttributesPro, ariaAttributesPremium);
};

// node_modules/@mui/x-data-grid-premium/esm/hooks/features/rows/useGridRowAriaAttributes.js
var useGridRowAriaAttributes3 = () => {
  const apiRef2 = useGridPrivateApiContext3();
  const gridRowGroupingModel = useGridSelector(apiRef2, gridRowGroupingSanitizedModelSelector);
  return useGridRowAriaAttributes2(gridRowGroupingModel.length > 0);
};

// node_modules/@mui/x-data-grid-premium/esm/DataGridPremium/DataGridPremium.js
var import_jsx_runtime49 = __toESM(require_jsx_runtime());
var configuration2 = {
  hooks: {
    useGridAriaAttributes: useGridAriaAttributes3,
    useGridRowAriaAttributes: useGridRowAriaAttributes3
  }
};
var releaseInfo2 = getReleaseInfo2();
var watermark2 = (0, import_jsx_runtime49.jsx)(MemoizedWatermark, {
  packageName: "x-data-grid-premium",
  releaseInfo: releaseInfo2
});
var dataGridPremiumPropValidators;
if (true) {
  dataGridPremiumPropValidators = [...propValidatorsDataGrid, ...propValidatorsDataGridPro];
}
var DataGridPremiumRaw = forwardRef(function DataGridPremium(inProps, ref) {
  var _a3;
  const props = useDataGridPremiumProps(inProps);
  const privateApiRef = useDataGridPremiumComponent(props.apiRef, props);
  useLicenseVerifier("x-data-grid-premium", releaseInfo2);
  if (true) {
    validateProps(props, dataGridPremiumPropValidators);
  }
  return (0, import_jsx_runtime49.jsx)(GridContextProvider, {
    privateApiRef,
    configuration: configuration2,
    props,
    children: (0, import_jsx_runtime49.jsx)(MemoizedGridRoot, _extends({
      className: props.className,
      style: props.style,
      sx: props.sx
    }, props.forwardedProps, (_a3 = props.slotProps) == null ? void 0 : _a3.root, {
      ref,
      children: watermark2
    }))
  });
});
true ? DataGridPremiumRaw.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Aggregation functions available on the grid.
   * @default GRID_AGGREGATION_FUNCTIONS
   */
  aggregationFunctions: import_prop_types12.default.object,
  /**
   * Set the aggregation model of the grid.
   */
  aggregationModel: import_prop_types12.default.object,
  /**
   * Rows used to generate the aggregated value.
   * If `filtered`, the aggregated values are generated using only the rows currently passing the filtering process.
   * If `all`, the aggregated values are generated using all the rows.
   * @default "filtered"
   */
  aggregationRowsScope: import_prop_types12.default.oneOf(["all", "filtered"]),
  /**
   * The ref object that allows grid manipulation. Can be instantiated with `useGridApiRef()`.
   */
  apiRef: import_prop_types12.default.shape({
    current: import_prop_types12.default.object.isRequired
  }),
  /**
   * The label of the Data Grid.
   */
  "aria-label": import_prop_types12.default.string,
  /**
   * The id of the element containing a label for the Data Grid.
   */
  "aria-labelledby": import_prop_types12.default.string,
  /**
   * If `true`, the Data Grid height is dynamic and follows the number of rows in the Data Grid.
   * @default false
   * @deprecated Use flex parent container instead: https://mui.com/x/react-data-grid/layout/#flex-parent-container
   * @example
   * <div style={{ display: 'flex', flexDirection: 'column' }}>
   *   <DataGrid />
   * </div>
   */
  autoHeight: import_prop_types12.default.bool,
  /**
   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.
   * @default false
   */
  autoPageSize: import_prop_types12.default.bool,
  /**
   * If `true`, columns are autosized after the datagrid is mounted.
   * @default false
   */
  autosizeOnMount: import_prop_types12.default.bool,
  /**
   * The options for autosize when user-initiated.
   */
  autosizeOptions: import_prop_types12.default.shape({
    columns: import_prop_types12.default.arrayOf(import_prop_types12.default.string),
    disableColumnVirtualization: import_prop_types12.default.bool,
    expand: import_prop_types12.default.bool,
    includeHeaders: import_prop_types12.default.bool,
    includeOutliers: import_prop_types12.default.bool,
    outliersFactor: import_prop_types12.default.number
  }),
  /**
   * Controls the modes of the cells.
   */
  cellModesModel: import_prop_types12.default.object,
  /**
   * If `true`, the cell selection mode is enabled.
   * @default false
   */
  cellSelection: import_prop_types12.default.bool,
  /**
   * Set the cell selection model of the grid.
   */
  cellSelectionModel: import_prop_types12.default.object,
  /**
   * If `true`, the Data Grid will display an extra column with checkboxes for selecting rows.
   * @default false
   */
  checkboxSelection: import_prop_types12.default.bool,
  /**
   * If `true`, the "Select All" header checkbox selects only the rows on the current page. To be used in combination with `checkboxSelection`.
   * It only works if the pagination is enabled.
   * @default false
   */
  checkboxSelectionVisibleOnly: import_prop_types12.default.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types12.default.object,
  /**
   * The character used to separate cell values when copying to the clipboard.
   * @default '\t'
   */
  clipboardCopyCellDelimiter: import_prop_types12.default.string,
  /**
   * Column region in pixels to render before/after the viewport
   * @default 150
   */
  columnBufferPx: import_prop_types12.default.number,
  /**
   * Sets the height in pixels of the column group headers in the Data Grid.
   * Inherits the `columnHeaderHeight` value if not set.
   */
  columnGroupHeaderHeight: import_prop_types12.default.number,
  columnGroupingModel: import_prop_types12.default.arrayOf(import_prop_types12.default.object),
  /**
   * Sets the height in pixel of the column headers in the Data Grid.
   * @default 56
   */
  columnHeaderHeight: import_prop_types12.default.number,
  /**
   * Set of columns of type [[GridColDef]][].
   */
  columns: import_prop_types12.default.arrayOf(import_prop_types12.default.object).isRequired,
  /**
   * Set the column visibility model of the Data Grid.
   * If defined, the Data Grid will ignore the `hide` property in [[GridColDef]].
   */
  columnVisibilityModel: import_prop_types12.default.object,
  /**
   * If above 0, the row children will be expanded up to this depth.
   * If equal to -1, all the row children will be expanded.
   * @default 0
   */
  defaultGroupingExpansionDepth: import_prop_types12.default.number,
  /**
   * Set the density of the Data Grid.
   * @default "standard"
   */
  density: import_prop_types12.default.oneOf(["comfortable", "compact", "standard"]),
  /**
   * The row ids to show the detail panel.
   */
  detailPanelExpandedRowIds: import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]).isRequired),
  /**
   * If `true`, aggregation is disabled.
   * @default false
   */
  disableAggregation: import_prop_types12.default.bool,
  /**
   * If `true`, column autosizing on header separator double-click is disabled.
   * @default false
   */
  disableAutosize: import_prop_types12.default.bool,
  /**
   * If `true`, the filtering will only be applied to the top level rows when grouping rows with the `treeData` prop.
   * @default false
   */
  disableChildrenFiltering: import_prop_types12.default.bool,
  /**
   * If `true`, the sorting will only be applied to the top level rows when grouping rows with the `treeData` prop.
   * @default false
   */
  disableChildrenSorting: import_prop_types12.default.bool,
  /**
   * If `true`, the clipboard paste is disabled.
   * @default false
   */
  disableClipboardPaste: import_prop_types12.default.bool,
  /**
   * If `true`, column filters are disabled.
   * @default false
   */
  disableColumnFilter: import_prop_types12.default.bool,
  /**
   * If `true`, the column menu is disabled.
   * @default false
   */
  disableColumnMenu: import_prop_types12.default.bool,
  /**
   * If `true`, the column pinning is disabled.
   * @default false
   */
  disableColumnPinning: import_prop_types12.default.bool,
  /**
   * If `true`, reordering columns is disabled.
   * @default false
   */
  disableColumnReorder: import_prop_types12.default.bool,
  /**
   * If `true`, resizing columns is disabled.
   * @default false
   */
  disableColumnResize: import_prop_types12.default.bool,
  /**
   * If `true`, hiding/showing columns is disabled.
   * @default false
   */
  disableColumnSelector: import_prop_types12.default.bool,
  /**
   * If `true`, the column sorting feature will be disabled.
   * @default false
   */
  disableColumnSorting: import_prop_types12.default.bool,
  /**
   * If `true`, the density selector is disabled.
   * @default false
   */
  disableDensitySelector: import_prop_types12.default.bool,
  /**
   * If `true`, `eval()` is not used for performance optimization.
   * @default false
   */
  disableEval: import_prop_types12.default.bool,
  /**
   * If `true`, filtering with multiple columns is disabled.
   * @default false
   */
  disableMultipleColumnsFiltering: import_prop_types12.default.bool,
  /**
   * If `true`, the sorting with multiple columns is disabled.
   * @default false
   */
  disableMultipleColumnsSorting: import_prop_types12.default.bool,
  /**
   * If `true`, multiple selection using the Ctrl/CMD or Shift key is disabled.
   * The MIT DataGrid will ignore this prop, unless `checkboxSelection` is enabled.
   * @default false (`!props.checkboxSelection` for MIT Data Grid)
   */
  disableMultipleRowSelection: import_prop_types12.default.bool,
  /**
   * If `true`, the row grouping is disabled.
   * @default false
   */
  disableRowGrouping: import_prop_types12.default.bool,
  /**
   * If `true`, the selection on click on a row or cell is disabled.
   * @default false
   */
  disableRowSelectionOnClick: import_prop_types12.default.bool,
  /**
   * If `true`, the virtualization is disabled.
   * @default false
   */
  disableVirtualization: import_prop_types12.default.bool,
  /**
   * Controls whether to use the cell or row editing.
   * @default "cell"
   */
  editMode: import_prop_types12.default.oneOf(["cell", "row"]),
  /**
   * Use if the actual rowCount is not known upfront, but an estimation is available.
   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.
   * Applicable only with `paginationMode="server"` and when `rowCount="-1"`
   */
  estimatedRowCount: import_prop_types12.default.number,
  /**
   * Unstable features, breaking changes might be introduced.
   * For each feature, if the flag is not explicitly set to `true`, then the feature is fully disabled, and neither property nor method calls will have any effect.
   */
  experimentalFeatures: import_prop_types12.default.shape({
    ariaV8: import_prop_types12.default.bool,
    warnIfFocusStateIsNotSynced: import_prop_types12.default.bool
  }),
  /**
   * The milliseconds delay to wait after a keystroke before triggering filtering.
   * @default 150
   */
  filterDebounceMs: import_prop_types12.default.number,
  /**
   * Filtering can be processed on the server or client-side.
   * Set it to 'server' if you would like to handle filtering on the server-side.
   * @default "client"
   */
  filterMode: import_prop_types12.default.oneOf(["client", "server"]),
  /**
   * Set the filter model of the Data Grid.
   */
  filterModel: import_prop_types12.default.shape({
    items: import_prop_types12.default.arrayOf(import_prop_types12.default.shape({
      field: import_prop_types12.default.string.isRequired,
      id: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
      operator: import_prop_types12.default.string.isRequired,
      value: import_prop_types12.default.any
    })).isRequired,
    logicOperator: import_prop_types12.default.oneOf(["and", "or"]),
    quickFilterExcludeHiddenColumns: import_prop_types12.default.bool,
    quickFilterLogicOperator: import_prop_types12.default.oneOf(["and", "or"]),
    quickFilterValues: import_prop_types12.default.array
  }),
  /**
   * Forwarded props for the Data Grid root element.
   * @ignore - do not document.
   */
  forwardedProps: import_prop_types12.default.object,
  /**
   * Determines the position of an aggregated value.
   * @param {GridGroupNode} groupNode The current group.
   * @returns {GridAggregationPosition | null} Position of the aggregated value (if `null`, the group isn't aggregated).
   * @default (groupNode) => groupNode == null ? 'footer' : 'inline'
   */
  getAggregationPosition: import_prop_types12.default.func,
  /**
   * Function that applies CSS classes dynamically on cells.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @returns {string} The CSS class to apply to the cell.
   */
  getCellClassName: import_prop_types12.default.func,
  /**
   * Function that returns the element to render in row detail.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {React.JSX.Element} The row detail element.
   */
  getDetailPanelContent: import_prop_types12.default.func,
  /**
   * Function that returns the height of the row detail panel.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {number | string} The height in pixels or "auto" to use the content height.
   * @default "() => 500"
   */
  getDetailPanelHeight: import_prop_types12.default.func,
  /**
   * Function that returns the estimated height for a row.
   * Only works if dynamic row height is used.
   * Once the row height is measured this value is discarded.
   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.
   */
  getEstimatedRowHeight: import_prop_types12.default.func,
  /**
   * Function that applies CSS classes dynamically on rows.
   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].
   * @returns {string} The CSS class to apply to the row.
   */
  getRowClassName: import_prop_types12.default.func,
  /**
   * Function that sets the row height per row.
   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If "auto" then the row height is calculated based on the content.
   */
  getRowHeight: import_prop_types12.default.func,
  /**
   * Return the id of a given [[GridRowModel]].
   */
  getRowId: import_prop_types12.default.func,
  /**
   * Function that allows to specify the spacing between rows.
   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].
   * @returns {GridRowSpacing} The row spacing values.
   */
  getRowSpacing: import_prop_types12.default.func,
  /**
   * Determines the path of a row in the tree data.
   * For instance, a row with the path ["A", "B"] is the child of the row with the path ["A"].
   * Note that all paths must contain at least one element.
   * @template R
   * @param {R} row The row from which we want the path.
   * @returns {string[]} The path to the row.
   */
  getTreeDataPath: import_prop_types12.default.func,
  /**
   * The grouping column used by the tree data.
   */
  groupingColDef: import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object]),
  /**
   * Override the height of the header filters.
   */
  headerFilterHeight: import_prop_types12.default.number,
  /**
   * If `true`, the header filters feature is enabled.
   * @default false
   */
  headerFilters: import_prop_types12.default.bool,
  /**
   * If `true`, the footer component is hidden.
   * @default false
   */
  hideFooter: import_prop_types12.default.bool,
  /**
   * If `true`, the pagination component in the footer is hidden.
   * @default false
   */
  hideFooterPagination: import_prop_types12.default.bool,
  /**
   * If `true`, the row count in the footer is hidden.
   * It has no effect if the pagination is enabled.
   * @default false
   */
  hideFooterRowCount: import_prop_types12.default.bool,
  /**
   * If `true`, the selected row count in the footer is hidden.
   * @default false
   */
  hideFooterSelectedRowCount: import_prop_types12.default.bool,
  /**
   * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.
   * E.g. when filter value is `cafe`, the rows with `café` will be visible.
   * @default false
   */
  ignoreDiacritics: import_prop_types12.default.bool,
  /**
   * If `true`, the Data Grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.
   * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.
   * @default false
   */
  ignoreValueFormatterDuringExport: import_prop_types12.default.oneOfType([import_prop_types12.default.shape({
    clipboardExport: import_prop_types12.default.bool,
    csvExport: import_prop_types12.default.bool
  }), import_prop_types12.default.bool]),
  /**
   * If `select`, a group header checkbox in indeterminate state (like "Select All" checkbox)
   * will select all the rows under it.
   * If `deselect`, it will deselect all the rows under it.
   * Works only if `checkboxSelection` is enabled.
   * @default "deselect"
   * @deprecated `select` will be the default behavior from v8 onwards
   */
  indeterminateCheckboxAction: import_prop_types12.default.oneOf(["deselect", "select"]),
  /**
   * The initial state of the DataGridPremium.
   * The data in it is set in the state on initialization but isn't controlled.
   * If one of the data in `initialState` is also being controlled, then the control state wins.
   */
  initialState: import_prop_types12.default.object,
  /**
   * Callback fired when a cell is rendered, returns true if the cell is editable.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @returns {boolean} A boolean indicating if the cell is editable.
   */
  isCellEditable: import_prop_types12.default.func,
  /**
   * Determines if a group should be expanded after its creation.
   * This prop takes priority over the `defaultGroupingExpansionDepth` prop.
   * @param {GridGroupNode} node The node of the group to test.
   * @returns {boolean} A boolean indicating if the group is expanded.
   */
  isGroupExpandedByDefault: import_prop_types12.default.func,
  /**
   * Determines if a row can be selected.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {boolean} A boolean indicating if the row is selectable.
   */
  isRowSelectable: import_prop_types12.default.func,
  /**
   * If `true`, moving the mouse pointer outside the grid before releasing the mouse button
   * in a column re-order action will not cause the column to jump back to its original position.
   * @default false
   */
  keepColumnPositionIfDraggedOutside: import_prop_types12.default.bool,
  /**
   * If `true`, the selection model will retain selected rows that do not exist.
   * Useful when using server side pagination and row selections need to be retained
   * when changing pages.
   * @default false
   */
  keepNonExistentRowsSelected: import_prop_types12.default.bool,
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types12.default.bool,
  /**
   * Set the locale text of the Data Grid.
   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.
   */
  localeText: import_prop_types12.default.object,
  /**
   * Pass a custom logger in the components that implements the [[Logger]] interface.
   * @default console
   */
  logger: import_prop_types12.default.shape({
    debug: import_prop_types12.default.func.isRequired,
    error: import_prop_types12.default.func.isRequired,
    info: import_prop_types12.default.func.isRequired,
    warn: import_prop_types12.default.func.isRequired
  }),
  /**
   * Allows to pass the logging level or false to turn off logging.
   * @default "error" ("warn" in dev mode)
   */
  logLevel: import_prop_types12.default.oneOf(["debug", "error", "info", "warn", false]),
  /**
   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).
   */
  nonce: import_prop_types12.default.string,
  /**
   * Callback fired when the row grouping model changes.
   * @param {GridAggregationModel} model The aggregated columns.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onAggregationModelChange: import_prop_types12.default.func,
  /**
   * Callback fired before the clipboard paste operation starts.
   * Use it to confirm or cancel the paste operation.
   * @param {object} params Params passed to the callback.
   * @param {string[][]} params.data The raw pasted data split by rows and cells.
   * @returns {Promise<any>} A promise that resolves to confirm the paste operation, and rejects to cancel it.
   */
  onBeforeClipboardPasteStart: import_prop_types12.default.func,
  /**
   * Callback fired when any cell is clicked.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellClick: import_prop_types12.default.func,
  /**
   * Callback fired when a double click event comes from a cell element.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellDoubleClick: import_prop_types12.default.func,
  /**
   * Callback fired when the cell turns to edit mode.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
   */
  onCellEditStart: import_prop_types12.default.func,
  /**
   * Callback fired when the cell turns to view mode.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
   */
  onCellEditStop: import_prop_types12.default.func,
  /**
   * Callback fired when a keydown event comes from a cell element.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.KeyboardEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellKeyDown: import_prop_types12.default.func,
  /**
   * Callback fired when the `cellModesModel` prop changes.
   * @param {GridCellModesModel} cellModesModel Object containing which cells are in "edit" mode.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellModesModelChange: import_prop_types12.default.func,
  /**
   * Callback fired when the selection state of one or multiple cells changes.
   * @param {GridCellSelectionModel} cellSelectionModel Object in the shape of [[GridCellSelectionModel]] containing the selected cells.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellSelectionModelChange: import_prop_types12.default.func,
  /**
   * Callback called when the data is copied to the clipboard.
   * @param {string} data The data copied to the clipboard.
   */
  onClipboardCopy: import_prop_types12.default.func,
  /**
   * Callback fired when the clipboard paste operation ends.
   */
  onClipboardPasteEnd: import_prop_types12.default.func,
  /**
   * Callback fired when the clipboard paste operation starts.
   */
  onClipboardPasteStart: import_prop_types12.default.func,
  /**
   * Callback fired when a click event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderClick: import_prop_types12.default.func,
  /**
   * Callback fired when a contextmenu event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   */
  onColumnHeaderContextMenu: import_prop_types12.default.func,
  /**
   * Callback fired when a double click event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderDoubleClick: import_prop_types12.default.func,
  /**
   * Callback fired when a mouse enter event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderEnter: import_prop_types12.default.func,
  /**
   * Callback fired when a mouse leave event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderLeave: import_prop_types12.default.func,
  /**
   * Callback fired when a mouseout event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderOut: import_prop_types12.default.func,
  /**
   * Callback fired when a mouseover event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderOver: import_prop_types12.default.func,
  /**
   * Callback fired when a column is reordered.
   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnOrderChange: import_prop_types12.default.func,
  /**
   * Callback fired while a column is being resized.
   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnResize: import_prop_types12.default.func,
  /**
   * Callback fired when the column visibility model changes.
   * @param {GridColumnVisibilityModel} model The new model.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnVisibilityModelChange: import_prop_types12.default.func,
  /**
   * Callback fired when the width of a column is changed.
   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnWidthChange: import_prop_types12.default.func,
  /**
   * Callback fired when the density changes.
   * @param {GridDensity} density New density value.
   */
  onDensityChange: import_prop_types12.default.func,
  /**
   * Callback fired when the detail panel of a row is opened or closed.
   * @param {GridRowId[]} ids The ids of the rows which have the detail panel open.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onDetailPanelExpandedRowIdsChange: import_prop_types12.default.func,
  /**
   * Callback fired when the state of the Excel export changes.
   * @param {string} inProgress Indicates if the task is in progress.
   */
  onExcelExportStateChange: import_prop_types12.default.func,
  /**
   * Callback fired when rowCount is set and the next batch of virtualized rows is rendered.
   * @param {GridFetchRowsParams} params With all properties from [[GridFetchRowsParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onFetchRows: import_prop_types12.default.func,
  /**
   * Callback fired when the Filter model changes before the filters are applied.
   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onFilterModelChange: import_prop_types12.default.func,
  /**
   * Callback fired when the menu is closed.
   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onMenuClose: import_prop_types12.default.func,
  /**
   * Callback fired when the menu is opened.
   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onMenuOpen: import_prop_types12.default.func,
  /**
   * Callback fired when the pagination meta has changed.
   * @param {GridPaginationMeta} paginationMeta Updated pagination meta.
   */
  onPaginationMetaChange: import_prop_types12.default.func,
  /**
   * Callback fired when the pagination model has changed.
   * @param {GridPaginationModel} model Updated pagination model.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPaginationModelChange: import_prop_types12.default.func,
  /**
   * Callback fired when the pinned columns have changed.
   * @param {GridPinnedColumnFields} pinnedColumns The changed pinned columns.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPinnedColumnsChange: import_prop_types12.default.func,
  /**
   * Callback fired when the preferences panel is closed.
   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPreferencePanelClose: import_prop_types12.default.func,
  /**
   * Callback fired when the preferences panel is opened.
   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPreferencePanelOpen: import_prop_types12.default.func,
  /**
   * Callback called when `processRowUpdate` throws an error or rejects.
   * @param {any} error The error thrown.
   */
  onProcessRowUpdateError: import_prop_types12.default.func,
  /**
   * Callback fired when the Data Grid is resized.
   * @param {ElementSize} containerSize With all properties from [[ElementSize]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onResize: import_prop_types12.default.func,
  /**
   * Callback fired when a row is clicked.
   * Not called if the target clicked is an interactive element added by the built-in columns.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowClick: import_prop_types12.default.func,
  /**
   * Callback fired when the row count has changed.
   * @param {number} count Updated row count.
   */
  onRowCountChange: import_prop_types12.default.func,
  /**
   * Callback fired when a double click event comes from a row container element.
   * @param {GridRowParams} params With all properties from [[RowParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowDoubleClick: import_prop_types12.default.func,
  /**
   * Callback fired when the row turns to edit mode.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
   */
  onRowEditStart: import_prop_types12.default.func,
  /**
   * Callback fired when the row turns to view mode.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
   */
  onRowEditStop: import_prop_types12.default.func,
  /**
   * Callback fired when the row grouping model changes.
   * @param {GridRowGroupingModel} model Columns used as grouping criteria.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowGroupingModelChange: import_prop_types12.default.func,
  /**
   * Callback fired when the `rowModesModel` prop changes.
   * @param {GridRowModesModel} rowModesModel Object containing which rows are in "edit" mode.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowModesModelChange: import_prop_types12.default.func,
  /**
   * Callback fired when a row is being reordered.
   * @param {GridRowOrderChangeParams} params With all properties from [[GridRowOrderChangeParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowOrderChange: import_prop_types12.default.func,
  /**
   * Callback fired when the selection state of one or multiple rows changes.
   * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowSelectionModelChange: import_prop_types12.default.func,
  /**
   * Callback fired when scrolling to the bottom of the grid viewport.
   * @param {GridRowScrollEndParams} params With all properties from [[GridRowScrollEndParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowsScrollEnd: import_prop_types12.default.func,
  /**
   * Callback fired when the sort model changes before a column is sorted.
   * @param {GridSortModel} model With all properties from [[GridSortModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onSortModelChange: import_prop_types12.default.func,
  /**
   * Callback fired when the state of the Data Grid is updated.
   * @param {GridState} state The new state.
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   * @ignore - do not document.
   */
  onStateChange: import_prop_types12.default.func,
  /**
   * Select the pageSize dynamically using the component UI.
   * @default [25, 50, 100]
   */
  pageSizeOptions: import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.shape({
    label: import_prop_types12.default.string.isRequired,
    value: import_prop_types12.default.number.isRequired
  })]).isRequired),
  /**
   * If `true`, pagination is enabled.
   * @default false
   */
  pagination: import_prop_types12.default.bool,
  /**
   * The extra information about the pagination state of the Data Grid.
   * Only applicable with `paginationMode="server"`.
   */
  paginationMeta: import_prop_types12.default.shape({
    hasNextPage: import_prop_types12.default.bool
  }),
  /**
   * Pagination can be processed on the server or client-side.
   * Set it to 'client' if you would like to handle the pagination on the client-side.
   * Set it to 'server' if you would like to handle the pagination on the server-side.
   * @default "client"
   */
  paginationMode: import_prop_types12.default.oneOf(["client", "server"]),
  /**
   * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.
   */
  paginationModel: import_prop_types12.default.shape({
    page: import_prop_types12.default.number.isRequired,
    pageSize: import_prop_types12.default.number.isRequired
  }),
  /**
   * The column fields to display pinned to left or right.
   */
  pinnedColumns: import_prop_types12.default.object,
  /**
   * Rows data to pin on top or bottom.
   */
  pinnedRows: import_prop_types12.default.shape({
    bottom: import_prop_types12.default.arrayOf(import_prop_types12.default.object),
    top: import_prop_types12.default.arrayOf(import_prop_types12.default.object)
  }),
  /**
   * Callback called before updating a row with new values in the row and cell editing.
   * @template R
   * @param {R} newRow Row object with the new values.
   * @param {R} oldRow Row object with the old values.
   * @param {{ rowId: GridRowId }} params Additional parameters.
   * @returns {Promise<R> | R} The final values to update the row.
   */
  processRowUpdate: import_prop_types12.default.func,
  /**
   * If `true`, the page is set to 0 after each sorting or filtering.
   * This prop will be removed in the next major version and resetting the page will become the default behavior.
   * @default false
   */
  resetPageOnSortFilter: import_prop_types12.default.bool,
  /**
   * The milliseconds throttle delay for resizing the grid.
   * @default 60
   */
  resizeThrottleMs: import_prop_types12.default.number,
  /**
   * Row region in pixels to render before/after the viewport
   * @default 150
   */
  rowBufferPx: import_prop_types12.default.number,
  /**
   * Set the total number of rows, if it is different from the length of the value `rows` prop.
   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.
   * Only works with `paginationMode="server"`, ignored when `paginationMode="client"`.
   */
  rowCount: import_prop_types12.default.number,
  /**
   * If `single`, all the columns that are grouped are represented in the same grid column.
   * If `multiple`, each column that is grouped is represented in its own grid column.
   * @default 'single'
   */
  rowGroupingColumnMode: import_prop_types12.default.oneOf(["multiple", "single"]),
  /**
   * Set the row grouping model of the grid.
   */
  rowGroupingModel: import_prop_types12.default.arrayOf(import_prop_types12.default.string),
  /**
   * Sets the height in pixel of a row in the Data Grid.
   * @default 52
   */
  rowHeight: import_prop_types12.default.number,
  /**
   * Controls the modes of the rows.
   */
  rowModesModel: import_prop_types12.default.object,
  /**
   * The milliseconds delay to wait after measuring the row height before recalculating row positions.
   * Setting it to a lower value could be useful when using dynamic row height,
   * but might reduce performance when displaying a large number of rows.
   * @default 166
   * @deprecated
   */
  rowPositionsDebounceMs: import_prop_types12.default.number,
  /**
   * If `true`, the reordering of rows is enabled.
   * @default false
   */
  rowReordering: import_prop_types12.default.bool,
  /**
   * Set of rows of type [[GridRowsProp]].
   * @default []
   */
  rows: import_prop_types12.default.arrayOf(import_prop_types12.default.object),
  /**
   * If `false`, the row selection mode is disabled.
   * @default true
   */
  rowSelection: import_prop_types12.default.bool,
  /**
   * Sets the row selection model of the Data Grid.
   */
  rowSelectionModel: import_prop_types12.default.oneOfType([import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]).isRequired), import_prop_types12.default.number, import_prop_types12.default.string]),
  /**
   * When `rowSelectionPropagation.descendants` is set to `true`.
   * - Selecting a parent selects all its filtered descendants automatically.
   * - Deselecting a parent row deselects all its filtered descendants automatically.
   *
   * When `rowSelectionPropagation.parents` is set to `true`
   * - Selecting all the filtered descendants of a parent selects the parent automatically.
   * - Deselecting a descendant of a selected parent deselects the parent automatically.
   *
   * Works with tree data and row grouping on the client-side only.
   * @default { parents: false, descendants: false }
   */
  rowSelectionPropagation: import_prop_types12.default.shape({
    descendants: import_prop_types12.default.bool,
    parents: import_prop_types12.default.bool
  }),
  /**
   * Loading rows can be processed on the server or client-side.
   * Set it to 'client' if you would like enable infnite loading.
   * Set it to 'server' if you would like to enable lazy loading.
   * * @default "client"
   */
  rowsLoadingMode: import_prop_types12.default.oneOf(["client", "server"]),
  /**
   * Sets the type of space between rows added by `getRowSpacing`.
   * @default "margin"
   */
  rowSpacingType: import_prop_types12.default.oneOf(["border", "margin"]),
  /**
   * Override the height/width of the Data Grid inner scrollbar.
   */
  scrollbarSize: import_prop_types12.default.number,
  /**
   * Set the area in `px` at the bottom of the grid viewport where onRowsScrollEnd is called.
   * @default 80
   */
  scrollEndThreshold: import_prop_types12.default.number,
  /**
   * If `true`, vertical borders will be displayed between cells.
   * @default false
   */
  showCellVerticalBorder: import_prop_types12.default.bool,
  /**
   * If `true`, vertical borders will be displayed between column header items.
   * @default false
   */
  showColumnVerticalBorder: import_prop_types12.default.bool,
  /**
   * Overridable components props dynamically passed to the component at rendering.
   */
  slotProps: import_prop_types12.default.object,
  /**
   * Overridable components.
   */
  slots: import_prop_types12.default.object,
  /**
   * Sorting can be processed on the server or client-side.
   * Set it to 'client' if you would like to handle sorting on the client-side.
   * Set it to 'server' if you would like to handle sorting on the server-side.
   * @default "client"
   */
  sortingMode: import_prop_types12.default.oneOf(["client", "server"]),
  /**
   * The order of the sorting sequence.
   * @default ['asc', 'desc', null]
   */
  sortingOrder: import_prop_types12.default.arrayOf(import_prop_types12.default.oneOf(["asc", "desc"])),
  /**
   * Set the sort model of the Data Grid.
   */
  sortModel: import_prop_types12.default.arrayOf(import_prop_types12.default.shape({
    field: import_prop_types12.default.string.isRequired,
    sort: import_prop_types12.default.oneOf(["asc", "desc"])
  })),
  /**
   * The function is used to split the pasted text into rows and cells.
   * @param {string} text The text pasted from the clipboard.
   * @returns {string[][] | null} A 2D array of strings. The first dimension is the rows, the second dimension is the columns.
   * @default (pastedText) => { const text = pastedText.replace(/\r?\n$/, ''); return text.split(/\r\n|\n|\r/).map((row) => row.split('\t')); }
   */
  splitClipboardPastedText: import_prop_types12.default.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types12.default.oneOfType([import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object, import_prop_types12.default.bool])), import_prop_types12.default.func, import_prop_types12.default.object]),
  /**
   * If positive, the Data Grid will throttle updates coming from `apiRef.current.updateRows` and `apiRef.current.setRows`.
   * It can be useful if you have a high update rate but do not want to do heavy work like filtering / sorting or rendering on each  individual update.
   * @default 0
   */
  throttleRowsMs: import_prop_types12.default.number,
  /**
   * If `true`, the rows will be gathered in a tree structure according to the `getTreeDataPath` prop.
   * @default false
   */
  treeData: import_prop_types12.default.bool,
  unstable_dataSource: import_prop_types12.default.shape({
    getChildrenCount: import_prop_types12.default.func,
    getGroupKey: import_prop_types12.default.func,
    getRows: import_prop_types12.default.func.isRequired,
    updateRow: import_prop_types12.default.func
  }),
  unstable_dataSourceCache: import_prop_types12.default.shape({
    clear: import_prop_types12.default.func.isRequired,
    get: import_prop_types12.default.func.isRequired,
    set: import_prop_types12.default.func.isRequired
  }),
  /**
   * Definition of the column rendered when the `unstable_listView` prop is enabled.
   */
  unstable_listColumn: import_prop_types12.default.shape({
    align: import_prop_types12.default.oneOf(["center", "left", "right"]),
    cellClassName: import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.string]),
    display: import_prop_types12.default.oneOf(["flex", "text"]),
    field: import_prop_types12.default.string.isRequired,
    renderCell: import_prop_types12.default.func
  }),
  /**
   * If `true`, displays the data in a list view.
   * Use in combination with `unstable_listColumn`.
   */
  unstable_listView: import_prop_types12.default.bool,
  unstable_onDataSourceError: import_prop_types12.default.func,
  /**
   * If `true`, the Data Grid will auto span the cells over the rows having the same value.
   * @default false
   */
  unstable_rowSpanning: import_prop_types12.default.bool,
  /**
   * If `true`, the Data Grid enables column virtualization when `getRowHeight` is set to `() => 'auto'`.
   * By default, column virtualization is disabled when dynamic row height is enabled to measure the row height correctly.
   * For datasets with a large number of columns, this can cause performance issues.
   * The downside of enabling this prop is that the row height will be estimated based the cells that are currently rendered, which can cause row height change when scrolling horizontally.
   * @default false
   */
  virtualizeColumnsWithAutoRowHeight: import_prop_types12.default.bool
} : void 0;
var DataGridPremium2 = React76.memo(DataGridPremiumRaw);

// node_modules/@mui/x-data-grid-premium/esm/hooks/utils/useKeepGroupedColumnsHidden.js
var React77 = __toESM(require_react());

// node_modules/@mui/x-data-grid-generator/services/static-data.js
var COLORS = [pink_default[500], blue_default[500], orange_default[500], red_default[500], green_default[500], lightBlue_default[500], purple_default[500]];
var STATUS_OPTIONS = ["Open", "PartiallyFilled", "Filled", "Rejected"];
var TAXCODE_OPTIONS = ["BR", "1250L", "20G", "BC45", "IGN179"];
var RATE_TYPE_OPTIONS = ["Fixed", "Floating"];
var CONTRACT_TYPE_OPTIONS = ["FP", "TM", "CR"];
var INCOTERM_OPTIONS = ["EXW (Ex Works)", "FAS (Free Alongside Ship)", "FCA (Free Carrier)", "CPT (Carriage Paid To)", "DAP (Delivered at Place)", "DPU (Delivered at Place Unloaded)", "DDP (Delivered Duty Paid)"];
var COMMODITY_OPTIONS = ["Corn", "Oats", "Rough Rice", "Soybeans", "Rapeseed", "Soybeans", "Soybean Meal", "Soybean Oil", "Wheat", "Milk", "Cocoa", "Coffee C", "Cotton No.2", "Sugar No.11", "Sugar No.14", "Frozen Concentrated Orange Juice", "Adzuki bean", "Robusta coffee"];
var CURRENCY_OPTIONS = ["USD", "GBP", "JPY", "EUR", "BRL", "MXN", "AUD", "CAD", "NZD", "ARS", "CHF", "THB", "HKD", "TRY"];
var COUNTRY_ISO_OPTIONS = [{
  value: "AD",
  code: "AD",
  label: "Andorra",
  phone: "376"
}, {
  value: "AE",
  code: "AE",
  label: "United Arab Emirates",
  phone: "971"
}, {
  value: "AF",
  code: "AF",
  label: "Afghanistan",
  phone: "93"
}, {
  value: "AG",
  code: "AG",
  label: "Antigua and Barbuda",
  phone: "1-268"
}, {
  value: "AI",
  code: "AI",
  label: "Anguilla",
  phone: "1-264"
}, {
  value: "AL",
  code: "AL",
  label: "Albania",
  phone: "355"
}, {
  value: "AM",
  code: "AM",
  label: "Armenia",
  phone: "374"
}, {
  value: "AO",
  code: "AO",
  label: "Angola",
  phone: "244"
}, {
  value: "AQ",
  code: "AQ",
  label: "Antarctica",
  phone: "672"
}, {
  value: "AR",
  code: "AR",
  label: "Argentina",
  phone: "54"
}, {
  value: "AS",
  code: "AS",
  label: "American Samoa",
  phone: "1-684"
}, {
  value: "AT",
  code: "AT",
  label: "Austria",
  phone: "43"
}, {
  value: "AU",
  code: "AU",
  label: "Australia",
  phone: "61",
  suggested: true
}, {
  value: "AW",
  code: "AW",
  label: "Aruba",
  phone: "297"
}, {
  value: "AX",
  code: "AX",
  label: "Alland Islands",
  phone: "358"
}, {
  value: "AZ",
  code: "AZ",
  label: "Azerbaijan",
  phone: "994"
}, {
  value: "BA",
  code: "BA",
  label: "Bosnia and Herzegovina",
  phone: "387"
}, {
  value: "BB",
  code: "BB",
  label: "Barbados",
  phone: "1-246"
}, {
  value: "BD",
  code: "BD",
  label: "Bangladesh",
  phone: "880"
}, {
  value: "BE",
  code: "BE",
  label: "Belgium",
  phone: "32"
}, {
  value: "BF",
  code: "BF",
  label: "Burkina Faso",
  phone: "226"
}, {
  value: "BG",
  code: "BG",
  label: "Bulgaria",
  phone: "359"
}, {
  value: "BH",
  code: "BH",
  label: "Bahrain",
  phone: "973"
}, {
  value: "BI",
  code: "BI",
  label: "Burundi",
  phone: "257"
}, {
  value: "BJ",
  code: "BJ",
  label: "Benin",
  phone: "229"
}, {
  value: "BL",
  code: "BL",
  label: "Saint Barthelemy",
  phone: "590"
}, {
  value: "BM",
  code: "BM",
  label: "Bermuda",
  phone: "1-441"
}, {
  value: "BN",
  code: "BN",
  label: "Brunei Darussalam",
  phone: "673"
}, {
  value: "BO",
  code: "BO",
  label: "Bolivia",
  phone: "591"
}, {
  value: "BR",
  code: "BR",
  label: "Brazil",
  phone: "55"
}, {
  value: "BS",
  code: "BS",
  label: "Bahamas",
  phone: "1-242"
}, {
  value: "BT",
  code: "BT",
  label: "Bhutan",
  phone: "975"
}, {
  value: "BV",
  code: "BV",
  label: "Bouvet Island",
  phone: "47"
}, {
  value: "BW",
  code: "BW",
  label: "Botswana",
  phone: "267"
}, {
  value: "BY",
  code: "BY",
  label: "Belarus",
  phone: "375"
}, {
  value: "BZ",
  code: "BZ",
  label: "Belize",
  phone: "501"
}, {
  value: "CA",
  code: "CA",
  label: "Canada",
  phone: "1",
  suggested: true
}, {
  value: "CC",
  code: "CC",
  label: "Cocos (Keeling) Islands",
  phone: "61"
}, {
  value: "CD",
  code: "CD",
  label: "Congo, Democratic Republic of the",
  phone: "243"
}, {
  value: "CF",
  code: "CF",
  label: "Central African Republic",
  phone: "236"
}, {
  value: "CG",
  code: "CG",
  label: "Congo, Republic of the",
  phone: "242"
}, {
  value: "CH",
  code: "CH",
  label: "Switzerland",
  phone: "41"
}, {
  value: "CI",
  code: "CI",
  label: "Cote d'Ivoire",
  phone: "225"
}, {
  value: "CK",
  code: "CK",
  label: "Cook Islands",
  phone: "682"
}, {
  value: "CL",
  code: "CL",
  label: "Chile",
  phone: "56"
}, {
  value: "CM",
  code: "CM",
  label: "Cameroon",
  phone: "237"
}, {
  value: "CN",
  code: "CN",
  label: "China",
  phone: "86"
}, {
  value: "CO",
  code: "CO",
  label: "Colombia",
  phone: "57"
}, {
  value: "CR",
  code: "CR",
  label: "Costa Rica",
  phone: "506"
}, {
  value: "CU",
  code: "CU",
  label: "Cuba",
  phone: "53"
}, {
  value: "CV",
  code: "CV",
  label: "Cape Verde",
  phone: "238"
}, {
  value: "CW",
  code: "CW",
  label: "Curacao",
  phone: "599"
}, {
  value: "CX",
  code: "CX",
  label: "Christmas Island",
  phone: "61"
}, {
  value: "CY",
  code: "CY",
  label: "Cyprus",
  phone: "357"
}, {
  value: "CZ",
  code: "CZ",
  label: "Czech Republic",
  phone: "420"
}, {
  value: "DE",
  code: "DE",
  label: "Germany",
  phone: "49",
  suggested: true
}, {
  value: "DJ",
  code: "DJ",
  label: "Djibouti",
  phone: "253"
}, {
  value: "DK",
  code: "DK",
  label: "Denmark",
  phone: "45"
}, {
  value: "DM",
  code: "DM",
  label: "Dominica",
  phone: "1-767"
}, {
  value: "DO",
  code: "DO",
  label: "Dominican Republic",
  phone: "1-809"
}, {
  value: "DZ",
  code: "DZ",
  label: "Algeria",
  phone: "213"
}, {
  value: "EC",
  code: "EC",
  label: "Ecuador",
  phone: "593"
}, {
  value: "EE",
  code: "EE",
  label: "Estonia",
  phone: "372"
}, {
  value: "EG",
  code: "EG",
  label: "Egypt",
  phone: "20"
}, {
  value: "EH",
  code: "EH",
  label: "Western Sahara",
  phone: "212"
}, {
  value: "ER",
  code: "ER",
  label: "Eritrea",
  phone: "291"
}, {
  value: "ES",
  code: "ES",
  label: "Spain",
  phone: "34"
}, {
  value: "ET",
  code: "ET",
  label: "Ethiopia",
  phone: "251"
}, {
  value: "FI",
  code: "FI",
  label: "Finland",
  phone: "358"
}, {
  value: "FJ",
  code: "FJ",
  label: "Fiji",
  phone: "679"
}, {
  value: "FK",
  code: "FK",
  label: "Falkland Islands (Malvinas)",
  phone: "500"
}, {
  value: "FM",
  code: "FM",
  label: "Micronesia, Federated States of",
  phone: "691"
}, {
  value: "FO",
  code: "FO",
  label: "Faroe Islands",
  phone: "298"
}, {
  value: "FR",
  code: "FR",
  label: "France",
  phone: "33",
  suggested: true
}, {
  value: "GA",
  code: "GA",
  label: "Gabon",
  phone: "241"
}, {
  value: "GB",
  code: "GB",
  label: "United Kingdom",
  phone: "44"
}, {
  value: "GD",
  code: "GD",
  label: "Grenada",
  phone: "1-473"
}, {
  value: "GE",
  code: "GE",
  label: "Georgia",
  phone: "995"
}, {
  value: "GF",
  code: "GF",
  label: "French Guiana",
  phone: "594"
}, {
  value: "GG",
  code: "GG",
  label: "Guernsey",
  phone: "44"
}, {
  value: "GH",
  code: "GH",
  label: "Ghana",
  phone: "233"
}, {
  value: "GI",
  code: "GI",
  label: "Gibraltar",
  phone: "350"
}, {
  value: "GL",
  code: "GL",
  label: "Greenland",
  phone: "299"
}, {
  value: "GM",
  code: "GM",
  label: "Gambia",
  phone: "220"
}, {
  value: "GN",
  code: "GN",
  label: "Guinea",
  phone: "224"
}, {
  value: "GP",
  code: "GP",
  label: "Guadeloupe",
  phone: "590"
}, {
  value: "GQ",
  code: "GQ",
  label: "Equatorial Guinea",
  phone: "240"
}, {
  value: "GR",
  code: "GR",
  label: "Greece",
  phone: "30"
}, {
  value: "GS",
  code: "GS",
  label: "South Georgia and the South Sandwich Islands",
  phone: "500"
}, {
  value: "GT",
  code: "GT",
  label: "Guatemala",
  phone: "502"
}, {
  value: "GU",
  code: "GU",
  label: "Guam",
  phone: "1-671"
}, {
  value: "GW",
  code: "GW",
  label: "Guinea-Bissau",
  phone: "245"
}, {
  value: "GY",
  code: "GY",
  label: "Guyana",
  phone: "592"
}, {
  value: "HK",
  code: "HK",
  label: "Hong Kong",
  phone: "852"
}, {
  value: "HM",
  code: "HM",
  label: "Heard Island and McDonald Islands",
  phone: "672"
}, {
  value: "HN",
  code: "HN",
  label: "Honduras",
  phone: "504"
}, {
  value: "HR",
  code: "HR",
  label: "Croatia",
  phone: "385"
}, {
  value: "HT",
  code: "HT",
  label: "Haiti",
  phone: "509"
}, {
  value: "HU",
  code: "HU",
  label: "Hungary",
  phone: "36"
}, {
  value: "ID",
  code: "ID",
  label: "Indonesia",
  phone: "62"
}, {
  value: "IE",
  code: "IE",
  label: "Ireland",
  phone: "353"
}, {
  value: "IL",
  code: "IL",
  label: "Israel",
  phone: "972"
}, {
  value: "IM",
  code: "IM",
  label: "Isle of Man",
  phone: "44"
}, {
  value: "IN",
  code: "IN",
  label: "India",
  phone: "91"
}, {
  value: "IO",
  code: "IO",
  label: "British Indian Ocean Territory",
  phone: "246"
}, {
  value: "IQ",
  code: "IQ",
  label: "Iraq",
  phone: "964"
}, {
  value: "IR",
  code: "IR",
  label: "Iran, Islamic Republic of",
  phone: "98"
}, {
  value: "IS",
  code: "IS",
  label: "Iceland",
  phone: "354"
}, {
  value: "IT",
  code: "IT",
  label: "Italy",
  phone: "39"
}, {
  value: "JE",
  code: "JE",
  label: "Jersey",
  phone: "44"
}, {
  value: "JM",
  code: "JM",
  label: "Jamaica",
  phone: "1-876"
}, {
  value: "JO",
  code: "JO",
  label: "Jordan",
  phone: "962"
}, {
  value: "JP",
  code: "JP",
  label: "Japan",
  phone: "81",
  suggested: true
}, {
  value: "KE",
  code: "KE",
  label: "Kenya",
  phone: "254"
}, {
  value: "KG",
  code: "KG",
  label: "Kyrgyzstan",
  phone: "996"
}, {
  value: "KH",
  code: "KH",
  label: "Cambodia",
  phone: "855"
}, {
  value: "KI",
  code: "KI",
  label: "Kiribati",
  phone: "686"
}, {
  value: "KM",
  code: "KM",
  label: "Comoros",
  phone: "269"
}, {
  value: "KN",
  code: "KN",
  label: "Saint Kitts and Nevis",
  phone: "1-869"
}, {
  value: "KP",
  code: "KP",
  label: "Korea, Democratic People's Republic of",
  phone: "850"
}, {
  value: "KR",
  code: "KR",
  label: "Korea, Republic of",
  phone: "82"
}, {
  value: "KW",
  code: "KW",
  label: "Kuwait",
  phone: "965"
}, {
  value: "KY",
  code: "KY",
  label: "Cayman Islands",
  phone: "1-345"
}, {
  value: "KZ",
  code: "KZ",
  label: "Kazakhstan",
  phone: "7"
}, {
  value: "LA",
  code: "LA",
  label: "Lao People's Democratic Republic",
  phone: "856"
}, {
  value: "LB",
  code: "LB",
  label: "Lebanon",
  phone: "961"
}, {
  value: "LC",
  code: "LC",
  label: "Saint Lucia",
  phone: "1-758"
}, {
  value: "LI",
  code: "LI",
  label: "Liechtenstein",
  phone: "423"
}, {
  value: "LK",
  code: "LK",
  label: "Sri Lanka",
  phone: "94"
}, {
  value: "LR",
  code: "LR",
  label: "Liberia",
  phone: "231"
}, {
  value: "LS",
  code: "LS",
  label: "Lesotho",
  phone: "266"
}, {
  value: "LT",
  code: "LT",
  label: "Lithuania",
  phone: "370"
}, {
  value: "LU",
  code: "LU",
  label: "Luxembourg",
  phone: "352"
}, {
  value: "LV",
  code: "LV",
  label: "Latvia",
  phone: "371"
}, {
  value: "LY",
  code: "LY",
  label: "Libya",
  phone: "218"
}, {
  value: "MA",
  code: "MA",
  label: "Morocco",
  phone: "212"
}, {
  value: "MC",
  code: "MC",
  label: "Monaco",
  phone: "377"
}, {
  value: "MD",
  code: "MD",
  label: "Moldova, Republic of",
  phone: "373"
}, {
  value: "ME",
  code: "ME",
  label: "Montenegro",
  phone: "382"
}, {
  value: "MF",
  code: "MF",
  label: "Saint Martin (French part)",
  phone: "590"
}, {
  value: "MG",
  code: "MG",
  label: "Madagascar",
  phone: "261"
}, {
  value: "MH",
  code: "MH",
  label: "Marshall Islands",
  phone: "692"
}, {
  value: "MK",
  code: "MK",
  label: "North Macedonia",
  phone: "389"
}, {
  value: "ML",
  code: "ML",
  label: "Mali",
  phone: "223"
}, {
  value: "MM",
  code: "MM",
  label: "Myanmar",
  phone: "95"
}, {
  value: "MN",
  code: "MN",
  label: "Mongolia",
  phone: "976"
}, {
  value: "MO",
  code: "MO",
  label: "Macao",
  phone: "853"
}, {
  value: "MP",
  code: "MP",
  label: "Northern Mariana Islands",
  phone: "1-670"
}, {
  value: "MQ",
  code: "MQ",
  label: "Martinique",
  phone: "596"
}, {
  value: "MR",
  code: "MR",
  label: "Mauritania",
  phone: "222"
}, {
  value: "MS",
  code: "MS",
  label: "Montserrat",
  phone: "1-664"
}, {
  value: "MT",
  code: "MT",
  label: "Malta",
  phone: "356"
}, {
  value: "MU",
  code: "MU",
  label: "Mauritius",
  phone: "230"
}, {
  value: "MV",
  code: "MV",
  label: "Maldives",
  phone: "960"
}, {
  value: "MW",
  code: "MW",
  label: "Malawi",
  phone: "265"
}, {
  value: "MX",
  code: "MX",
  label: "Mexico",
  phone: "52"
}, {
  value: "MY",
  code: "MY",
  label: "Malaysia",
  phone: "60"
}, {
  value: "MZ",
  code: "MZ",
  label: "Mozambique",
  phone: "258"
}, {
  value: "NA",
  code: "NA",
  label: "Namibia",
  phone: "264"
}, {
  value: "NC",
  code: "NC",
  label: "New Caledonia",
  phone: "687"
}, {
  value: "NE",
  code: "NE",
  label: "Niger",
  phone: "227"
}, {
  value: "NF",
  code: "NF",
  label: "Norfolk Island",
  phone: "672"
}, {
  value: "NG",
  code: "NG",
  label: "Nigeria",
  phone: "234"
}, {
  value: "NI",
  code: "NI",
  label: "Nicaragua",
  phone: "505"
}, {
  value: "NL",
  code: "NL",
  label: "Netherlands",
  phone: "31"
}, {
  value: "NO",
  code: "NO",
  label: "Norway",
  phone: "47"
}, {
  value: "NP",
  code: "NP",
  label: "Nepal",
  phone: "977"
}, {
  value: "NR",
  code: "NR",
  label: "Nauru",
  phone: "674"
}, {
  value: "NU",
  code: "NU",
  label: "Niue",
  phone: "683"
}, {
  value: "NZ",
  code: "NZ",
  label: "New Zealand",
  phone: "64"
}, {
  value: "OM",
  code: "OM",
  label: "Oman",
  phone: "968"
}, {
  value: "PA",
  code: "PA",
  label: "Panama",
  phone: "507"
}, {
  value: "PE",
  code: "PE",
  label: "Peru",
  phone: "51"
}, {
  value: "PF",
  code: "PF",
  label: "French Polynesia",
  phone: "689"
}, {
  value: "PG",
  code: "PG",
  label: "Papua New Guinea",
  phone: "675"
}, {
  value: "PH",
  code: "PH",
  label: "Philippines",
  phone: "63"
}, {
  value: "PK",
  code: "PK",
  label: "Pakistan",
  phone: "92"
}, {
  value: "PL",
  code: "PL",
  label: "Poland",
  phone: "48"
}, {
  value: "PM",
  code: "PM",
  label: "Saint Pierre and Miquelon",
  phone: "508"
}, {
  value: "PN",
  code: "PN",
  label: "Pitcairn",
  phone: "870"
}, {
  value: "PR",
  code: "PR",
  label: "Puerto Rico",
  phone: "1"
}, {
  value: "PS",
  code: "PS",
  label: "Palestine, State of",
  phone: "970"
}, {
  value: "PT",
  code: "PT",
  label: "Portugal",
  phone: "351"
}, {
  value: "PW",
  code: "PW",
  label: "Palau",
  phone: "680"
}, {
  value: "PY",
  code: "PY",
  label: "Paraguay",
  phone: "595"
}, {
  value: "QA",
  code: "QA",
  label: "Qatar",
  phone: "974"
}, {
  value: "RE",
  code: "RE",
  label: "Reunion",
  phone: "262"
}, {
  value: "RO",
  code: "RO",
  label: "Romania",
  phone: "40"
}, {
  value: "RS",
  code: "RS",
  label: "Serbia",
  phone: "381"
}, {
  value: "RU",
  code: "RU",
  label: "Russian Federation",
  phone: "7"
}, {
  value: "RW",
  code: "RW",
  label: "Rwanda",
  phone: "250"
}, {
  value: "SA",
  code: "SA",
  label: "Saudi Arabia",
  phone: "966"
}, {
  value: "SB",
  code: "SB",
  label: "Solomon Islands",
  phone: "677"
}, {
  value: "SC",
  code: "SC",
  label: "Seychelles",
  phone: "248"
}, {
  value: "SD",
  code: "SD",
  label: "Sudan",
  phone: "249"
}, {
  value: "SE",
  code: "SE",
  label: "Sweden",
  phone: "46"
}, {
  value: "SG",
  code: "SG",
  label: "Singapore",
  phone: "65"
}, {
  value: "SH",
  code: "SH",
  label: "Saint Helena",
  phone: "290"
}, {
  value: "SI",
  code: "SI",
  label: "Slovenia",
  phone: "386"
}, {
  value: "SJ",
  code: "SJ",
  label: "Svalbard and Jan Mayen",
  phone: "47"
}, {
  value: "SK",
  code: "SK",
  label: "Slovakia",
  phone: "421"
}, {
  value: "SL",
  code: "SL",
  label: "Sierra Leone",
  phone: "232"
}, {
  value: "SM",
  code: "SM",
  label: "San Marino",
  phone: "378"
}, {
  value: "SN",
  code: "SN",
  label: "Senegal",
  phone: "221"
}, {
  value: "SO",
  code: "SO",
  label: "Somalia",
  phone: "252"
}, {
  value: "SR",
  code: "SR",
  label: "Suriname",
  phone: "597"
}, {
  value: "SS",
  code: "SS",
  label: "South Sudan",
  phone: "211"
}, {
  value: "ST",
  code: "ST",
  label: "Sao Tome and Principe",
  phone: "239"
}, {
  value: "SV",
  code: "SV",
  label: "El Salvador",
  phone: "503"
}, {
  value: "SX",
  code: "SX",
  label: "Sint Maarten (Dutch part)",
  phone: "1-721"
}, {
  value: "SY",
  code: "SY",
  label: "Syrian Arab Republic",
  phone: "963"
}, {
  value: "SZ",
  code: "SZ",
  label: "Swaziland",
  phone: "268"
}, {
  value: "TC",
  code: "TC",
  label: "Turks and Caicos Islands",
  phone: "1-649"
}, {
  value: "TD",
  code: "TD",
  label: "Chad",
  phone: "235"
}, {
  value: "TF",
  code: "TF",
  label: "French Southern Territories",
  phone: "262"
}, {
  value: "TG",
  code: "TG",
  label: "Togo",
  phone: "228"
}, {
  value: "TH",
  code: "TH",
  label: "Thailand",
  phone: "66"
}, {
  value: "TJ",
  code: "TJ",
  label: "Tajikistan",
  phone: "992"
}, {
  value: "TK",
  code: "TK",
  label: "Tokelau",
  phone: "690"
}, {
  value: "TL",
  code: "TL",
  label: "Timor-Leste",
  phone: "670"
}, {
  value: "TM",
  code: "TM",
  label: "Turkmenistan",
  phone: "993"
}, {
  value: "TN",
  code: "TN",
  label: "Tunisia",
  phone: "216"
}, {
  value: "TO",
  code: "TO",
  label: "Tonga",
  phone: "676"
}, {
  value: "TR",
  code: "TR",
  label: "Turkey",
  phone: "90"
}, {
  value: "TT",
  code: "TT",
  label: "Trinidad and Tobago",
  phone: "1-868"
}, {
  value: "TV",
  code: "TV",
  label: "Tuvalu",
  phone: "688"
}, {
  value: "TW",
  code: "TW",
  label: "Taiwan, Province of China",
  phone: "886"
}, {
  value: "TZ",
  code: "TZ",
  label: "United Republic of Tanzania",
  phone: "255"
}, {
  value: "UA",
  code: "UA",
  label: "Ukraine",
  phone: "380"
}, {
  value: "UG",
  code: "UG",
  label: "Uganda",
  phone: "256"
}, {
  value: "US",
  code: "US",
  label: "United States",
  phone: "1",
  suggested: true
}, {
  value: "UY",
  code: "UY",
  label: "Uruguay",
  phone: "598"
}, {
  value: "UZ",
  code: "UZ",
  label: "Uzbekistan",
  phone: "998"
}, {
  value: "VA",
  code: "VA",
  label: "Holy See (Vatican City State)",
  phone: "379"
}, {
  value: "VC",
  code: "VC",
  label: "Saint Vincent and the Grenadines",
  phone: "1-784"
}, {
  value: "VE",
  code: "VE",
  label: "Venezuela",
  phone: "58"
}, {
  value: "VG",
  code: "VG",
  label: "British Virgin Islands",
  phone: "1-284"
}, {
  value: "VI",
  code: "VI",
  label: "US Virgin Islands",
  phone: "1-340"
}, {
  value: "VN",
  code: "VN",
  label: "Vietnam",
  phone: "84"
}, {
  value: "VU",
  code: "VU",
  label: "Vanuatu",
  phone: "678"
}, {
  value: "WF",
  code: "WF",
  label: "Wallis and Futuna",
  phone: "681"
}, {
  value: "WS",
  code: "WS",
  label: "Samoa",
  phone: "685"
}, {
  value: "XK",
  code: "XK",
  label: "Kosovo",
  phone: "383"
}, {
  value: "YE",
  code: "YE",
  label: "Yemen",
  phone: "967"
}, {
  value: "YT",
  code: "YT",
  label: "Mayotte",
  phone: "262"
}, {
  value: "ZA",
  code: "ZA",
  label: "South Africa",
  phone: "27"
}, {
  value: "ZM",
  code: "ZM",
  label: "Zambia",
  phone: "260"
}, {
  value: "ZW",
  code: "ZW",
  label: "Zimbabwe",
  phone: "263"
}];
var COUNTRY_ISO_OPTIONS_SORTED = [...COUNTRY_ISO_OPTIONS].sort((v1, v2) => v1.label.localeCompare(v2.label));

// node_modules/@mui/x-data-grid-generator/renderer/renderEditCurrency.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime());
var StyledAutocomplete = styled_default2(Autocomplete_default)(({
  theme
}) => ({
  height: "100%",
  [`& .${autocompleteClasses_default.inputRoot}`]: _extends({}, theme.typography.body2, {
    padding: "1px 0",
    height: "100%",
    "& input": {
      padding: "0 16px",
      height: "100%"
    }
  })
}));
function EditCurrency(props) {
  const {
    id,
    value,
    field
  } = props;
  const apiRef2 = useGridApiContext3();
  const handleChange = React78.useCallback(async (event, newValue) => {
    await apiRef2.current.setEditCellValue({
      id,
      field,
      value: newValue.toUpperCase()
    }, event);
    apiRef2.current.stopCellEditMode({
      id,
      field
    });
  }, [apiRef2, field, id]);
  return (0, import_jsx_runtime50.jsx)(StyledAutocomplete, {
    value,
    onChange: handleChange,
    options: CURRENCY_OPTIONS,
    autoHighlight: true,
    fullWidth: true,
    open: true,
    disableClearable: true,
    renderOption: (optionProps, option) => (0, import_jsx_runtime50.jsxs)(Box_default, _extends({
      component: "li",
      sx: {
        "& > img": {
          mr: 1.5,
          flexShrink: 0
        }
      }
    }, optionProps, {
      children: [(0, import_jsx_runtime50.jsx)("img", {
        loading: "lazy",
        width: "20",
        src: `https://flagcdn.com/w20/${option.slice(0, -1).toLowerCase()}.png`,
        srcSet: `https://flagcdn.com/w40/${option.slice(0, -1).toLowerCase()}.png 2x`,
        alt: ""
      }), option]
    })),
    renderInput: (params) => (0, import_jsx_runtime50.jsx)(InputBase_default, _extends({
      autoFocus: true,
      fullWidth: true,
      id: params.id,
      inputProps: _extends({}, params.inputProps, {
        autoComplete: "new-password"
        // disable autocomplete and autofill
      })
    }, params.InputProps))
  });
}
function renderEditCurrency(params) {
  return (0, import_jsx_runtime50.jsx)(EditCurrency, _extends({}, params));
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEditProgress.js
var React79 = __toESM(require_react());
var import_jsx_runtime51 = __toESM(require_jsx_runtime());
var StyledSlider = styled_default2(Slider_default)(({
  theme
}) => ({
  display: "flex",
  height: "100%",
  width: "100%",
  alignItems: "center",
  justifyContent: "center",
  padding: 0,
  borderRadius: 0,
  [`& .${sliderClasses_default.rail}`]: {
    height: "100%",
    backgroundColor: "transparent"
  },
  [`& .${sliderClasses_default.track}`]: {
    height: "100%",
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shorter
    }),
    "&.low": {
      backgroundColor: "#f44336"
    },
    "&.medium": {
      backgroundColor: "#efbb5aa3"
    },
    "&.high": {
      backgroundColor: "#088208a3"
    }
  },
  [`& .${sliderClasses_default.thumb}`]: {
    height: "100%",
    width: 5,
    borderRadius: 0,
    marginTop: 0,
    backgroundColor: alpha("#000000", 0.2)
  }
}));
function ValueLabelComponent(props) {
  const {
    children,
    open,
    value
  } = props;
  return (0, import_jsx_runtime51.jsx)(Tooltip_default, {
    open,
    enterTouchDelay: 0,
    placement: "top",
    title: value,
    children
  });
}
function EditProgress(props) {
  const {
    id,
    value,
    field
  } = props;
  const [valueState, setValueState] = React79.useState(Number(value));
  const apiRef2 = useGridApiContext3();
  const updateCellEditProps = React79.useCallback((newValue) => {
    apiRef2.current.setEditCellValue({
      id,
      field,
      value: newValue
    });
  }, [apiRef2, field, id]);
  const debouncedUpdateCellEditProps = React79.useMemo(() => debounce(updateCellEditProps, 60), [updateCellEditProps]);
  const handleChange = (event, newValue) => {
    setValueState(newValue);
    debouncedUpdateCellEditProps(newValue);
  };
  React79.useEffect(() => {
    setValueState(Number(value));
  }, [value]);
  const handleRef = (element) => {
    if (element) {
      element.querySelector('[type="range"]').focus();
    }
  };
  return (0, import_jsx_runtime51.jsx)(StyledSlider, {
    ref: handleRef,
    classes: {
      track: clsx_default(valueState < 0.3 && "low", valueState >= 0.3 && valueState <= 0.7 && "medium", valueState > 0.7 && "high")
    },
    value: valueState,
    max: 1,
    step: 1e-5,
    onChange: handleChange,
    components: {
      ValueLabel: ValueLabelComponent
    },
    valueLabelDisplay: "auto",
    valueLabelFormat: (newValue) => `${(newValue * 100).toLocaleString()} %`
  });
}
function renderEditProgress(params) {
  return (0, import_jsx_runtime51.jsx)(EditProgress, _extends({}, params));
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEditStatus.js
var React80 = __toESM(require_react());
var import_jsx_runtime52 = __toESM(require_jsx_runtime());
function EditStatus(props) {
  const {
    id,
    value,
    field
  } = props;
  const rootProps = useGridRootProps3();
  const apiRef2 = useGridApiContext3();
  const handleChange = async (event) => {
    const isValid = await apiRef2.current.setEditCellValue({
      id,
      field,
      value: event.target.value
    });
    if (isValid && rootProps.editMode === GridEditModes.Cell) {
      apiRef2.current.stopCellEditMode({
        id,
        field,
        cellToFocusAfter: "below"
      });
    }
  };
  const handleClose = (event, reason) => {
    if (reason === "backdropClick") {
      apiRef2.current.stopCellEditMode({
        id,
        field,
        ignoreModifications: true
      });
    }
  };
  return (0, import_jsx_runtime52.jsx)(Select_default, {
    value,
    onChange: handleChange,
    MenuProps: {
      onClose: handleClose
    },
    sx: {
      height: "100%",
      "& .MuiSelect-select": {
        display: "flex",
        alignItems: "center",
        pl: 1
      }
    },
    autoFocus: true,
    fullWidth: true,
    open: true,
    children: STATUS_OPTIONS.map((option) => {
      let IconComponent = null;
      if (option === "Rejected") {
        IconComponent = ReportProblem_default;
      } else if (option === "Open") {
        IconComponent = Info_default;
      } else if (option === "PartiallyFilled") {
        IconComponent = Autorenew_default;
      } else if (option === "Filled") {
        IconComponent = Done_default;
      }
      let label = option;
      if (option === "PartiallyFilled") {
        label = "Partially Filled";
      }
      return (0, import_jsx_runtime52.jsxs)(MenuItem_default, {
        value: option,
        children: [(0, import_jsx_runtime52.jsx)(ListItemIcon_default, {
          sx: {
            minWidth: 36
          },
          children: (0, import_jsx_runtime52.jsx)(IconComponent, {
            fontSize: "small"
          })
        }), (0, import_jsx_runtime52.jsx)(ListItemText_default, {
          primary: label,
          sx: {
            overflow: "hidden"
          }
        })]
      }, option);
    })
  });
}
function renderEditStatus(params) {
  return (0, import_jsx_runtime52.jsx)(EditStatus, _extends({}, params));
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEditIncoterm.js
var React81 = __toESM(require_react());
var import_jsx_runtime53 = __toESM(require_jsx_runtime());
function EditIncoterm(props) {
  const {
    id,
    value,
    field
  } = props;
  const apiRef2 = useGridApiContext3();
  const handleChange = async (event) => {
    await apiRef2.current.setEditCellValue({
      id,
      field,
      value: event.target.value
    }, event);
    apiRef2.current.stopCellEditMode({
      id,
      field
    });
  };
  const handleClose = (event, reason) => {
    if (reason === "backdropClick") {
      apiRef2.current.stopCellEditMode({
        id,
        field
      });
    }
  };
  return (0, import_jsx_runtime53.jsx)(Select_default, {
    value,
    onChange: handleChange,
    MenuProps: {
      onClose: handleClose
    },
    sx: {
      height: "100%",
      "& .MuiSelect-select": {
        display: "flex",
        alignItems: "center",
        pl: 1
      }
    },
    autoFocus: true,
    fullWidth: true,
    open: true,
    children: INCOTERM_OPTIONS.map((option) => {
      const tooltip = option.slice(option.indexOf("(") + 1, option.indexOf(")"));
      const code = option.slice(0, option.indexOf("(")).trim();
      return (0, import_jsx_runtime53.jsxs)(MenuItem_default, {
        value: option,
        children: [(0, import_jsx_runtime53.jsx)(ListItemIcon_default, {
          sx: {
            minWidth: 36
          },
          children: code
        }), (0, import_jsx_runtime53.jsx)(ListItemText_default, {
          primary: tooltip,
          sx: {
            overflow: "hidden"
          }
        })]
      }, option);
    })
  });
}
function renderEditIncoterm(params) {
  return (0, import_jsx_runtime53.jsx)(EditIncoterm, _extends({}, params));
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEditRating.js
var React82 = __toESM(require_react());
var import_jsx_runtime54 = __toESM(require_jsx_runtime());
function EditRating(props) {
  const {
    id,
    value,
    field
  } = props;
  const apiRef2 = useGridApiContext3();
  const changedThroughKeyboard = React82.useRef(false);
  const handleChange = async (event) => {
    await apiRef2.current.setEditCellValue({
      id,
      field,
      value: Number(event.target.value)
    }, event);
    if (!changedThroughKeyboard.current) {
      apiRef2.current.stopCellEditMode({
        id,
        field
      });
    }
    changedThroughKeyboard.current = false;
  };
  const handleRef = (element) => {
    if (element) {
      if (value !== 0) {
        element.querySelector(`input[value="${value}"]`).focus();
      } else {
        element.querySelector('input[value=""]').focus();
      }
    }
  };
  const handleKeyDown = (event) => {
    if (event.key.startsWith("Arrow")) {
      changedThroughKeyboard.current = true;
    } else {
      changedThroughKeyboard.current = false;
    }
  };
  return (0, import_jsx_runtime54.jsxs)(Box_default, {
    sx: {
      display: "flex",
      alignItems: "center",
      lineHeight: "24px",
      color: "text.secondary",
      mr: 1
    },
    children: [(0, import_jsx_runtime54.jsx)(Rating_default, {
      ref: handleRef,
      name: "rating",
      value: Number(value),
      precision: 1,
      onChange: handleChange,
      sx: {
        mr: 1
      },
      onKeyDown: handleKeyDown
    }), Number(value)]
  });
}
function renderEditRating(params) {
  return (0, import_jsx_runtime54.jsx)(EditRating, _extends({}, params));
}

// node_modules/@mui/x-data-grid-generator/renderer/renderEditCountry.js
var React83 = __toESM(require_react());
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
var StyledAutocomplete2 = styled_default2(Autocomplete_default)(({
  theme
}) => ({
  height: "100%",
  [`& .${autocompleteClasses_default.inputRoot}`]: _extends({}, theme.typography.body2, {
    padding: "1px 0",
    height: "100%",
    "& input": {
      padding: "0 16px",
      height: "100%"
    }
  })
}));
function EditCountry(props) {
  const {
    id,
    value,
    field
  } = props;
  const apiRef2 = useGridApiContext3();
  const handleChange = React83.useCallback(async (event, newValue) => {
    await apiRef2.current.setEditCellValue({
      id,
      field,
      value: newValue
    }, event);
    apiRef2.current.stopCellEditMode({
      id,
      field
    });
  }, [apiRef2, field, id]);
  return (0, import_jsx_runtime55.jsx)(StyledAutocomplete2, {
    value,
    onChange: handleChange,
    options: COUNTRY_ISO_OPTIONS,
    getOptionLabel: (option) => option.label,
    autoHighlight: true,
    fullWidth: true,
    open: true,
    disableClearable: true,
    renderOption: (optionProps, option) => (0, import_react.createElement)(Box_default, _extends({
      component: "li",
      sx: {
        "& > img": {
          mr: 1.5,
          flexShrink: 0
        }
      }
    }, optionProps, {
      key: option.code
    }), (0, import_jsx_runtime55.jsx)("img", {
      loading: "lazy",
      width: "20",
      src: `https://flagcdn.com/w20/${option.code.toLowerCase()}.png`,
      srcSet: `https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`,
      alt: ""
    }), option.label),
    renderInput: (params) => (0, import_jsx_runtime55.jsx)(InputBase_default, _extends({
      autoFocus: true,
      fullWidth: true,
      id: params.id,
      inputProps: _extends({}, params.inputProps, {
        autoComplete: "new-password"
        // disable autocomplete and autofill
      })
    }, params.InputProps))
  });
}
function renderEditCountry(params) {
  return (0, import_jsx_runtime55.jsx)(EditCountry, _extends({}, params));
}

// node_modules/@mui/x-data-grid-generator/services/random-generator.js
var import_chance = __toESM(require_chance());
var chance2;
var chanceGuid;
if (typeof DISABLE_CHANCE_RANDOM !== "undefined" && DISABLE_CHANCE_RANDOM) {
  chance2 = new import_chance.Chance(() => 0.5);
  chanceGuid = new import_chance.Chance(42);
} else {
  chance2 = new import_chance.Chance();
  chanceGuid = chance2;
}
var uniquenessHandler = (generator) => (data, context) => {
  const rawValue = generator(data, context);
  if (!context.values) {
    return rawValue;
  }
  const valueCount = (context.values[rawValue] ?? 0) + 1;
  context.values[rawValue] = valueCount + 1;
  if (valueCount > 1) {
    return `${rawValue} ${valueCount}`;
  }
  return rawValue;
};
function dateFuture(years, refDate) {
  let date = /* @__PURE__ */ new Date();
  if (typeof refDate !== "undefined") {
    date = new Date(Date.parse(refDate));
  }
  const range = {
    min: 1e3,
    max: (years || 1) * 365 * 24 * 3600 * 1e3
  };
  const past = date.getTime() + chance2.integer(range);
  date.setTime(past);
  return date;
}
function dateRecent(days, refDate) {
  let date = /* @__PURE__ */ new Date();
  if (typeof refDate !== "undefined") {
    date = new Date(Date.parse(refDate));
  }
  const range = {
    min: 1e3,
    max: (days || 1) * 24 * 3600 * 1e3
  };
  const past = date.getTime() - chance2.integer(range);
  date.setTime(past);
  return date;
}
function datePast(years, refDate) {
  let date = /* @__PURE__ */ new Date();
  if (typeof refDate !== "undefined") {
    date = new Date(Date.parse(refDate));
  }
  const range = {
    min: 1e3,
    max: (years || 1) * 365 * 24 * 3600 * 1e3
  };
  const past = date.getTime() - chance2.integer(range);
  date.setTime(past);
  return date;
}
var random = (min, max) => chance2.floating({
  min,
  max
});
var randomInt = (min, max) => chance2.integer({
  min,
  max
});
var randomPrice = (min = 0, max = 1e5) => Number(random(min, max).toFixed(2));
var randomRate = () => random(0, 1);
var randomDate = (start, end) => new Date(start.getTime() + chance2.floating({
  min: 0,
  max: 1
}) * (end.getTime() - start.getTime()));
var randomArrayItem = (arr) => arr[randomInt(0, arr.length - 1)];
var randomBoolean = () => randomArrayItem([true, false]);
var randomColor = () => randomArrayItem(COLORS);
var randomId = () => chanceGuid.guid();
var randomDesk = () => `D-${chance2.integer({
  min: 0,
  max: 1e4
})}`;
var randomCommodity = () => randomArrayItem(COMMODITY_OPTIONS);
var randomTraderName = () => chance2.name();
var randomUserName = () => chance2.twitter();
var randomEmail = () => chance2.email();
var randomUrl = () => chance2.url();
var randomPhoneNumber = () => chance2.phone();
var randomUnitPrice = () => randomPrice(1, 100);
var randomUnitPriceCurrency = () => randomArrayItem(CURRENCY_OPTIONS);
var randomQuantity = () => randomInt(1e3, 1e5);
var randomFeeRate = () => Number(random(0.1, 0.4).toFixed(3));
var randomIncoterm = () => randomArrayItem(INCOTERM_OPTIONS);
var randomStatusOptions = () => randomArrayItem(STATUS_OPTIONS);
var randomPnL = () => random(-1e8, 1e8);
var randomMaturityDate = () => dateFuture();
var randomTradeDate = () => dateRecent();
var randomBrokerId = () => chance2.guid();
var randomCompanyName = () => chance2.company();
var randomCountry = () => randomArrayItem(COUNTRY_ISO_OPTIONS);
var randomCurrency = () => randomArrayItem(CURRENCY_OPTIONS);
var randomAddress = () => chance2.address();
var randomCity = () => chance2.city();
var randomTaxCode = () => randomArrayItem(TAXCODE_OPTIONS);
var randomContractType = () => randomArrayItem(CONTRACT_TYPE_OPTIONS);
var randomRateType = () => randomArrayItem(RATE_TYPE_OPTIONS);
var randomCreatedDate = () => datePast();
var randomUpdatedDate = () => dateRecent();
var randomJobTitle = () => chance2.profession();
var randomRating = () => randomInt(1, 5);
var randomName = uniquenessHandler(() => chance2.name());
var generateFilledQuantity = (data) => Number((data.quantity * randomRate()).toFixed()) / data.quantity;
var generateIsFilled = (data) => data.quantity === data.filledQuantity;

// node_modules/@mui/x-data-grid-generator/services/asyncWorker.js
function asyncWorker({
  work,
  tasks,
  done
}) {
  const myNonEssentialWork = (deadline) => {
    while ((deadline.timeRemaining() > 0 || deadline.didTimeout) && tasks.current > 0) {
      work();
    }
    if (tasks.current > 0) {
      requestIdleCallback(myNonEssentialWork);
    } else {
      done();
    }
  };
  if (typeof requestIdleCallback === "function" && !requestIdleCallback.clock) {
    requestIdleCallback(myNonEssentialWork);
  } else {
    while (tasks.current > 0) {
      work();
    }
    done();
  }
}

// node_modules/@mui/x-data-grid-generator/services/real-data-service.js
function getRealGridData(rowLength, columns) {
  return new Promise((resolve) => {
    const tasks = {
      current: rowLength
    };
    const rows = [];
    const indexedValues = {};
    function work() {
      const row = {};
      for (let j = 0; j < columns.length; j += 1) {
        const column = columns[j];
        if (column.generateData) {
          const context = {};
          if (column.dataGeneratorUniquenessEnabled) {
            let fieldValues = indexedValues[column.field];
            if (!fieldValues) {
              fieldValues = {};
              indexedValues[column.field] = fieldValues;
            }
            context.values = fieldValues;
          }
          row[column.field] = column.generateData(row, context);
        }
      }
      rows.push(row);
      tasks.current -= 1;
    }
    const columnVisibilityModel = {};
    columns.forEach((col) => {
      if (col.hide) {
        columnVisibilityModel[col.field] = false;
      }
    });
    asyncWorker({
      work,
      done: () => resolve({
        columns,
        rows,
        initialState: {
          columns: {
            columnVisibilityModel
          }
        }
      }),
      tasks
    });
  });
}

// node_modules/@mui/x-data-grid-generator/services/basic-data-service.js
var currencyPairs = ["USDGBP", "USDEUR", "GBPEUR", "JPYUSD", "MXNUSD", "BTCUSD", "USDCAD", "EURJPY", "EURUSD", "EURCHF", "USDCHF", "EURGBP", "GBPUSD", "AUDCAD", "NZDUSD", "GBPCHF", "AUDUSD", "GBPJPY", "USDJPY", "CHFJPY", "EURCAD", "AUDJPY", "EURAUD", "AUDNZD", "CADEUR", "CHFMXN", "ETHUSD", "BCHUSD", "ETHBTC", "XRPUSD", "XRPBTC", "USDLTC", "USDXRP", "USDDSH", "USDBCH", "JPYEUR", "JPYUSD", "JPYGBP", "JPYCAD", "JPYCHF", "JPYAUD", "JPYNZD", "JPYSGD", "JPYNOK", "JPYRUB", "JPYSEK", "JPYTRY", "JPYZAR", "JPYHKD", "JPYCNH", "JPYDKK", "JPYMXN", "JPYPLN", "JPYXAG", "JPYXAU", "JPYBTC", "JPYETH", "JPYLTC", "JPYXRP", "JPYDSH", "JPYBCH", "GBPEUR", "GBPRUB", "GBPTRY"];
var getBasicGridData = (rowLength, colLength) => {
  const data = [];
  const pricesColLength = colLength - 2;
  for (let i2 = 0; i2 < rowLength; i2 += 1) {
    const idx = i2 >= currencyPairs.length ? i2 % currencyPairs.length : i2;
    const model = {
      id: i2,
      currencyPair: currencyPairs[idx]
    };
    for (let j = 1; j <= pricesColLength; j += 1) {
      model[`price${j}M`] = Number(`${i2.toString()}${j}`);
    }
    data.push(model);
  }
  const columns = [{
    field: "id",
    headerName: "id",
    type: "number"
  }, {
    field: "currencyPair",
    headerName: "Currency Pair"
  }];
  for (let j = 1; j <= pricesColLength; j += 1) {
    columns.push({
      field: `price${j}M`,
      headerName: `${j}M`,
      type: "number"
    });
  }
  columns.length = colLength;
  return {
    columns,
    rows: data
  };
};

// node_modules/@mui/x-data-grid-generator/columns/commodities.columns.js
var getCommodityColumns = (editable = false) => [{
  field: "id",
  generateData: randomId,
  hide: true
}, {
  field: "desk",
  headerName: "Desk",
  generateData: randomDesk,
  width: 110
}, {
  field: "commodity",
  headerName: "Commodity",
  generateData: randomCommodity,
  width: 180,
  editable
}, {
  field: "traderName",
  headerName: "Trader Name",
  generateData: randomTraderName,
  width: 120,
  editable
}, {
  field: "traderEmail",
  headerName: "Trader Email",
  generateData: randomEmail,
  renderCell: renderEmail,
  width: 150,
  editable
}, {
  field: "quantity",
  headerName: "Quantity",
  type: "number",
  width: 140,
  generateData: randomQuantity,
  editable,
  valueParser: (value) => Number(value)
}, {
  field: "filledQuantity",
  headerName: "Filled Quantity",
  generateData: generateFilledQuantity,
  renderCell: renderProgress,
  renderEditCell: renderEditProgress,
  availableAggregationFunctions: ["min", "max", "avg", "size"],
  type: "number",
  width: 120,
  editable
}, {
  field: "isFilled",
  headerName: "Is Filled",
  align: "center",
  generateData: generateIsFilled,
  type: "boolean",
  width: 80,
  editable
}, {
  field: "status",
  headerName: "Status",
  generateData: randomStatusOptions,
  renderCell: renderStatus,
  renderEditCell: renderEditStatus,
  type: "singleSelect",
  valueOptions: STATUS_OPTIONS,
  width: 150,
  editable
}, {
  field: "unitPrice",
  headerName: "Unit Price",
  generateData: randomUnitPrice,
  type: "number",
  editable,
  valueParser: (value) => Number(value)
}, {
  field: "unitPriceCurrency",
  headerName: "Unit Price Currency",
  generateData: randomUnitPriceCurrency,
  renderEditCell: renderEditCurrency,
  type: "singleSelect",
  valueOptions: CURRENCY_OPTIONS,
  width: 120,
  editable
}, {
  field: "subTotal",
  headerName: "Sub Total",
  valueGetter: (value, row) => row.quantity == null || row.unitPrice == null ? null : row.quantity * row.unitPrice,
  type: "number",
  width: 120
}, {
  field: "feeRate",
  headerName: "Fee Rate",
  generateData: randomFeeRate,
  type: "number",
  width: 80,
  editable,
  valueParser: (value) => Number(value)
}, {
  field: "feeAmount",
  headerName: "Fee Amount",
  valueGetter: (value, row) => row.feeRate == null || row.quantity == null || row.unitPrice == null ? null : row.feeRate * row.quantity * row.unitPrice,
  type: "number",
  width: 120
}, {
  field: "incoTerm",
  headerName: "Incoterm",
  generateData: randomIncoterm,
  renderCell: renderIncoterm,
  renderEditCell: renderEditIncoterm,
  type: "singleSelect",
  valueOptions: INCOTERM_OPTIONS,
  editable
}, {
  field: "totalPrice",
  headerName: "Total in USD",
  valueGetter: (value, row) => row.feeRate == null || row.quantity == null || row.unitPrice == null ? null : row.feeRate + row.quantity * row.unitPrice,
  renderCell: renderTotalPrice,
  type: "number",
  width: 160
}, {
  field: "pnl",
  headerName: "PnL",
  generateData: randomPnL,
  renderCell: renderPnl,
  type: "number",
  width: 140
}, {
  field: "maturityDate",
  headerName: "Maturity Date",
  generateData: randomMaturityDate,
  type: "date",
  editable
}, {
  field: "tradeDate",
  headerName: "Trade Date",
  generateData: randomTradeDate,
  type: "date",
  editable
}, {
  field: "brokerId",
  headerName: "Broker Id",
  generateData: randomBrokerId,
  hide: true,
  editable
}, {
  field: "brokerName",
  headerName: "Broker Name",
  generateData: randomCompanyName,
  width: 140,
  editable
}, {
  field: "counterPartyName",
  headerName: "Counterparty",
  generateData: randomCompanyName,
  width: 180,
  editable
}, {
  field: "counterPartyCountry",
  headerName: "Counterparty Country",
  type: "singleSelect",
  generateData: randomCountry,
  renderCell: renderCountry,
  valueOptions: COUNTRY_ISO_OPTIONS_SORTED,
  valueParser: (value) => {
    if (typeof value === "string") {
      return COUNTRY_ISO_OPTIONS_SORTED.find((country) => country.value === value);
    }
    return value;
  },
  valueFormatter: (value) => value == null ? void 0 : value.label,
  groupingValueGetter: (value) => value.code,
  sortComparator: (v1, v2, param1, param2) => gridStringOrNumberComparator(v1.label, v2.label, param1, param2),
  editable,
  width: 120
}, {
  field: "counterPartyCurrency",
  headerName: "Counterparty Currency",
  generateData: randomCurrency,
  renderEditCell: renderEditCurrency,
  type: "singleSelect",
  valueOptions: CURRENCY_OPTIONS,
  editable
}, {
  field: "counterPartyAddress",
  headerName: "Counterparty Address",
  generateData: randomAddress,
  width: 200,
  editable
}, {
  field: "counterPartyCity",
  headerName: "Counterparty City",
  generateData: randomCity,
  width: 120,
  editable
}, {
  field: "taxCode",
  headerName: "Tax Code",
  generateData: randomTaxCode,
  type: "singleSelect",
  valueOptions: TAXCODE_OPTIONS,
  editable
}, {
  field: "contractType",
  headerName: "Contract Type",
  generateData: randomContractType,
  type: "singleSelect",
  valueOptions: CONTRACT_TYPE_OPTIONS,
  editable
}, {
  field: "rateType",
  headerName: "Rate Type",
  generateData: randomRateType,
  type: "singleSelect",
  valueOptions: RATE_TYPE_OPTIONS,
  editable
}, {
  field: "lastUpdated",
  headerName: "Updated on",
  generateData: randomUpdatedDate,
  type: "dateTime",
  width: 180,
  editable
}, {
  field: "dateCreated",
  headerName: "Created on",
  generateData: randomCreatedDate,
  type: "date",
  width: 150,
  editable
}];

// node_modules/@mui/x-data-grid-generator/columns/employees.columns.js
var getEmployeeColumns = () => [{
  field: "id",
  generateData: randomId,
  hide: true
}, {
  field: "avatar",
  headerName: "Avatar",
  generateData: randomColor,
  display: "flex",
  renderCell: renderAvatar,
  valueGetter: (value, row) => row.name == null || row.avatar == null ? null : {
    name: row.name,
    color: row.avatar
  },
  sortable: false,
  filterable: false,
  groupable: false,
  aggregable: false,
  disableExport: true
}, {
  field: "name",
  headerName: "Name",
  generateData: randomName,
  dataGeneratorUniquenessEnabled: true,
  width: 120,
  editable: true,
  groupable: false,
  aggregable: false
}, {
  field: "website",
  headerName: "Website",
  generateData: randomUrl,
  renderCell: renderLink,
  width: 160,
  editable: true,
  groupable: false,
  aggregable: false
}, {
  field: "rating",
  headerName: "Rating",
  generateData: randomRating,
  display: "flex",
  renderCell: renderRating,
  renderEditCell: renderEditRating,
  width: 180,
  type: "number",
  editable: true,
  availableAggregationFunctions: ["avg", "min", "max", "size"]
}, {
  field: "email",
  headerName: "Email",
  generateData: randomEmail,
  renderCell: renderEmail,
  width: 150,
  editable: true
}, {
  field: "phone",
  headerName: "Phone",
  generateData: randomPhoneNumber,
  width: 150,
  editable: true
}, {
  field: "username",
  headerName: "Username",
  generateData: randomUserName,
  width: 150,
  editable: true
}, {
  field: "city",
  headerName: "City",
  generateData: randomCity,
  editable: true
}, {
  field: "country",
  headerName: "Country",
  type: "singleSelect",
  valueOptions: COUNTRY_ISO_OPTIONS_SORTED,
  valueFormatter: (value) => value == null ? void 0 : value.label,
  generateData: randomCountry,
  renderCell: renderCountry,
  renderEditCell: renderEditCountry,
  sortComparator: (v1, v2, param1, param2) => gridStringOrNumberComparator(v1.label, v2.label, param1, param2),
  width: 150,
  editable: true
}, {
  field: "company",
  headerName: "Company",
  generateData: randomCompanyName,
  width: 180,
  editable: true
}, {
  field: "position",
  headerName: "Position",
  generateData: randomJobTitle,
  width: 180,
  editable: true
}, {
  field: "lastUpdated",
  headerName: "Updated on",
  generateData: randomUpdatedDate,
  type: "dateTime",
  width: 180,
  editable: true
}, {
  field: "dateCreated",
  headerName: "Created on",
  generateData: randomCreatedDate,
  type: "date",
  width: 120,
  editable: true
}, {
  field: "isAdmin",
  headerName: "Is admin?",
  generateData: randomBoolean,
  type: "boolean",
  width: 150,
  editable: true
}, {
  field: "salary",
  headerName: "Salary",
  generateData: () => randomInt(3e4, 8e4),
  type: "number",
  valueFormatter: (value) => {
    if (!value || typeof value !== "number") {
      return value;
    }
    return `$${value.toLocaleString()}`;
  }
}];

// node_modules/@mui/x-data-grid-generator/hooks/useDemoData.js
var React84 = __toESM(require_react());

// node_modules/@mui/x-data-grid-generator/node_modules/lru-cache/dist/esm/index.js
var perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
var warned = /* @__PURE__ */ new Set();
var PROCESS = typeof process === "object" && !!process ? process : {};
var emitWarning = (msg, type, code, fn) => {
  typeof PROCESS.emitWarning === "function" ? PROCESS.emitWarning(msg, type, code, fn) : console.error(`[${code}] ${type}: ${msg}`);
};
var AC = globalThis.AbortController;
var AS = globalThis.AbortSignal;
var _a;
if (typeof AC === "undefined") {
  AS = class AbortSignal {
    constructor() {
      __publicField(this, "onabort");
      __publicField(this, "_onabort", []);
      __publicField(this, "reason");
      __publicField(this, "aborted", false);
    }
    addEventListener(_, fn) {
      this._onabort.push(fn);
    }
  };
  AC = class AbortController {
    constructor() {
      __publicField(this, "signal", new AS());
      warnACPolyfill();
    }
    abort(reason) {
      var _a3, _b2;
      if (this.signal.aborted)
        return;
      this.signal.reason = reason;
      this.signal.aborted = true;
      for (const fn of this.signal._onabort) {
        fn(reason);
      }
      (_b2 = (_a3 = this.signal).onabort) == null ? void 0 : _b2.call(_a3, reason);
    }
  };
  let printACPolyfillWarning = ((_a = PROCESS.env) == null ? void 0 : _a.LRU_CACHE_IGNORE_AC_WARNING) !== "1";
  const warnACPolyfill = () => {
    if (!printACPolyfillWarning)
      return;
    printACPolyfillWarning = false;
    emitWarning("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", warnACPolyfill);
  };
}
var shouldWarn = (code) => !warned.has(code);
var TYPE = Symbol("type");
var isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);
var getUintArray = (max) => !isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
var ZeroArray = class extends Array {
  constructor(size) {
    super(size);
    this.fill(0);
  }
};
var _constructing;
var _Stack = class _Stack {
  constructor(max, HeapCls) {
    __publicField(this, "heap");
    __publicField(this, "length");
    if (!__privateGet(_Stack, _constructing)) {
      throw new TypeError("instantiate Stack using Stack.create(n)");
    }
    this.heap = new HeapCls(max);
    this.length = 0;
  }
  static create(max) {
    const HeapCls = getUintArray(max);
    if (!HeapCls)
      return [];
    __privateSet(_Stack, _constructing, true);
    const s = new _Stack(max, HeapCls);
    __privateSet(_Stack, _constructing, false);
    return s;
  }
  push(n) {
    this.heap[this.length++] = n;
  }
  pop() {
    return this.heap[--this.length];
  }
};
_constructing = new WeakMap();
// private constructor
__privateAdd(_Stack, _constructing, false);
var Stack = _Stack;
var _a2, _b, _max, _maxSize, _dispose, _disposeAfter, _fetchMethod, _memoMethod, _size, _calculatedSize, _keyMap, _keyList, _valList, _next, _prev, _head, _tail, _free, _disposed, _sizes, _starts, _ttls, _hasDispose, _hasFetchMethod, _hasDisposeAfter, _LRUCache_instances, initializeTTLTracking_fn, _updateItemAge, _statusTTL, _setItemTTL, _isStale, initializeSizeTracking_fn, _removeItemSize, _addItemSize, _requireSize, indexes_fn, rindexes_fn, isValidIndex_fn, evict_fn, backgroundFetch_fn, isBackgroundFetch_fn, connect_fn, moveToTail_fn, delete_fn, clear_fn;
var _LRUCache = class _LRUCache {
  constructor(options) {
    __privateAdd(this, _LRUCache_instances);
    // options that cannot be changed without disaster
    __privateAdd(this, _max);
    __privateAdd(this, _maxSize);
    __privateAdd(this, _dispose);
    __privateAdd(this, _disposeAfter);
    __privateAdd(this, _fetchMethod);
    __privateAdd(this, _memoMethod);
    /**
     * {@link LRUCache.OptionsBase.ttl}
     */
    __publicField(this, "ttl");
    /**
     * {@link LRUCache.OptionsBase.ttlResolution}
     */
    __publicField(this, "ttlResolution");
    /**
     * {@link LRUCache.OptionsBase.ttlAutopurge}
     */
    __publicField(this, "ttlAutopurge");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnGet}
     */
    __publicField(this, "updateAgeOnGet");
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnHas}
     */
    __publicField(this, "updateAgeOnHas");
    /**
     * {@link LRUCache.OptionsBase.allowStale}
     */
    __publicField(this, "allowStale");
    /**
     * {@link LRUCache.OptionsBase.noDisposeOnSet}
     */
    __publicField(this, "noDisposeOnSet");
    /**
     * {@link LRUCache.OptionsBase.noUpdateTTL}
     */
    __publicField(this, "noUpdateTTL");
    /**
     * {@link LRUCache.OptionsBase.maxEntrySize}
     */
    __publicField(this, "maxEntrySize");
    /**
     * {@link LRUCache.OptionsBase.sizeCalculation}
     */
    __publicField(this, "sizeCalculation");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
     */
    __publicField(this, "noDeleteOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
     */
    __publicField(this, "noDeleteOnStaleGet");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
     */
    __publicField(this, "allowStaleOnFetchAbort");
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
     */
    __publicField(this, "allowStaleOnFetchRejection");
    /**
     * {@link LRUCache.OptionsBase.ignoreFetchAbort}
     */
    __publicField(this, "ignoreFetchAbort");
    // computed properties
    __privateAdd(this, _size);
    __privateAdd(this, _calculatedSize);
    __privateAdd(this, _keyMap);
    __privateAdd(this, _keyList);
    __privateAdd(this, _valList);
    __privateAdd(this, _next);
    __privateAdd(this, _prev);
    __privateAdd(this, _head);
    __privateAdd(this, _tail);
    __privateAdd(this, _free);
    __privateAdd(this, _disposed);
    __privateAdd(this, _sizes);
    __privateAdd(this, _starts);
    __privateAdd(this, _ttls);
    __privateAdd(this, _hasDispose);
    __privateAdd(this, _hasFetchMethod);
    __privateAdd(this, _hasDisposeAfter);
    // conditionally set private methods related to TTL
    __privateAdd(this, _updateItemAge, () => {
    });
    __privateAdd(this, _statusTTL, () => {
    });
    __privateAdd(this, _setItemTTL, () => {
    });
    /* c8 ignore stop */
    __privateAdd(this, _isStale, () => false);
    __privateAdd(this, _removeItemSize, (_i) => {
    });
    __privateAdd(this, _addItemSize, (_i, _s, _st) => {
    });
    __privateAdd(this, _requireSize, (_k, _v, size, sizeCalculation) => {
      if (size || sizeCalculation) {
        throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
      }
      return 0;
    });
    /**
     * A String value that is used in the creation of the default string
     * description of an object. Called by the built-in method
     * `Object.prototype.toString`.
     */
    __publicField(this, _a2, "LRUCache");
    const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, memoMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort } = options;
    if (max !== 0 && !isPosInt(max)) {
      throw new TypeError("max option must be a nonnegative integer");
    }
    const UintArray = max ? getUintArray(max) : Array;
    if (!UintArray) {
      throw new Error("invalid max value: " + max);
    }
    __privateSet(this, _max, max);
    __privateSet(this, _maxSize, maxSize);
    this.maxEntrySize = maxEntrySize || __privateGet(this, _maxSize);
    this.sizeCalculation = sizeCalculation;
    if (this.sizeCalculation) {
      if (!__privateGet(this, _maxSize) && !this.maxEntrySize) {
        throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
      }
      if (typeof this.sizeCalculation !== "function") {
        throw new TypeError("sizeCalculation set to non-function");
      }
    }
    if (memoMethod !== void 0 && typeof memoMethod !== "function") {
      throw new TypeError("memoMethod must be a function if defined");
    }
    __privateSet(this, _memoMethod, memoMethod);
    if (fetchMethod !== void 0 && typeof fetchMethod !== "function") {
      throw new TypeError("fetchMethod must be a function if specified");
    }
    __privateSet(this, _fetchMethod, fetchMethod);
    __privateSet(this, _hasFetchMethod, !!fetchMethod);
    __privateSet(this, _keyMap, /* @__PURE__ */ new Map());
    __privateSet(this, _keyList, new Array(max).fill(void 0));
    __privateSet(this, _valList, new Array(max).fill(void 0));
    __privateSet(this, _next, new UintArray(max));
    __privateSet(this, _prev, new UintArray(max));
    __privateSet(this, _head, 0);
    __privateSet(this, _tail, 0);
    __privateSet(this, _free, Stack.create(max));
    __privateSet(this, _size, 0);
    __privateSet(this, _calculatedSize, 0);
    if (typeof dispose === "function") {
      __privateSet(this, _dispose, dispose);
    }
    if (typeof disposeAfter === "function") {
      __privateSet(this, _disposeAfter, disposeAfter);
      __privateSet(this, _disposed, []);
    } else {
      __privateSet(this, _disposeAfter, void 0);
      __privateSet(this, _disposed, void 0);
    }
    __privateSet(this, _hasDispose, !!__privateGet(this, _dispose));
    __privateSet(this, _hasDisposeAfter, !!__privateGet(this, _disposeAfter));
    this.noDisposeOnSet = !!noDisposeOnSet;
    this.noUpdateTTL = !!noUpdateTTL;
    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
    this.ignoreFetchAbort = !!ignoreFetchAbort;
    if (this.maxEntrySize !== 0) {
      if (__privateGet(this, _maxSize) !== 0) {
        if (!isPosInt(__privateGet(this, _maxSize))) {
          throw new TypeError("maxSize must be a positive integer if specified");
        }
      }
      if (!isPosInt(this.maxEntrySize)) {
        throw new TypeError("maxEntrySize must be a positive integer if specified");
      }
      __privateMethod(this, _LRUCache_instances, initializeSizeTracking_fn).call(this);
    }
    this.allowStale = !!allowStale;
    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
    this.updateAgeOnGet = !!updateAgeOnGet;
    this.updateAgeOnHas = !!updateAgeOnHas;
    this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
    this.ttlAutopurge = !!ttlAutopurge;
    this.ttl = ttl || 0;
    if (this.ttl) {
      if (!isPosInt(this.ttl)) {
        throw new TypeError("ttl must be a positive integer if specified");
      }
      __privateMethod(this, _LRUCache_instances, initializeTTLTracking_fn).call(this);
    }
    if (__privateGet(this, _max) === 0 && this.ttl === 0 && __privateGet(this, _maxSize) === 0) {
      throw new TypeError("At least one of max, maxSize, or ttl is required");
    }
    if (!this.ttlAutopurge && !__privateGet(this, _max) && !__privateGet(this, _maxSize)) {
      const code = "LRU_CACHE_UNBOUNDED";
      if (shouldWarn(code)) {
        warned.add(code);
        const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
        emitWarning(msg, "UnboundedCacheWarning", code, _LRUCache);
      }
    }
  }
  /**
   * Do not call this method unless you need to inspect the
   * inner workings of the cache.  If anything returned by this
   * object is modified in any way, strange breakage may occur.
   *
   * These fields are private for a reason!
   *
   * @internal
   */
  static unsafeExposeInternals(c) {
    return {
      // properties
      starts: __privateGet(c, _starts),
      ttls: __privateGet(c, _ttls),
      sizes: __privateGet(c, _sizes),
      keyMap: __privateGet(c, _keyMap),
      keyList: __privateGet(c, _keyList),
      valList: __privateGet(c, _valList),
      next: __privateGet(c, _next),
      prev: __privateGet(c, _prev),
      get head() {
        return __privateGet(c, _head);
      },
      get tail() {
        return __privateGet(c, _tail);
      },
      free: __privateGet(c, _free),
      // methods
      isBackgroundFetch: (p) => {
        var _a3;
        return __privateMethod(_a3 = c, _LRUCache_instances, isBackgroundFetch_fn).call(_a3, p);
      },
      backgroundFetch: (k2, index, options, context) => {
        var _a3;
        return __privateMethod(_a3 = c, _LRUCache_instances, backgroundFetch_fn).call(_a3, k2, index, options, context);
      },
      moveToTail: (index) => {
        var _a3;
        return __privateMethod(_a3 = c, _LRUCache_instances, moveToTail_fn).call(_a3, index);
      },
      indexes: (options) => {
        var _a3;
        return __privateMethod(_a3 = c, _LRUCache_instances, indexes_fn).call(_a3, options);
      },
      rindexes: (options) => {
        var _a3;
        return __privateMethod(_a3 = c, _LRUCache_instances, rindexes_fn).call(_a3, options);
      },
      isStale: (index) => {
        var _a3;
        return __privateGet(_a3 = c, _isStale).call(_a3, index);
      }
    };
  }
  // Protected read-only members
  /**
   * {@link LRUCache.OptionsBase.max} (read-only)
   */
  get max() {
    return __privateGet(this, _max);
  }
  /**
   * {@link LRUCache.OptionsBase.maxSize} (read-only)
   */
  get maxSize() {
    return __privateGet(this, _maxSize);
  }
  /**
   * The total computed size of items in the cache (read-only)
   */
  get calculatedSize() {
    return __privateGet(this, _calculatedSize);
  }
  /**
   * The number of items stored in the cache (read-only)
   */
  get size() {
    return __privateGet(this, _size);
  }
  /**
   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
   */
  get fetchMethod() {
    return __privateGet(this, _fetchMethod);
  }
  get memoMethod() {
    return __privateGet(this, _memoMethod);
  }
  /**
   * {@link LRUCache.OptionsBase.dispose} (read-only)
   */
  get dispose() {
    return __privateGet(this, _dispose);
  }
  /**
   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
   */
  get disposeAfter() {
    return __privateGet(this, _disposeAfter);
  }
  /**
   * Return the number of ms left in the item's TTL. If item is not in cache,
   * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
   */
  getRemainingTTL(key) {
    return __privateGet(this, _keyMap).has(key) ? Infinity : 0;
  }
  /**
   * Return a generator yielding `[key, value]` pairs,
   * in order from most recently used to least recently used.
   */
  *entries() {
    for (const i2 of __privateMethod(this, _LRUCache_instances, indexes_fn).call(this)) {
      if (__privateGet(this, _valList)[i2] !== void 0 && __privateGet(this, _keyList)[i2] !== void 0 && !__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i2])) {
        yield [__privateGet(this, _keyList)[i2], __privateGet(this, _valList)[i2]];
      }
    }
  }
  /**
   * Inverse order version of {@link LRUCache.entries}
   *
   * Return a generator yielding `[key, value]` pairs,
   * in order from least recently used to most recently used.
   */
  *rentries() {
    for (const i2 of __privateMethod(this, _LRUCache_instances, rindexes_fn).call(this)) {
      if (__privateGet(this, _valList)[i2] !== void 0 && __privateGet(this, _keyList)[i2] !== void 0 && !__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i2])) {
        yield [__privateGet(this, _keyList)[i2], __privateGet(this, _valList)[i2]];
      }
    }
  }
  /**
   * Return a generator yielding the keys in the cache,
   * in order from most recently used to least recently used.
   */
  *keys() {
    for (const i2 of __privateMethod(this, _LRUCache_instances, indexes_fn).call(this)) {
      const k2 = __privateGet(this, _keyList)[i2];
      if (k2 !== void 0 && !__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i2])) {
        yield k2;
      }
    }
  }
  /**
   * Inverse order version of {@link LRUCache.keys}
   *
   * Return a generator yielding the keys in the cache,
   * in order from least recently used to most recently used.
   */
  *rkeys() {
    for (const i2 of __privateMethod(this, _LRUCache_instances, rindexes_fn).call(this)) {
      const k2 = __privateGet(this, _keyList)[i2];
      if (k2 !== void 0 && !__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i2])) {
        yield k2;
      }
    }
  }
  /**
   * Return a generator yielding the values in the cache,
   * in order from most recently used to least recently used.
   */
  *values() {
    for (const i2 of __privateMethod(this, _LRUCache_instances, indexes_fn).call(this)) {
      const v = __privateGet(this, _valList)[i2];
      if (v !== void 0 && !__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i2])) {
        yield __privateGet(this, _valList)[i2];
      }
    }
  }
  /**
   * Inverse order version of {@link LRUCache.values}
   *
   * Return a generator yielding the values in the cache,
   * in order from least recently used to most recently used.
   */
  *rvalues() {
    for (const i2 of __privateMethod(this, _LRUCache_instances, rindexes_fn).call(this)) {
      const v = __privateGet(this, _valList)[i2];
      if (v !== void 0 && !__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, __privateGet(this, _valList)[i2])) {
        yield __privateGet(this, _valList)[i2];
      }
    }
  }
  /**
   * Iterating over the cache itself yields the same results as
   * {@link LRUCache.entries}
   */
  [(_b = Symbol.iterator, _a2 = Symbol.toStringTag, _b)]() {
    return this.entries();
  }
  /**
   * Find a value for which the supplied fn method returns a truthy value,
   * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
   */
  find(fn, getOptions = {}) {
    for (const i2 of __privateMethod(this, _LRUCache_instances, indexes_fn).call(this)) {
      const v = __privateGet(this, _valList)[i2];
      const value = __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      if (fn(value, __privateGet(this, _keyList)[i2], this)) {
        return this.get(__privateGet(this, _keyList)[i2], getOptions);
      }
    }
  }
  /**
   * Call the supplied function on each item in the cache, in order from most
   * recently used to least recently used.
   *
   * `fn` is called as `fn(value, key, cache)`.
   *
   * If `thisp` is provided, function will be called in the `this`-context of
   * the provided object, or the cache if no `thisp` object is provided.
   *
   * Does not update age or recenty of use, or iterate over stale values.
   */
  forEach(fn, thisp = this) {
    for (const i2 of __privateMethod(this, _LRUCache_instances, indexes_fn).call(this)) {
      const v = __privateGet(this, _valList)[i2];
      const value = __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      fn.call(thisp, value, __privateGet(this, _keyList)[i2], this);
    }
  }
  /**
   * The same as {@link LRUCache.forEach} but items are iterated over in
   * reverse order.  (ie, less recently used items are iterated over first.)
   */
  rforEach(fn, thisp = this) {
    for (const i2 of __privateMethod(this, _LRUCache_instances, rindexes_fn).call(this)) {
      const v = __privateGet(this, _valList)[i2];
      const value = __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
      if (value === void 0)
        continue;
      fn.call(thisp, value, __privateGet(this, _keyList)[i2], this);
    }
  }
  /**
   * Delete any stale entries. Returns true if anything was removed,
   * false otherwise.
   */
  purgeStale() {
    let deleted = false;
    for (const i2 of __privateMethod(this, _LRUCache_instances, rindexes_fn).call(this, { allowStale: true })) {
      if (__privateGet(this, _isStale).call(this, i2)) {
        __privateMethod(this, _LRUCache_instances, delete_fn).call(this, __privateGet(this, _keyList)[i2], "expire");
        deleted = true;
      }
    }
    return deleted;
  }
  /**
   * Get the extended info about a given entry, to get its value, size, and
   * TTL info simultaneously. Returns `undefined` if the key is not present.
   *
   * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
   * serialization, the `start` value is always the current timestamp, and the
   * `ttl` is a calculated remaining time to live (negative if expired).
   *
   * Always returns stale values, if their info is found in the cache, so be
   * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
   * if relevant.
   */
  info(key) {
    const i2 = __privateGet(this, _keyMap).get(key);
    if (i2 === void 0)
      return void 0;
    const v = __privateGet(this, _valList)[i2];
    const value = __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
    if (value === void 0)
      return void 0;
    const entry = { value };
    if (__privateGet(this, _ttls) && __privateGet(this, _starts)) {
      const ttl = __privateGet(this, _ttls)[i2];
      const start = __privateGet(this, _starts)[i2];
      if (ttl && start) {
        const remain = ttl - (perf.now() - start);
        entry.ttl = remain;
        entry.start = Date.now();
      }
    }
    if (__privateGet(this, _sizes)) {
      entry.size = __privateGet(this, _sizes)[i2];
    }
    return entry;
  }
  /**
   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
   * passed to {@link LRUCache#load}.
   *
   * The `start` fields are calculated relative to a portable `Date.now()`
   * timestamp, even if `performance.now()` is available.
   *
   * Stale entries are always included in the `dump`, even if
   * {@link LRUCache.OptionsBase.allowStale} is false.
   *
   * Note: this returns an actual array, not a generator, so it can be more
   * easily passed around.
   */
  dump() {
    const arr = [];
    for (const i2 of __privateMethod(this, _LRUCache_instances, indexes_fn).call(this, { allowStale: true })) {
      const key = __privateGet(this, _keyList)[i2];
      const v = __privateGet(this, _valList)[i2];
      const value = __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
      if (value === void 0 || key === void 0)
        continue;
      const entry = { value };
      if (__privateGet(this, _ttls) && __privateGet(this, _starts)) {
        entry.ttl = __privateGet(this, _ttls)[i2];
        const age = perf.now() - __privateGet(this, _starts)[i2];
        entry.start = Math.floor(Date.now() - age);
      }
      if (__privateGet(this, _sizes)) {
        entry.size = __privateGet(this, _sizes)[i2];
      }
      arr.unshift([key, entry]);
    }
    return arr;
  }
  /**
   * Reset the cache and load in the items in entries in the order listed.
   *
   * The shape of the resulting cache may be different if the same options are
   * not used in both caches.
   *
   * The `start` fields are assumed to be calculated relative to a portable
   * `Date.now()` timestamp, even if `performance.now()` is available.
   */
  load(arr) {
    this.clear();
    for (const [key, entry] of arr) {
      if (entry.start) {
        const age = Date.now() - entry.start;
        entry.start = perf.now() - age;
      }
      this.set(key, entry.value, entry);
    }
  }
  /**
   * Add a value to the cache.
   *
   * Note: if `undefined` is specified as a value, this is an alias for
   * {@link LRUCache#delete}
   *
   * Fields on the {@link LRUCache.SetOptions} options param will override
   * their corresponding values in the constructor options for the scope
   * of this single `set()` operation.
   *
   * If `start` is provided, then that will set the effective start
   * time for the TTL calculation. Note that this must be a previous
   * value of `performance.now()` if supported, or a previous value of
   * `Date.now()` if not.
   *
   * Options object may also include `size`, which will prevent
   * calling the `sizeCalculation` function and just use the specified
   * number if it is a positive integer, and `noDisposeOnSet` which
   * will prevent calling a `dispose` function in the case of
   * overwrites.
   *
   * If the `size` (or return value of `sizeCalculation`) for a given
   * entry is greater than `maxEntrySize`, then the item will not be
   * added to the cache.
   *
   * Will update the recency of the entry.
   *
   * If the value is `undefined`, then this is an alias for
   * `cache.delete(key)`. `undefined` is never stored in the cache.
   */
  set(k2, v, setOptions = {}) {
    var _a3, _b2, _c, _d, _e;
    if (v === void 0) {
      this.delete(k2);
      return this;
    }
    const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status } = setOptions;
    let { noUpdateTTL = this.noUpdateTTL } = setOptions;
    const size = __privateGet(this, _requireSize).call(this, k2, v, setOptions.size || 0, sizeCalculation);
    if (this.maxEntrySize && size > this.maxEntrySize) {
      if (status) {
        status.set = "miss";
        status.maxEntrySizeExceeded = true;
      }
      __privateMethod(this, _LRUCache_instances, delete_fn).call(this, k2, "set");
      return this;
    }
    let index = __privateGet(this, _size) === 0 ? void 0 : __privateGet(this, _keyMap).get(k2);
    if (index === void 0) {
      index = __privateGet(this, _size) === 0 ? __privateGet(this, _tail) : __privateGet(this, _free).length !== 0 ? __privateGet(this, _free).pop() : __privateGet(this, _size) === __privateGet(this, _max) ? __privateMethod(this, _LRUCache_instances, evict_fn).call(this, false) : __privateGet(this, _size);
      __privateGet(this, _keyList)[index] = k2;
      __privateGet(this, _valList)[index] = v;
      __privateGet(this, _keyMap).set(k2, index);
      __privateGet(this, _next)[__privateGet(this, _tail)] = index;
      __privateGet(this, _prev)[index] = __privateGet(this, _tail);
      __privateSet(this, _tail, index);
      __privateWrapper(this, _size)._++;
      __privateGet(this, _addItemSize).call(this, index, size, status);
      if (status)
        status.set = "add";
      noUpdateTTL = false;
    } else {
      __privateMethod(this, _LRUCache_instances, moveToTail_fn).call(this, index);
      const oldVal = __privateGet(this, _valList)[index];
      if (v !== oldVal) {
        if (__privateGet(this, _hasFetchMethod) && __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, oldVal)) {
          oldVal.__abortController.abort(new Error("replaced"));
          const { __staleWhileFetching: s } = oldVal;
          if (s !== void 0 && !noDisposeOnSet) {
            if (__privateGet(this, _hasDispose)) {
              (_a3 = __privateGet(this, _dispose)) == null ? void 0 : _a3.call(this, s, k2, "set");
            }
            if (__privateGet(this, _hasDisposeAfter)) {
              (_b2 = __privateGet(this, _disposed)) == null ? void 0 : _b2.push([s, k2, "set"]);
            }
          }
        } else if (!noDisposeOnSet) {
          if (__privateGet(this, _hasDispose)) {
            (_c = __privateGet(this, _dispose)) == null ? void 0 : _c.call(this, oldVal, k2, "set");
          }
          if (__privateGet(this, _hasDisposeAfter)) {
            (_d = __privateGet(this, _disposed)) == null ? void 0 : _d.push([oldVal, k2, "set"]);
          }
        }
        __privateGet(this, _removeItemSize).call(this, index);
        __privateGet(this, _addItemSize).call(this, index, size, status);
        __privateGet(this, _valList)[index] = v;
        if (status) {
          status.set = "replace";
          const oldValue = oldVal && __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, oldVal) ? oldVal.__staleWhileFetching : oldVal;
          if (oldValue !== void 0)
            status.oldValue = oldValue;
        }
      } else if (status) {
        status.set = "update";
      }
    }
    if (ttl !== 0 && !__privateGet(this, _ttls)) {
      __privateMethod(this, _LRUCache_instances, initializeTTLTracking_fn).call(this);
    }
    if (__privateGet(this, _ttls)) {
      if (!noUpdateTTL) {
        __privateGet(this, _setItemTTL).call(this, index, ttl, start);
      }
      if (status)
        __privateGet(this, _statusTTL).call(this, status, index);
    }
    if (!noDisposeOnSet && __privateGet(this, _hasDisposeAfter) && __privateGet(this, _disposed)) {
      const dt = __privateGet(this, _disposed);
      let task;
      while (task = dt == null ? void 0 : dt.shift()) {
        (_e = __privateGet(this, _disposeAfter)) == null ? void 0 : _e.call(this, ...task);
      }
    }
    return this;
  }
  /**
   * Evict the least recently used item, returning its value or
   * `undefined` if cache is empty.
   */
  pop() {
    var _a3;
    try {
      while (__privateGet(this, _size)) {
        const val = __privateGet(this, _valList)[__privateGet(this, _head)];
        __privateMethod(this, _LRUCache_instances, evict_fn).call(this, true);
        if (__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, val)) {
          if (val.__staleWhileFetching) {
            return val.__staleWhileFetching;
          }
        } else if (val !== void 0) {
          return val;
        }
      }
    } finally {
      if (__privateGet(this, _hasDisposeAfter) && __privateGet(this, _disposed)) {
        const dt = __privateGet(this, _disposed);
        let task;
        while (task = dt == null ? void 0 : dt.shift()) {
          (_a3 = __privateGet(this, _disposeAfter)) == null ? void 0 : _a3.call(this, ...task);
        }
      }
    }
  }
  /**
   * Check if a key is in the cache, without updating the recency of use.
   * Will return false if the item is stale, even though it is technically
   * in the cache.
   *
   * Check if a key is in the cache, without updating the recency of
   * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
   * to `true` in either the options or the constructor.
   *
   * Will return `false` if the item is stale, even though it is technically in
   * the cache. The difference can be determined (if it matters) by using a
   * `status` argument, and inspecting the `has` field.
   *
   * Will not update item age unless
   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
   */
  has(k2, hasOptions = {}) {
    const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;
    const index = __privateGet(this, _keyMap).get(k2);
    if (index !== void 0) {
      const v = __privateGet(this, _valList)[index];
      if (__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v) && v.__staleWhileFetching === void 0) {
        return false;
      }
      if (!__privateGet(this, _isStale).call(this, index)) {
        if (updateAgeOnHas) {
          __privateGet(this, _updateItemAge).call(this, index);
        }
        if (status) {
          status.has = "hit";
          __privateGet(this, _statusTTL).call(this, status, index);
        }
        return true;
      } else if (status) {
        status.has = "stale";
        __privateGet(this, _statusTTL).call(this, status, index);
      }
    } else if (status) {
      status.has = "miss";
    }
    return false;
  }
  /**
   * Like {@link LRUCache#get} but doesn't update recency or delete stale
   * items.
   *
   * Returns `undefined` if the item is stale, unless
   * {@link LRUCache.OptionsBase.allowStale} is set.
   */
  peek(k2, peekOptions = {}) {
    const { allowStale = this.allowStale } = peekOptions;
    const index = __privateGet(this, _keyMap).get(k2);
    if (index === void 0 || !allowStale && __privateGet(this, _isStale).call(this, index)) {
      return;
    }
    const v = __privateGet(this, _valList)[index];
    return __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v) ? v.__staleWhileFetching : v;
  }
  async fetch(k2, fetchOptions = {}) {
    const {
      // get options
      allowStale = this.allowStale,
      updateAgeOnGet = this.updateAgeOnGet,
      noDeleteOnStaleGet = this.noDeleteOnStaleGet,
      // set options
      ttl = this.ttl,
      noDisposeOnSet = this.noDisposeOnSet,
      size = 0,
      sizeCalculation = this.sizeCalculation,
      noUpdateTTL = this.noUpdateTTL,
      // fetch exclusive options
      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
      ignoreFetchAbort = this.ignoreFetchAbort,
      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
      context,
      forceRefresh = false,
      status,
      signal
    } = fetchOptions;
    if (!__privateGet(this, _hasFetchMethod)) {
      if (status)
        status.fetch = "get";
      return this.get(k2, {
        allowStale,
        updateAgeOnGet,
        noDeleteOnStaleGet,
        status
      });
    }
    const options = {
      allowStale,
      updateAgeOnGet,
      noDeleteOnStaleGet,
      ttl,
      noDisposeOnSet,
      size,
      sizeCalculation,
      noUpdateTTL,
      noDeleteOnFetchRejection,
      allowStaleOnFetchRejection,
      allowStaleOnFetchAbort,
      ignoreFetchAbort,
      status,
      signal
    };
    let index = __privateGet(this, _keyMap).get(k2);
    if (index === void 0) {
      if (status)
        status.fetch = "miss";
      const p = __privateMethod(this, _LRUCache_instances, backgroundFetch_fn).call(this, k2, index, options, context);
      return p.__returned = p;
    } else {
      const v = __privateGet(this, _valList)[index];
      if (__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v)) {
        const stale = allowStale && v.__staleWhileFetching !== void 0;
        if (status) {
          status.fetch = "inflight";
          if (stale)
            status.returnedStale = true;
        }
        return stale ? v.__staleWhileFetching : v.__returned = v;
      }
      const isStale = __privateGet(this, _isStale).call(this, index);
      if (!forceRefresh && !isStale) {
        if (status)
          status.fetch = "hit";
        __privateMethod(this, _LRUCache_instances, moveToTail_fn).call(this, index);
        if (updateAgeOnGet) {
          __privateGet(this, _updateItemAge).call(this, index);
        }
        if (status)
          __privateGet(this, _statusTTL).call(this, status, index);
        return v;
      }
      const p = __privateMethod(this, _LRUCache_instances, backgroundFetch_fn).call(this, k2, index, options, context);
      const hasStale = p.__staleWhileFetching !== void 0;
      const staleVal = hasStale && allowStale;
      if (status) {
        status.fetch = isStale ? "stale" : "refresh";
        if (staleVal && isStale)
          status.returnedStale = true;
      }
      return staleVal ? p.__staleWhileFetching : p.__returned = p;
    }
  }
  async forceFetch(k2, fetchOptions = {}) {
    const v = await this.fetch(k2, fetchOptions);
    if (v === void 0)
      throw new Error("fetch() returned undefined");
    return v;
  }
  memo(k2, memoOptions = {}) {
    const memoMethod = __privateGet(this, _memoMethod);
    if (!memoMethod) {
      throw new Error("no memoMethod provided to constructor");
    }
    const { context, forceRefresh, ...options } = memoOptions;
    const v = this.get(k2, options);
    if (!forceRefresh && v !== void 0)
      return v;
    const vv = memoMethod(k2, v, {
      options,
      context
    });
    this.set(k2, vv, options);
    return vv;
  }
  /**
   * Return a value from the cache. Will update the recency of the cache
   * entry found.
   *
   * If the key is not found, get() will return `undefined`.
   */
  get(k2, getOptions = {}) {
    const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status } = getOptions;
    const index = __privateGet(this, _keyMap).get(k2);
    if (index !== void 0) {
      const value = __privateGet(this, _valList)[index];
      const fetching = __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, value);
      if (status)
        __privateGet(this, _statusTTL).call(this, status, index);
      if (__privateGet(this, _isStale).call(this, index)) {
        if (status)
          status.get = "stale";
        if (!fetching) {
          if (!noDeleteOnStaleGet) {
            __privateMethod(this, _LRUCache_instances, delete_fn).call(this, k2, "expire");
          }
          if (status && allowStale)
            status.returnedStale = true;
          return allowStale ? value : void 0;
        } else {
          if (status && allowStale && value.__staleWhileFetching !== void 0) {
            status.returnedStale = true;
          }
          return allowStale ? value.__staleWhileFetching : void 0;
        }
      } else {
        if (status)
          status.get = "hit";
        if (fetching) {
          return value.__staleWhileFetching;
        }
        __privateMethod(this, _LRUCache_instances, moveToTail_fn).call(this, index);
        if (updateAgeOnGet) {
          __privateGet(this, _updateItemAge).call(this, index);
        }
        return value;
      }
    } else if (status) {
      status.get = "miss";
    }
  }
  /**
   * Deletes a key out of the cache.
   *
   * Returns true if the key was deleted, false otherwise.
   */
  delete(k2) {
    return __privateMethod(this, _LRUCache_instances, delete_fn).call(this, k2, "delete");
  }
  /**
   * Clear the cache entirely, throwing away all values.
   */
  clear() {
    return __privateMethod(this, _LRUCache_instances, clear_fn).call(this, "delete");
  }
};
_max = new WeakMap();
_maxSize = new WeakMap();
_dispose = new WeakMap();
_disposeAfter = new WeakMap();
_fetchMethod = new WeakMap();
_memoMethod = new WeakMap();
_size = new WeakMap();
_calculatedSize = new WeakMap();
_keyMap = new WeakMap();
_keyList = new WeakMap();
_valList = new WeakMap();
_next = new WeakMap();
_prev = new WeakMap();
_head = new WeakMap();
_tail = new WeakMap();
_free = new WeakMap();
_disposed = new WeakMap();
_sizes = new WeakMap();
_starts = new WeakMap();
_ttls = new WeakMap();
_hasDispose = new WeakMap();
_hasFetchMethod = new WeakMap();
_hasDisposeAfter = new WeakMap();
_LRUCache_instances = new WeakSet();
initializeTTLTracking_fn = function() {
  const ttls = new ZeroArray(__privateGet(this, _max));
  const starts = new ZeroArray(__privateGet(this, _max));
  __privateSet(this, _ttls, ttls);
  __privateSet(this, _starts, starts);
  __privateSet(this, _setItemTTL, (index, ttl, start = perf.now()) => {
    starts[index] = ttl !== 0 ? start : 0;
    ttls[index] = ttl;
    if (ttl !== 0 && this.ttlAutopurge) {
      const t = setTimeout(() => {
        if (__privateGet(this, _isStale).call(this, index)) {
          __privateMethod(this, _LRUCache_instances, delete_fn).call(this, __privateGet(this, _keyList)[index], "expire");
        }
      }, ttl + 1);
      if (t.unref) {
        t.unref();
      }
    }
  });
  __privateSet(this, _updateItemAge, (index) => {
    starts[index] = ttls[index] !== 0 ? perf.now() : 0;
  });
  __privateSet(this, _statusTTL, (status, index) => {
    if (ttls[index]) {
      const ttl = ttls[index];
      const start = starts[index];
      if (!ttl || !start)
        return;
      status.ttl = ttl;
      status.start = start;
      status.now = cachedNow || getNow();
      const age = status.now - start;
      status.remainingTTL = ttl - age;
    }
  });
  let cachedNow = 0;
  const getNow = () => {
    const n = perf.now();
    if (this.ttlResolution > 0) {
      cachedNow = n;
      const t = setTimeout(() => cachedNow = 0, this.ttlResolution);
      if (t.unref) {
        t.unref();
      }
    }
    return n;
  };
  this.getRemainingTTL = (key) => {
    const index = __privateGet(this, _keyMap).get(key);
    if (index === void 0) {
      return 0;
    }
    const ttl = ttls[index];
    const start = starts[index];
    if (!ttl || !start) {
      return Infinity;
    }
    const age = (cachedNow || getNow()) - start;
    return ttl - age;
  };
  __privateSet(this, _isStale, (index) => {
    const s = starts[index];
    const t = ttls[index];
    return !!t && !!s && (cachedNow || getNow()) - s > t;
  });
};
_updateItemAge = new WeakMap();
_statusTTL = new WeakMap();
_setItemTTL = new WeakMap();
_isStale = new WeakMap();
initializeSizeTracking_fn = function() {
  const sizes = new ZeroArray(__privateGet(this, _max));
  __privateSet(this, _calculatedSize, 0);
  __privateSet(this, _sizes, sizes);
  __privateSet(this, _removeItemSize, (index) => {
    __privateSet(this, _calculatedSize, __privateGet(this, _calculatedSize) - sizes[index]);
    sizes[index] = 0;
  });
  __privateSet(this, _requireSize, (k2, v, size, sizeCalculation) => {
    if (__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v)) {
      return 0;
    }
    if (!isPosInt(size)) {
      if (sizeCalculation) {
        if (typeof sizeCalculation !== "function") {
          throw new TypeError("sizeCalculation must be a function");
        }
        size = sizeCalculation(v, k2);
        if (!isPosInt(size)) {
          throw new TypeError("sizeCalculation return invalid (expect positive integer)");
        }
      } else {
        throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
      }
    }
    return size;
  });
  __privateSet(this, _addItemSize, (index, size, status) => {
    sizes[index] = size;
    if (__privateGet(this, _maxSize)) {
      const maxSize = __privateGet(this, _maxSize) - sizes[index];
      while (__privateGet(this, _calculatedSize) > maxSize) {
        __privateMethod(this, _LRUCache_instances, evict_fn).call(this, true);
      }
    }
    __privateSet(this, _calculatedSize, __privateGet(this, _calculatedSize) + sizes[index]);
    if (status) {
      status.entrySize = size;
      status.totalCalculatedSize = __privateGet(this, _calculatedSize);
    }
  });
};
_removeItemSize = new WeakMap();
_addItemSize = new WeakMap();
_requireSize = new WeakMap();
indexes_fn = function* ({ allowStale = this.allowStale } = {}) {
  if (__privateGet(this, _size)) {
    for (let i2 = __privateGet(this, _tail); true; ) {
      if (!__privateMethod(this, _LRUCache_instances, isValidIndex_fn).call(this, i2)) {
        break;
      }
      if (allowStale || !__privateGet(this, _isStale).call(this, i2)) {
        yield i2;
      }
      if (i2 === __privateGet(this, _head)) {
        break;
      } else {
        i2 = __privateGet(this, _prev)[i2];
      }
    }
  }
};
rindexes_fn = function* ({ allowStale = this.allowStale } = {}) {
  if (__privateGet(this, _size)) {
    for (let i2 = __privateGet(this, _head); true; ) {
      if (!__privateMethod(this, _LRUCache_instances, isValidIndex_fn).call(this, i2)) {
        break;
      }
      if (allowStale || !__privateGet(this, _isStale).call(this, i2)) {
        yield i2;
      }
      if (i2 === __privateGet(this, _tail)) {
        break;
      } else {
        i2 = __privateGet(this, _next)[i2];
      }
    }
  }
};
isValidIndex_fn = function(index) {
  return index !== void 0 && __privateGet(this, _keyMap).get(__privateGet(this, _keyList)[index]) === index;
};
evict_fn = function(free) {
  var _a3, _b2;
  const head = __privateGet(this, _head);
  const k2 = __privateGet(this, _keyList)[head];
  const v = __privateGet(this, _valList)[head];
  if (__privateGet(this, _hasFetchMethod) && __privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v)) {
    v.__abortController.abort(new Error("evicted"));
  } else if (__privateGet(this, _hasDispose) || __privateGet(this, _hasDisposeAfter)) {
    if (__privateGet(this, _hasDispose)) {
      (_a3 = __privateGet(this, _dispose)) == null ? void 0 : _a3.call(this, v, k2, "evict");
    }
    if (__privateGet(this, _hasDisposeAfter)) {
      (_b2 = __privateGet(this, _disposed)) == null ? void 0 : _b2.push([v, k2, "evict"]);
    }
  }
  __privateGet(this, _removeItemSize).call(this, head);
  if (free) {
    __privateGet(this, _keyList)[head] = void 0;
    __privateGet(this, _valList)[head] = void 0;
    __privateGet(this, _free).push(head);
  }
  if (__privateGet(this, _size) === 1) {
    __privateSet(this, _head, __privateSet(this, _tail, 0));
    __privateGet(this, _free).length = 0;
  } else {
    __privateSet(this, _head, __privateGet(this, _next)[head]);
  }
  __privateGet(this, _keyMap).delete(k2);
  __privateWrapper(this, _size)._--;
  return head;
};
backgroundFetch_fn = function(k2, index, options, context) {
  const v = index === void 0 ? void 0 : __privateGet(this, _valList)[index];
  if (__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v)) {
    return v;
  }
  const ac = new AC();
  const { signal } = options;
  signal == null ? void 0 : signal.addEventListener("abort", () => ac.abort(signal.reason), {
    signal: ac.signal
  });
  const fetchOpts = {
    signal: ac.signal,
    options,
    context
  };
  const cb = (v2, updateCache = false) => {
    const { aborted } = ac.signal;
    const ignoreAbort = options.ignoreFetchAbort && v2 !== void 0;
    if (options.status) {
      if (aborted && !updateCache) {
        options.status.fetchAborted = true;
        options.status.fetchError = ac.signal.reason;
        if (ignoreAbort)
          options.status.fetchAbortIgnored = true;
      } else {
        options.status.fetchResolved = true;
      }
    }
    if (aborted && !ignoreAbort && !updateCache) {
      return fetchFail(ac.signal.reason);
    }
    const bf2 = p;
    if (__privateGet(this, _valList)[index] === p) {
      if (v2 === void 0) {
        if (bf2.__staleWhileFetching) {
          __privateGet(this, _valList)[index] = bf2.__staleWhileFetching;
        } else {
          __privateMethod(this, _LRUCache_instances, delete_fn).call(this, k2, "fetch");
        }
      } else {
        if (options.status)
          options.status.fetchUpdated = true;
        this.set(k2, v2, fetchOpts.options);
      }
    }
    return v2;
  };
  const eb = (er) => {
    if (options.status) {
      options.status.fetchRejected = true;
      options.status.fetchError = er;
    }
    return fetchFail(er);
  };
  const fetchFail = (er) => {
    const { aborted } = ac.signal;
    const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
    const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
    const noDelete = allowStale || options.noDeleteOnFetchRejection;
    const bf2 = p;
    if (__privateGet(this, _valList)[index] === p) {
      const del = !noDelete || bf2.__staleWhileFetching === void 0;
      if (del) {
        __privateMethod(this, _LRUCache_instances, delete_fn).call(this, k2, "fetch");
      } else if (!allowStaleAborted) {
        __privateGet(this, _valList)[index] = bf2.__staleWhileFetching;
      }
    }
    if (allowStale) {
      if (options.status && bf2.__staleWhileFetching !== void 0) {
        options.status.returnedStale = true;
      }
      return bf2.__staleWhileFetching;
    } else if (bf2.__returned === bf2) {
      throw er;
    }
  };
  const pcall = (res, rej) => {
    var _a3;
    const fmp = (_a3 = __privateGet(this, _fetchMethod)) == null ? void 0 : _a3.call(this, k2, v, fetchOpts);
    if (fmp && fmp instanceof Promise) {
      fmp.then((v2) => res(v2 === void 0 ? void 0 : v2), rej);
    }
    ac.signal.addEventListener("abort", () => {
      if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
        res(void 0);
        if (options.allowStaleOnFetchAbort) {
          res = (v2) => cb(v2, true);
        }
      }
    });
  };
  if (options.status)
    options.status.fetchDispatched = true;
  const p = new Promise(pcall).then(cb, eb);
  const bf = Object.assign(p, {
    __abortController: ac,
    __staleWhileFetching: v,
    __returned: void 0
  });
  if (index === void 0) {
    this.set(k2, bf, { ...fetchOpts.options, status: void 0 });
    index = __privateGet(this, _keyMap).get(k2);
  } else {
    __privateGet(this, _valList)[index] = bf;
  }
  return bf;
};
isBackgroundFetch_fn = function(p) {
  if (!__privateGet(this, _hasFetchMethod))
    return false;
  const b = p;
  return !!b && b instanceof Promise && b.hasOwnProperty("__staleWhileFetching") && b.__abortController instanceof AC;
};
connect_fn = function(p, n) {
  __privateGet(this, _prev)[n] = p;
  __privateGet(this, _next)[p] = n;
};
moveToTail_fn = function(index) {
  if (index !== __privateGet(this, _tail)) {
    if (index === __privateGet(this, _head)) {
      __privateSet(this, _head, __privateGet(this, _next)[index]);
    } else {
      __privateMethod(this, _LRUCache_instances, connect_fn).call(this, __privateGet(this, _prev)[index], __privateGet(this, _next)[index]);
    }
    __privateMethod(this, _LRUCache_instances, connect_fn).call(this, __privateGet(this, _tail), index);
    __privateSet(this, _tail, index);
  }
};
delete_fn = function(k2, reason) {
  var _a3, _b2, _c, _d;
  let deleted = false;
  if (__privateGet(this, _size) !== 0) {
    const index = __privateGet(this, _keyMap).get(k2);
    if (index !== void 0) {
      deleted = true;
      if (__privateGet(this, _size) === 1) {
        __privateMethod(this, _LRUCache_instances, clear_fn).call(this, reason);
      } else {
        __privateGet(this, _removeItemSize).call(this, index);
        const v = __privateGet(this, _valList)[index];
        if (__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v)) {
          v.__abortController.abort(new Error("deleted"));
        } else if (__privateGet(this, _hasDispose) || __privateGet(this, _hasDisposeAfter)) {
          if (__privateGet(this, _hasDispose)) {
            (_a3 = __privateGet(this, _dispose)) == null ? void 0 : _a3.call(this, v, k2, reason);
          }
          if (__privateGet(this, _hasDisposeAfter)) {
            (_b2 = __privateGet(this, _disposed)) == null ? void 0 : _b2.push([v, k2, reason]);
          }
        }
        __privateGet(this, _keyMap).delete(k2);
        __privateGet(this, _keyList)[index] = void 0;
        __privateGet(this, _valList)[index] = void 0;
        if (index === __privateGet(this, _tail)) {
          __privateSet(this, _tail, __privateGet(this, _prev)[index]);
        } else if (index === __privateGet(this, _head)) {
          __privateSet(this, _head, __privateGet(this, _next)[index]);
        } else {
          const pi = __privateGet(this, _prev)[index];
          __privateGet(this, _next)[pi] = __privateGet(this, _next)[index];
          const ni = __privateGet(this, _next)[index];
          __privateGet(this, _prev)[ni] = __privateGet(this, _prev)[index];
        }
        __privateWrapper(this, _size)._--;
        __privateGet(this, _free).push(index);
      }
    }
  }
  if (__privateGet(this, _hasDisposeAfter) && ((_c = __privateGet(this, _disposed)) == null ? void 0 : _c.length)) {
    const dt = __privateGet(this, _disposed);
    let task;
    while (task = dt == null ? void 0 : dt.shift()) {
      (_d = __privateGet(this, _disposeAfter)) == null ? void 0 : _d.call(this, ...task);
    }
  }
  return deleted;
};
clear_fn = function(reason) {
  var _a3, _b2, _c;
  for (const index of __privateMethod(this, _LRUCache_instances, rindexes_fn).call(this, { allowStale: true })) {
    const v = __privateGet(this, _valList)[index];
    if (__privateMethod(this, _LRUCache_instances, isBackgroundFetch_fn).call(this, v)) {
      v.__abortController.abort(new Error("deleted"));
    } else {
      const k2 = __privateGet(this, _keyList)[index];
      if (__privateGet(this, _hasDispose)) {
        (_a3 = __privateGet(this, _dispose)) == null ? void 0 : _a3.call(this, v, k2, reason);
      }
      if (__privateGet(this, _hasDisposeAfter)) {
        (_b2 = __privateGet(this, _disposed)) == null ? void 0 : _b2.push([v, k2, reason]);
      }
    }
  }
  __privateGet(this, _keyMap).clear();
  __privateGet(this, _valList).fill(void 0);
  __privateGet(this, _keyList).fill(void 0);
  if (__privateGet(this, _ttls) && __privateGet(this, _starts)) {
    __privateGet(this, _ttls).fill(0);
    __privateGet(this, _starts).fill(0);
  }
  if (__privateGet(this, _sizes)) {
    __privateGet(this, _sizes).fill(0);
  }
  __privateSet(this, _head, 0);
  __privateSet(this, _tail, 0);
  __privateGet(this, _free).length = 0;
  __privateSet(this, _calculatedSize, 0);
  __privateSet(this, _size, 0);
  if (__privateGet(this, _hasDisposeAfter) && __privateGet(this, _disposed)) {
    const dt = __privateGet(this, _disposed);
    let task;
    while (task = dt == null ? void 0 : dt.shift()) {
      (_c = __privateGet(this, _disposeAfter)) == null ? void 0 : _c.call(this, ...task);
    }
  }
};
var LRUCache = _LRUCache;

// node_modules/@mui/x-data-grid-generator/services/tree-data-generator.js
var addTreeDataOptionsToDemoData = (data, options = {}) => {
  const {
    averageChildren = 2,
    maxDepth = 1,
    groupingField
  } = options;
  const hasTreeData = maxDepth > 1 && groupingField != null;
  if (!hasTreeData) {
    return data;
  }
  if (data.rows.length > 1e3) {
    throw new Error("MUI X: useDemoData tree data mode only works up to 1000 rows.");
  }
  const rowsByTreeDepth = {};
  const rowsCount = data.rows.length;
  const groupingCol = data.columns.find((col) => col.field === options.groupingField);
  if (!groupingCol) {
    throw new Error("MUI X: The tree data grouping field does not exist.");
  }
  data.initialState.columns.columnVisibilityModel[groupingField] = false;
  for (let i2 = 0; i2 < rowsCount; i2 += 1) {
    const row = data.rows[i2];
    const currentChunk = Math.floor(i2 * (averageChildren ** maxDepth - 1) / rowsCount) + 1;
    const currentDepth = Math.floor(Math.log(currentChunk) / Math.log(averageChildren));
    if (!rowsByTreeDepth[currentDepth]) {
      rowsByTreeDepth[currentDepth] = {
        rows: {},
        rowIndexes: []
      };
    }
    rowsByTreeDepth[currentDepth].rows[i2] = {
      value: row,
      parentIndex: null
    };
    rowsByTreeDepth[currentDepth].rowIndexes.push(i2);
  }
  Object.entries(rowsByTreeDepth).forEach(([depthStr, {
    rows
  }]) => {
    const depth = Number(depthStr);
    Object.values(rows).forEach((row) => {
      const path = [];
      let previousRow = null;
      for (let k2 = depth; k2 >= 0; k2 -= 1) {
        let rowTemp;
        if (k2 === depth) {
          if (depth > 0) {
            row.parentIndex = Number(randomArrayItem(rowsByTreeDepth[depth - 1].rowIndexes));
          }
          rowTemp = row;
        } else {
          rowTemp = rowsByTreeDepth[k2].rows[previousRow.parentIndex];
        }
        path.unshift(rowTemp.value[groupingField]);
        previousRow = rowTemp;
      }
      row.value.path = path;
    });
  });
  return _extends({}, data, {
    groupingColDef: {
      headerName: groupingCol.headerName ?? groupingCol.field,
      width: 250
    },
    getTreeDataPath: (row) => row.path,
    treeData: true
  });
};

// node_modules/@mui/x-data-grid-generator/hooks/useDemoData.js
var dataCache = new LRUCache({
  max: 10,
  ttl: 60 * 5 * 1e3
  // 5 minutes
});
async function extrapolateSeed(rowLength, data) {
  return new Promise((resolve) => {
    const seed = data.rows;
    const rows = data.rows.slice();
    const tasks = {
      current: rowLength - seed.length
    };
    function work() {
      const row = {};
      for (let j = 0; j < data.columns.length; j += 1) {
        const column = data.columns[j];
        const index = Math.round(Math.random() * (seed.length - 1));
        if (column.field === "id") {
          row.id = `id-${tasks.current + seed.length}`;
        } else {
          row[column.field] = seed[index][column.field];
        }
      }
      rows.push(row);
      tasks.current -= 1;
    }
    asyncWorker({
      work,
      done: () => resolve(_extends({}, data, {
        rows
      })),
      tasks
    });
  });
}
var deepFreeze = (object) => {
  const propNames = Object.getOwnPropertyNames(object);
  for (const name of propNames) {
    const value = object[name];
    if (value && typeof value === "object") {
      deepFreeze(value);
    }
  }
  return Object.freeze(object);
};
var getColumnsFromOptions = (options) => {
  let columns = options.dataSet === "Commodity" ? getCommodityColumns(options.editable) : getEmployeeColumns();
  if (options.visibleFields) {
    columns = columns.map((col) => {
      var _a3;
      return ((_a3 = options.visibleFields) == null ? void 0 : _a3.includes(col.field)) ? col : _extends({}, col, {
        hide: true
      });
    });
  }
  if (options.maxColumns) {
    columns = columns.slice(0, options.maxColumns);
  }
  return columns;
};
var getInitialState = (options, columns) => {
  var _a3;
  const columnVisibilityModel = {};
  columns.forEach((col) => {
    if (col.hide) {
      columnVisibilityModel[col.field] = false;
    }
  });
  const groupingField = (_a3 = options.treeData) == null ? void 0 : _a3.groupingField;
  if (groupingField) {
    columnVisibilityModel[groupingField] = false;
  }
  return {
    columns: {
      columnVisibilityModel
    }
  };
};
var useDemoData = (options) => {
  var _a3, _b2, _c;
  const [rowLength, setRowLength] = React84.useState(options.rowLength);
  const [index, setIndex] = React84.useState(0);
  const [loading, setLoading] = React84.useState(true);
  const columns = React84.useMemo(() => {
    return getColumnsFromOptions({
      dataSet: options.dataSet,
      editable: options.editable,
      maxColumns: options.maxColumns,
      visibleFields: options.visibleFields
    });
  }, [options.dataSet, options.editable, options.maxColumns, options.visibleFields]);
  const [data, setData] = React84.useState(() => {
    return addTreeDataOptionsToDemoData({
      columns,
      rows: [],
      initialState: getInitialState(options, columns)
    }, options.treeData);
  });
  React84.useEffect(() => {
    const cacheKey = `${options.dataSet}-${rowLength}-${index}-${options.maxColumns}`;
    if (dataCache.has(cacheKey)) {
      const newData = dataCache.get(cacheKey);
      setData(newData);
      setLoading(false);
      return void 0;
    }
    let active = true;
    (async () => {
      var _a4, _b3, _c2;
      setLoading(true);
      let newData;
      if (rowLength > 1e3) {
        newData = await getRealGridData(1e3, columns);
        newData = await extrapolateSeed(rowLength, newData);
      } else {
        newData = await getRealGridData(rowLength, columns);
      }
      if (!active) {
        return;
      }
      newData = addTreeDataOptionsToDemoData(newData, {
        maxDepth: (_a4 = options.treeData) == null ? void 0 : _a4.maxDepth,
        groupingField: (_b3 = options.treeData) == null ? void 0 : _b3.groupingField,
        averageChildren: (_c2 = options.treeData) == null ? void 0 : _c2.averageChildren
      });
      if (true) {
        deepFreeze(newData);
      }
      dataCache.set(cacheKey, newData);
      setData(newData);
      setLoading(false);
    })();
    return () => {
      active = false;
    };
  }, [rowLength, options.dataSet, options.maxColumns, (_a3 = options.treeData) == null ? void 0 : _a3.maxDepth, (_b2 = options.treeData) == null ? void 0 : _b2.groupingField, (_c = options.treeData) == null ? void 0 : _c.averageChildren, index, columns]);
  return {
    data,
    loading,
    setRowLength,
    loadNewData: () => {
      setIndex((oldIndex) => oldIndex + 1);
    }
  };
};

// node_modules/@mui/x-data-grid-generator/hooks/useBasicDemoData.js
var React85 = __toESM(require_react());
var useBasicDemoData = (nbRows, nbCols) => {
  return React85.useMemo(() => getBasicGridData(nbRows, nbCols), [nbRows, nbCols]);
};

// node_modules/@mui/x-data-grid-generator/hooks/useMovieData.js
var currencyFormatter2 = new Intl.NumberFormat("en-US", {
  style: "currency",
  currency: "USD",
  minimumFractionDigits: 0,
  maximumFractionDigits: 0
});
var COLUMNS = [{
  field: "title",
  headerName: "Title",
  width: 200,
  groupable: false
}, {
  field: "gross",
  headerName: "Gross",
  type: "number",
  width: 150,
  groupable: false,
  valueFormatter: (value) => {
    if (!value) {
      return "";
    }
    return currencyFormatter2.format(value);
  }
}, {
  field: "company",
  headerName: "Company",
  width: 200
}, {
  field: "director",
  headerName: "Director",
  width: 200
}, {
  field: "year",
  headerName: "Year",
  type: "number",
  valueFormatter: (value) => typeof value === "number" ? `${value}` : "",
  availableAggregationFunctions: ["max", "min"]
}, {
  field: "cinematicUniverse",
  headerName: "Cinematic Universe",
  width: 220
}];
var ROWS = [{
  id: 0,
  title: "Avatar",
  gross: 2847246203,
  budget: 237e6,
  director: "James Cameron",
  company: "20th Century Fox",
  year: 2009,
  imdbRating: 7.9,
  composer: {
    name: "James Horner"
  }
}, {
  id: 1,
  title: "Avengers: Endgame",
  gross: 2797501328,
  budget: 356e6,
  director: "Anthony & Joe Russo",
  company: "Disney Studios",
  year: 2019,
  imdbRating: 8.4,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Alan Silvestri"
  }
}, {
  id: 2,
  title: "Titanic",
  gross: 2187425379,
  budget: 2e8,
  director: "James Cameron",
  company: "20th Century Fox",
  year: 1997,
  imdbRating: 7.9,
  composer: {
    name: "James Horner"
  }
}, {
  id: 3,
  title: "Star Wars: The Force Awakens",
  gross: 2068223624,
  budget: 306e6,
  director: "J. J. Abrams",
  company: "Disney Studios",
  year: 2015,
  imdbRating: 7.9,
  cinematicUniverse: "Star Wars",
  composer: {
    name: "John Williams"
  }
}, {
  id: 4,
  title: "Avengers: Infinity War",
  gross: 2048359754,
  budget: 321e6,
  director: "Anthony & Joe Russo",
  company: "Disney Studios",
  year: 2018,
  imdbRating: 8.5,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Alan Silvestri"
  }
}, {
  id: 5,
  title: "Spider-Man: No Way Home",
  gross: 1892768346,
  budget: 2e8,
  director: "Jon Watts",
  company: "Disney Studios",
  year: 2021,
  imdbRating: 8.3,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Michael Giacchino"
  }
}, {
  id: 6,
  title: "Jurassic World",
  gross: 1671713208,
  budget: 15e7,
  director: "Colin Trevorrow",
  company: "Universal Pictures",
  year: 2015,
  imdbRating: 7,
  cinematicUniverse: "Jurassic Park",
  composer: {
    name: "Michael Giacchino"
  }
}, {
  id: 7,
  title: "The Lion King",
  gross: 1656943394,
  budget: 26e7,
  director: "Jon Favreau",
  company: "Disney Studios",
  year: 2019,
  imdbRating: 6.9,
  composer: {
    name: "Hans Zimmer"
  }
}, {
  id: 8,
  title: "The Avengers",
  gross: 1518812988,
  budget: 22e7,
  director: "Joss Whedon",
  company: "Disney Studios",
  year: 2012,
  imdbRating: 8.1,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Alan Silvestri"
  }
}, {
  id: 9,
  title: "Furious 7",
  gross: 1516045911,
  budget: 19e7,
  director: "James Wan",
  company: "Universal Pictures",
  year: 2015,
  imdbRating: 7.2,
  cinematicUniverse: "Fast & Furious",
  composer: {
    name: "Brian Tyler"
  }
}, {
  id: 10,
  title: "Frozen II",
  gross: 1450026933,
  budget: 15e7,
  director: "Chris Buck & Jennifer Lee",
  company: "Disney Studios",
  year: 2019,
  imdbRating: 6.8,
  cinematicUniverse: "Frozen",
  composer: {
    name: "Christophe Beck"
  }
}, {
  id: 11,
  title: "Avengers: Age of Ultron",
  gross: 1402804868,
  budget: 28e7,
  director: "Joss Whedon",
  company: "Disney Studios",
  year: 2015,
  imdbRating: 7.3,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Danny Elfman"
  }
}, {
  id: 12,
  title: "Black Panther",
  gross: 1347280838,
  budget: 2e8,
  director: "Ryan Coogler",
  company: "Disney Studios",
  year: 2018,
  imdbRating: 7.3,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Ludwig Göransson"
  }
}, {
  id: 13,
  title: "Harry Potter and the Deathly Hallows – Part 2",
  gross: 1342025430,
  budget: 125e6,
  director: "David Yates",
  company: "Warner Bros. Pictures",
  year: 2011,
  imdbRating: 8.2,
  cinematicUniverse: "Harry Potter",
  composer: {
    name: "Alexandre Desplat"
  }
}, {
  id: 14,
  title: "Star Wars: The Last Jedi",
  gross: 1332539889,
  budget: 317e6,
  director: "Rian Johnson",
  company: "Disney Studios",
  year: 2017,
  imdbRating: 6.9,
  cinematicUniverse: "Star Wars",
  composer: {
    name: "John Williams"
  }
}, {
  id: 15,
  title: "Jurassic World: Fallen Kingdom",
  gross: 1309484461,
  budget: 17e7,
  director: "J. A. Bayona",
  company: "Universal Pictures",
  year: 2018,
  cinematicUniverse: "Jurassic Park",
  imdbRating: 6.2,
  composer: {
    name: "Michael Giacchino"
  }
}, {
  id: 16,
  title: "Frozen",
  gross: 129e7,
  budget: 15e7,
  director: "Chris Buck & Jennifer Lee",
  company: "Disney Studios",
  year: 2013,
  imdbRating: 7.5,
  cinematicUniverse: "Frozen",
  composer: {
    name: "Christophe Beck"
  }
}, {
  id: 17,
  title: "Beauty and the Beast",
  gross: 1263521136,
  budget: 16e7,
  director: "Bill Condon",
  company: "Disney Studios",
  year: 2017,
  imdbRating: 7.1,
  composer: {
    name: "Alan Menken"
  }
}, {
  id: 18,
  title: "Incredibles 2",
  gross: 1242805359,
  budget: 2e8,
  director: "Brad Bird",
  company: "Disney Studios",
  year: 2018,
  imdbRating: 7.6,
  composer: {
    name: "Michael Giacchino"
  }
}, {
  id: 19,
  title: "The Fate of the Furious",
  gross: 1238764765,
  budget: 25e7,
  director: "F. Gary Gray",
  company: "Universal Pictures",
  year: 2017,
  imdbRating: 6.6,
  cinematicUniverse: "Fast & Furious",
  composer: {
    name: "Brian Tyler"
  }
}, {
  id: 20,
  title: "Iron Man 3",
  gross: 1214811252,
  budget: 2e8,
  director: "Shane Black",
  company: "Disney Studios",
  year: 2013,
  imdbRating: 7.2,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Brian Tyler"
  }
}, {
  id: 21,
  title: "Minions",
  gross: 1159398397,
  budget: 74e6,
  director: "Pierre Coffin & Kyle Balda",
  company: "Universal Pictures",
  year: 2015,
  imdbRating: 6.4,
  composer: {
    name: "Heitor Pereira"
  }
}, {
  id: 22,
  title: "Captain America: Civil War",
  gross: 1153329473,
  budget: 25e7,
  director: "Anthony & Joe Russo",
  company: "Disney Studios",
  year: 2016,
  imdbRating: 7.8,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Henry Jackman"
  }
}, {
  id: 23,
  title: "Aquaman",
  gross: 1148485886,
  budget: 16e7,
  director: "James Wan",
  company: "Warner Bros. Pictures",
  year: 2018,
  imdbRating: 6.8,
  cinematicUniverse: "DC Cinematic Universe",
  composer: {
    name: "Rupert Gregson-Williams"
  }
}, {
  id: 24,
  title: "The Lord of the Rings: The Return of the King",
  gross: 1146030912,
  budget: 94e6,
  director: "Peter Jackson",
  company: "New Line Cinema",
  year: 2003,
  imdbRating: 9,
  cinematicUniverse: "The Lord of the Rings",
  composer: {
    name: "Howard Shore"
  }
}, {
  id: 25,
  title: "Spider-Man: Far From Home",
  gross: 1131927996,
  budget: 16e7,
  director: "Jon Watts",
  company: "Disney Studios",
  year: 2019,
  imdbRating: 7.4,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Michael Giacchino"
  }
}, {
  id: 26,
  title: "Captain Marvel",
  gross: 1128274794,
  budget: 152e6,
  director: "Anna Boden & Ryan Fleck",
  company: "Disney Studios",
  year: 2019,
  imdbRating: 6.8,
  cinematicUniverse: "Marvel Cinematic Universe",
  composer: {
    name: "Pinar Toprak"
  }
}, {
  id: 27,
  title: "Transformers: Dark of the Moon",
  gross: 1123794079,
  budget: 195e6,
  director: "Michael Bay",
  company: "Paramount Pictures",
  year: 2011,
  imdbRating: 6.2,
  cinematicUniverse: "Transformers",
  composer: {
    name: "Steve Jablonsky"
  }
}, {
  id: 28,
  title: "Skyfall",
  gross: 1108561013,
  budget: 2e8,
  director: "Sam Mendes",
  company: "20th Century Fox",
  year: 2012,
  imdbRating: 7.8,
  cinematicUniverse: "James Bond",
  composer: {
    name: "Thomas Newman"
  }
}, {
  id: 29,
  title: "Transformers: Age of Extinction",
  gross: 1104054072,
  budget: 21e7,
  director: "Michael Bay",
  company: "Paramount Pictures",
  year: 2014,
  imdbRating: 5.6,
  cinematicUniverse: "Transformers",
  composer: {
    name: "Steve Jablonsky"
  }
}, {
  id: 30,
  title: "The Dark Knight Rises",
  gross: 1081142612,
  budget: 25e7,
  director: "Christopher Nolan",
  company: "Warner Bros. Pictures",
  year: 2012,
  imdbRating: 8.4,
  cinematicUniverse: "Batman",
  composer: {
    name: "Hans Zimmer"
  }
}, {
  id: 31,
  title: "Joker",
  gross: 1074251311,
  budget: 55e6,
  director: "Todd Phillips",
  company: "Warner Bros. Pictures",
  year: 2019,
  imdbRating: 8.4,
  cinematicUniverse: "Batman",
  composer: {
    name: "Hildur Guðnadóttir"
  }
}, {
  id: 32,
  title: "Star Wars: The Rise of Skywalker",
  gross: 1074144248,
  budget: 275e6,
  director: "J. J. Abrams",
  company: "Disney Studios",
  year: 2019,
  imdbRating: 6.5,
  cinematicUniverse: "Star Wars",
  composer: {
    name: "John Williams"
  }
}, {
  id: 33,
  title: "Toy Story 4",
  gross: 1073394593,
  budget: 2e8,
  director: "Josh Cooley",
  company: "Disney Studios",
  year: 2019,
  imdbRating: 7.7,
  cinematicUniverse: "Toy Story",
  composer: {
    name: "Randy Newman"
  }
}, {
  id: 34,
  title: "Toy Story 3",
  gross: 1066969703,
  budget: 2e8,
  director: "Lee Unkrich",
  company: "Disney Studios",
  year: 2010,
  imdbRating: 8.3,
  cinematicUniverse: "Toy Story",
  composer: {
    name: "Randy Newman"
  }
}];
var getMovieColumns = () => COLUMNS;
var getMovieRows = () => ROWS;
var useMovieData = () => {
  return {
    rows: ROWS,
    columns: COLUMNS
  };
};

// node_modules/@mui/x-data-grid-generator/hooks/useQuery.js
var React86 = __toESM(require_react());

// node_modules/@mui/x-data-grid-generator/hooks/serverUtils.js
var disableDelay = typeof DISABLE_CHANCE_RANDOM !== "undefined" && DISABLE_CHANCE_RANDOM;
var DEFAULT_SERVER_OPTIONS = {
  minDelay: disableDelay ? 0 : 100,
  maxDelay: disableDelay ? 0 : 300,
  useCursorPagination: true
};
var apiRef = {};
var simplifiedValueGetter = (field, colDef) => (row) => {
  var _a3;
  return ((_a3 = colDef.valueGetter) == null ? void 0 : _a3.call(colDef, row[row.id], row, colDef, apiRef)) || row[field];
};
var getRowComparator = (sortModel, columnsWithDefaultColDef) => {
  if (!sortModel) {
    const comparator2 = () => 0;
    return comparator2;
  }
  const sortOperators = sortModel.map((sortItem) => {
    const columnField = sortItem.field;
    const colDef = columnsWithDefaultColDef.find(({
      field
    }) => field === columnField);
    return _extends({}, sortItem, {
      valueGetter: simplifiedValueGetter(columnField, colDef),
      sortComparator: colDef.sortComparator
    });
  });
  const comparator = (row1, row2) => sortOperators.reduce((acc, {
    valueGetter,
    sort,
    sortComparator
  }) => {
    if (acc !== 0) {
      return acc;
    }
    const v1 = valueGetter(row1);
    const v2 = valueGetter(row2);
    return sort === "desc" ? -1 * sortComparator(v1, v2) : sortComparator(v1, v2);
  }, 0);
  return comparator;
};
var buildQuickFilterApplier = (filterModel, columns) => {
  var _a3;
  const quickFilterValues = ((_a3 = filterModel.quickFilterValues) == null ? void 0 : _a3.filter(Boolean)) ?? [];
  if (quickFilterValues.length === 0) {
    return null;
  }
  const appliersPerField = [];
  const stubApiRef = {
    current: {
      getRowFormattedValue: (row, c) => {
        const field = c.field;
        return row[field];
      }
    }
  };
  columns.forEach((column) => {
    const getApplyQuickFilterFn = column == null ? void 0 : column.getApplyQuickFilterFn;
    if (getApplyQuickFilterFn) {
      appliersPerField.push({
        column,
        appliers: quickFilterValues.map((quickFilterValue) => {
          return {
            fn: getApplyQuickFilterFn(quickFilterValue, column, stubApiRef)
          };
        })
      });
    }
  });
  return function isRowMatchingQuickFilter(row, shouldApplyFilter) {
    const result = {};
    outer: for (let v = 0; v < quickFilterValues.length; v += 1) {
      const filterValue = quickFilterValues[v];
      for (let i2 = 0; i2 < appliersPerField.length; i2 += 1) {
        const {
          column,
          appliers
        } = appliersPerField[i2];
        const {
          field
        } = column;
        if (shouldApplyFilter && !shouldApplyFilter(field)) {
          continue;
        }
        const applier = appliers[v];
        const value = row[field];
        if (applier.fn === null) {
          continue;
        }
        const isMatching = applier.fn(value, row, column, stubApiRef);
        if (isMatching) {
          result[filterValue] = true;
          continue outer;
        }
      }
      result[filterValue] = false;
    }
    return result;
  };
};
var getQuicklyFilteredRows = (rows, filterModel, columnsWithDefaultColDef) => {
  var _a3;
  if (filterModel === void 0 || ((_a3 = filterModel.quickFilterValues) == null ? void 0 : _a3.length) === 0) {
    return rows;
  }
  const isRowMatchingQuickFilter = buildQuickFilterApplier(filterModel, columnsWithDefaultColDef);
  if (isRowMatchingQuickFilter) {
    return rows.filter((row) => {
      const result = isRowMatchingQuickFilter(row);
      return filterModel.quickFilterLogicOperator === GridLogicOperator.And ? Object.values(result).every(Boolean) : Object.values(result).some(Boolean);
    });
  }
  return rows;
};
var getFilteredRows = (rows, filterModel, columnsWithDefaultColDef) => {
  if (filterModel === void 0 || filterModel.items.length === 0) {
    return rows;
  }
  const valueGetters = filterModel.items.map(({
    field
  }) => simplifiedValueGetter(field, columnsWithDefaultColDef.find((column) => column.field === field)));
  const filterFunctions = filterModel.items.map((filterItem) => {
    var _a3;
    const {
      field,
      operator
    } = filterItem;
    const colDef = columnsWithDefaultColDef.find((column) => column.field === field);
    if (!colDef.filterOperators) {
      throw new Error(`MUI: No filter operator found for column '${field}'.`);
    }
    const filterOperator = colDef.filterOperators.find(({
      value
    }) => operator === value);
    let parsedValue = filterItem.value;
    if (colDef.valueParser) {
      const parser = colDef.valueParser;
      parsedValue = Array.isArray(filterItem.value) ? (_a3 = filterItem.value) == null ? void 0 : _a3.map((x) => parser(x, {}, colDef, apiRef)) : parser(filterItem.value, {}, colDef, apiRef);
    }
    return filterOperator.getApplyFilterFn({
      filterItem,
      value: parsedValue
    }, colDef);
  });
  if (filterModel.logicOperator === GridLogicOperator.Or) {
    return rows.filter((row) => filterModel.items.some((_, index) => {
      const value = valueGetters[index](row);
      return filterFunctions[index] === null ? true : filterFunctions[index](value);
    }));
  }
  return rows.filter((row) => filterModel.items.every((_, index) => {
    const value = valueGetters[index](row);
    return filterFunctions[index] === null ? true : filterFunctions[index](value);
  }));
};
var loadServerRows = (rows, queryOptions, serverOptions, columnsWithDefaultColDef) => {
  const {
    minDelay = 100,
    maxDelay = 300,
    useCursorPagination
  } = serverOptions;
  if (maxDelay < minDelay) {
    throw new Error("serverOptions.minDelay is larger than serverOptions.maxDelay ");
  }
  const delay = randomInt(minDelay, maxDelay);
  const {
    cursor,
    page = 0,
    pageSize
  } = queryOptions;
  let nextCursor;
  let firstRowIndex;
  let lastRowIndex;
  let filteredRows = getFilteredRows(rows, queryOptions.filterModel, columnsWithDefaultColDef);
  const rowComparator = getRowComparator(queryOptions.sortModel, columnsWithDefaultColDef);
  filteredRows = [...filteredRows].sort(rowComparator);
  const totalRowCount = filteredRows.length;
  if (!pageSize) {
    firstRowIndex = 0;
    lastRowIndex = filteredRows.length;
  } else if (useCursorPagination) {
    firstRowIndex = cursor ? filteredRows.findIndex(({
      id
    }) => id === cursor) : 0;
    firstRowIndex = Math.max(firstRowIndex, 0);
    lastRowIndex = firstRowIndex + pageSize;
    nextCursor = lastRowIndex >= filteredRows.length ? void 0 : filteredRows[lastRowIndex].id;
  } else {
    firstRowIndex = page * pageSize;
    lastRowIndex = (page + 1) * pageSize;
  }
  const hasNextPage = lastRowIndex < filteredRows.length - 1;
  const response = {
    returnedRows: filteredRows.slice(firstRowIndex, lastRowIndex),
    hasNextPage,
    nextCursor,
    totalRowCount
  };
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(response);
    }, delay);
  });
};
var findTreeDataRowChildren = (allRows, parentPath, pathKey = "path", depth = 1, rowQualifier) => {
  const parentDepth = parentPath.length;
  const children = [];
  for (let i2 = 0; i2 < allRows.length; i2 += 1) {
    const row = allRows[i2];
    const rowPath = row[pathKey];
    if (!rowPath) {
      continue;
    }
    if ((depth < 0 && rowPath.length > parentDepth || rowPath.length === parentDepth + depth) && parentPath.every((value, index) => value === rowPath[index])) {
      if (!rowQualifier || rowQualifier(row)) {
        children.push(row);
      }
    }
  }
  return children;
};
var getTreeDataFilteredRows = (rows, filterModel, columnsWithDefaultColDef) => {
  var _a3;
  let filteredRows = [...rows];
  if (filterModel && ((_a3 = filterModel.quickFilterValues) == null ? void 0 : _a3.length) > 0) {
    filteredRows = getQuicklyFilteredRows(rows, filterModel, columnsWithDefaultColDef);
  }
  if (((filterModel == null ? void 0 : filterModel.items.length) ?? 0) > 0) {
    filteredRows = getFilteredRows(filteredRows, filterModel, columnsWithDefaultColDef);
  }
  if (filteredRows.length === rows.length || filteredRows.length === 0) {
    return filteredRows;
  }
  const pathsToIndexesMap = /* @__PURE__ */ new Map();
  rows.forEach((row, index) => {
    pathsToIndexesMap.set(row.path.join(","), index);
  });
  const includedPaths = /* @__PURE__ */ new Set();
  filteredRows.forEach((row) => {
    includedPaths.add(row.path.join(","));
  });
  const missingChildren = [];
  filteredRows.forEach((row) => {
    const path = row.path;
    if (path) {
      const children = findTreeDataRowChildren(rows, path, "path", -1);
      children.forEach((child) => {
        const subPath = child.path.join(",");
        if (!includedPaths.has(subPath)) {
          missingChildren.push(child);
        }
      });
    }
  });
  filteredRows = missingChildren.concat(filteredRows);
  const missingParents = [];
  filteredRows.forEach((row) => {
    const path = row.path;
    if (path) {
      includedPaths.add(path.join(","));
      for (let i2 = 0; i2 < path.length - 1; i2 += 1) {
        const subPath = path.slice(0, i2 + 1).join(",");
        if (!includedPaths.has(subPath)) {
          const index = pathsToIndexesMap.get(subPath);
          if (index !== void 0) {
            missingParents.push(rows[index]);
            includedPaths.add(subPath);
          }
        }
      }
    }
  });
  return missingParents.concat(filteredRows);
};
var processTreeDataRows = (rows, queryOptions, serverOptions, columnsWithDefaultColDef) => {
  const {
    minDelay = 100,
    maxDelay = 300
  } = serverOptions;
  const pathKey = "path";
  if (maxDelay < minDelay) {
    throw new Error("serverOptions.minDelay is larger than serverOptions.maxDelay ");
  }
  if (queryOptions.groupKeys == null) {
    throw new Error("serverOptions.groupKeys must be defined to compute tree data ");
  }
  const delay = randomInt(minDelay, maxDelay);
  const filteredRows = getTreeDataFilteredRows(rows, queryOptions.filterModel, columnsWithDefaultColDef);
  const rootRowCount = findTreeDataRowChildren(filteredRows, []).length;
  const childRows = findTreeDataRowChildren(filteredRows, queryOptions.groupKeys);
  let childRowsWithDescendantCounts = childRows.map((row) => {
    const descendants = findTreeDataRowChildren(filteredRows, row[pathKey], pathKey, -1);
    const descendantCount = descendants.length;
    return _extends({}, row, {
      descendantCount
    });
  });
  if (queryOptions.sortModel) {
    const rowComparator = getRowComparator(queryOptions.sortModel, columnsWithDefaultColDef);
    childRowsWithDescendantCounts = [...childRowsWithDescendantCounts].sort(rowComparator);
  }
  if (queryOptions.paginationModel && queryOptions.groupKeys.length === 0) {
    const {
      pageSize,
      page
    } = queryOptions.paginationModel;
    if (pageSize < childRowsWithDescendantCounts.length) {
      childRowsWithDescendantCounts = childRowsWithDescendantCounts.slice(page * pageSize, (page + 1) * pageSize);
    }
  }
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        rows: childRowsWithDescendantCounts,
        rootRowCount
      });
    }, delay);
  });
};
var processRowGroupingRows = (rows, queryOptions, serverOptions, columnsWithDefaultColDef) => {
  const {
    minDelay = 100,
    maxDelay = 300
  } = serverOptions;
  const pathKey = "path";
  if (maxDelay < minDelay) {
    throw new Error("serverOptions.minDelay is larger than serverOptions.maxDelay ");
  }
  if (queryOptions.groupKeys == null) {
    throw new Error("serverOptions.groupKeys must be defined to compute row grouping data");
  }
  if (queryOptions.groupFields == null) {
    throw new Error("serverOptions.groupFields must be defined to compute row grouping data");
  }
  const delay = randomInt(minDelay, maxDelay);
  const pathsToAutogenerate = /* @__PURE__ */ new Set();
  let rowsWithPaths = rows;
  const rowsWithMissingGroups = [];
  const groupFields = queryOptions.groupFields;
  if (groupFields.length > 0) {
    rowsWithPaths = rows.reduce((acc, row) => {
      const partialPath = groupFields.map((field) => String(row[field]));
      for (let index = 0; index < partialPath.length; index += 1) {
        const value = partialPath[index];
        if (value === void 0) {
          if (index === 0) {
            rowsWithMissingGroups.push(_extends({}, row, {
              group: false
            }));
          }
          return acc;
        }
        const parentPath = partialPath.slice(0, index + 1);
        const strigifiedPath = parentPath.join(",");
        if (!pathsToAutogenerate.has(strigifiedPath)) {
          pathsToAutogenerate.add(strigifiedPath);
        }
      }
      acc.push(_extends({}, row, {
        path: [...partialPath, ""]
      }));
      return acc;
    }, []);
  } else {
    rowsWithPaths = rows.map((row) => _extends({}, row, {
      path: [""]
    }));
  }
  const autogeneratedRows = Array.from(pathsToAutogenerate).map((path) => {
    const pathArray = path.split(",");
    return {
      id: `auto-generated-parent-${pathArray.join("-")}`,
      path: pathArray.slice(0, pathArray.length),
      group: pathArray.slice(-1)[0]
    };
  });
  const filteredRows = getTreeDataFilteredRows([...autogeneratedRows, ...rowsWithPaths, ...rowsWithMissingGroups], queryOptions.filterModel, columnsWithDefaultColDef);
  const rootRows = findTreeDataRowChildren(filteredRows, []);
  const rootRowCount = rootRows.length;
  let filteredRowsWithMissingGroups = [];
  let childRows = rootRows;
  if (queryOptions.groupKeys.length === 0) {
    filteredRowsWithMissingGroups = filteredRows.filter(({
      group
    }) => group === false);
  } else {
    childRows = findTreeDataRowChildren(filteredRows, queryOptions.groupKeys);
  }
  let childRowsWithDescendantCounts = childRows.map((row) => {
    const descendants = findTreeDataRowChildren(filteredRows, row[pathKey], pathKey, -1, ({
      id
    }) => typeof id !== "string" || !id.startsWith("auto-generated-parent-"));
    const descendantCount = descendants.length;
    return _extends({}, row, {
      descendantCount
    });
  });
  if (queryOptions.sortModel) {
    const rowComparator = getRowComparator(queryOptions.sortModel, columnsWithDefaultColDef);
    const sortedMissingGroups = [...filteredRowsWithMissingGroups].sort(rowComparator);
    const sortedChildRows = [...childRowsWithDescendantCounts].sort(rowComparator);
    childRowsWithDescendantCounts = [...sortedMissingGroups, ...sortedChildRows];
  }
  if (queryOptions.paginationModel && queryOptions.groupKeys.length === 0) {
    const {
      pageSize,
      page
    } = queryOptions.paginationModel;
    if (pageSize < childRowsWithDescendantCounts.length) {
      childRowsWithDescendantCounts = childRowsWithDescendantCounts.slice(page * pageSize, (page + 1) * pageSize);
    }
  }
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        rows: childRowsWithDescendantCounts,
        rootRowCount
      });
    }, delay);
  });
};

// node_modules/@mui/x-data-grid-generator/hooks/useQuery.js
var DEFAULT_DATASET_OPTIONS = {
  dataSet: "Commodity",
  rowLength: 100,
  maxColumns: 6
};
var createFakeServer = (dataSetOptions, serverOptions) => {
  const dataSetOptionsWithDefault = _extends({}, DEFAULT_DATASET_OPTIONS, dataSetOptions);
  const serverOptionsWithDefault = _extends({}, DEFAULT_SERVER_OPTIONS, serverOptions);
  const columns = getColumnsFromOptions(dataSetOptionsWithDefault);
  const initialState = getInitialState(dataSetOptionsWithDefault, columns);
  const defaultColDef2 = getGridDefaultColumnTypes();
  const columnsWithDefaultColDef = columns.map((column) => _extends({}, defaultColDef2[column.type || "string"], column));
  const useQuery = (queryOptions) => {
    const {
      data: {
        rows
      },
      loading: dataGenerationIsLoading
    } = useDemoData(dataSetOptionsWithDefault);
    const queryOptionsRef = React86.useRef(queryOptions);
    const [response, setResponse] = React86.useState({
      pageInfo: {},
      rows: []
    });
    const [isLoading, setIsLoading] = React86.useState(dataGenerationIsLoading);
    React86.useEffect(() => {
      if (dataGenerationIsLoading) {
        return () => {
        };
      }
      queryOptionsRef.current = queryOptions;
      let active = true;
      setIsLoading(true);
      setResponse((prev) => Object.keys(prev.pageInfo).length === 0 ? prev : _extends({}, prev, {
        pageInfo: {}
      }));
      (async function fetchData() {
        const {
          returnedRows,
          nextCursor,
          totalRowCount,
          hasNextPage
        } = await loadServerRows(rows, queryOptions, serverOptionsWithDefault, columnsWithDefaultColDef);
        if (!active) {
          return;
        }
        const newRep = {
          rows: returnedRows,
          pageInfo: {
            totalRowCount,
            nextCursor,
            hasNextPage,
            pageSize: returnedRows.length
          }
        };
        setResponse((prev) => isDeepEqual(prev, newRep) ? prev : newRep);
        setIsLoading(false);
      })();
      return () => {
        active = false;
      };
    }, [dataGenerationIsLoading, queryOptions, rows]);
    const effectShouldStart = queryOptionsRef.current !== queryOptions;
    return _extends({
      isLoading: isLoading || effectShouldStart
    }, response);
  };
  return {
    columns,
    columnsWithDefaultColDef,
    initialState,
    useQuery
  };
};

// node_modules/@mui/x-data-grid-generator/hooks/useMockServer.js
var React87 = __toESM(require_react());
var dataCache2 = new LRUCache({
  max: 10,
  ttl: 60 * 5 * 1e3
  // 5 minutes
});
var BASE_URL = "https://mui.com/x/api/data-grid";
var GET_DEFAULT_DATASET_OPTIONS = (isRowGrouping) => ({
  dataSet: isRowGrouping ? "Movies" : "Commodity",
  rowLength: isRowGrouping ? getMovieRows().length : 100,
  maxColumns: 6
});
var getColumnsFromOptions2 = (options) => {
  let columns;
  switch (options.dataSet) {
    case "Commodity":
      columns = getCommodityColumns(options.editable);
      break;
    case "Employee":
      columns = getEmployeeColumns();
      break;
    case "Movies":
      columns = getMovieColumns();
      break;
    default:
      throw new Error("Unknown dataset");
  }
  if (options.visibleFields) {
    columns = columns.map((col) => {
      var _a3;
      return ((_a3 = options.visibleFields) == null ? void 0 : _a3.includes(col.field)) ? col : _extends({}, col, {
        hide: true
      });
    });
  }
  if (options.maxColumns) {
    columns = columns.slice(0, options.maxColumns);
  }
  return columns;
};
function decodeParams(url) {
  const params = new URL(url).searchParams;
  const decodedParams = {};
  const array = Array.from(params.entries());
  for (const [key, value] of array) {
    try {
      decodedParams[key] = JSON.parse(value);
    } catch {
      decodedParams[key] = value;
    }
  }
  return decodedParams;
}
var getInitialState2 = (columns, groupingField) => {
  const columnVisibilityModel = {};
  columns.forEach((col) => {
    if (col.hide) {
      columnVisibilityModel[col.field] = false;
    }
  });
  if (groupingField) {
    columnVisibilityModel[groupingField] = false;
  }
  return {
    columns: {
      columnVisibilityModel
    }
  };
};
var defaultColDef = getGridDefaultColumnTypes();
function sendEmptyResponse() {
  return new Promise((resolve) => {
    resolve({
      rows: [],
      rowCount: 0
    });
  });
}
var useMockServer = (dataSetOptions, serverOptions, shouldRequestsFail) => {
  var _a3, _b2, _c, _d, _e, _f, _g;
  const [data, setData] = React87.useState();
  const [index, setIndex] = React87.useState(0);
  const shouldRequestsFailRef = React87.useRef(shouldRequestsFail ?? false);
  React87.useEffect(() => {
    if (shouldRequestsFail !== void 0) {
      shouldRequestsFailRef.current = shouldRequestsFail;
    }
  }, [shouldRequestsFail]);
  const isRowGrouping = (dataSetOptions == null ? void 0 : dataSetOptions.rowGrouping) ?? false;
  const options = _extends({}, GET_DEFAULT_DATASET_OPTIONS(isRowGrouping), dataSetOptions);
  const isTreeData = ((_a3 = options.treeData) == null ? void 0 : _a3.groupingField) != null;
  const columns = React87.useMemo(() => {
    return getColumnsFromOptions2({
      dataSet: options.dataSet,
      editable: options.editable,
      maxColumns: options.maxColumns,
      visibleFields: options.visibleFields
    });
  }, [options.dataSet, options.editable, options.maxColumns, options.visibleFields]);
  const initialState = React87.useMemo(() => {
    var _a4;
    return getInitialState2(columns, (_a4 = options.treeData) == null ? void 0 : _a4.groupingField);
  }, [columns, (_b2 = options.treeData) == null ? void 0 : _b2.groupingField]);
  const columnsWithDefaultColDef = React87.useMemo(() => columns.map((column) => _extends({}, defaultColDef[column.type || "string"], column)), [columns]);
  const getGroupKey = React87.useMemo(() => {
    if (isTreeData) {
      return (row) => row[options.treeData.groupingField];
    }
    return void 0;
  }, [(_c = options.treeData) == null ? void 0 : _c.groupingField, isTreeData]);
  const getChildrenCount = React87.useMemo(() => {
    if (isTreeData) {
      return (row) => row.descendantCount;
    }
    return void 0;
  }, [isTreeData]);
  React87.useEffect(() => {
    const cacheKey = `${options.dataSet}-${options.rowLength}-${index}-${options.maxColumns}`;
    if (dataCache2.has(cacheKey)) {
      const newData = dataCache2.get(cacheKey);
      setData(newData);
      return void 0;
    }
    if (options.dataSet === "Movies") {
      const rowsData = {
        rows: getMovieRows(),
        columns
      };
      setData(rowsData);
      dataCache2.set(cacheKey, rowsData);
      return void 0;
    }
    let active = true;
    (async () => {
      var _a4, _b3, _c2;
      let rowData;
      const rowLength = options.rowLength;
      if (rowLength > 1e3) {
        rowData = await getRealGridData(1e3, columns);
        rowData = await extrapolateSeed(rowLength, rowData);
      } else {
        rowData = await getRealGridData(rowLength, columns);
      }
      if (!active) {
        return;
      }
      if (isTreeData) {
        rowData = addTreeDataOptionsToDemoData(rowData, {
          maxDepth: (_a4 = options.treeData) == null ? void 0 : _a4.maxDepth,
          groupingField: (_b3 = options.treeData) == null ? void 0 : _b3.groupingField,
          averageChildren: (_c2 = options.treeData) == null ? void 0 : _c2.averageChildren
        });
      }
      if (true) {
        deepFreeze(rowData);
      }
      dataCache2.set(cacheKey, rowData);
      setData(rowData);
    })();
    return () => {
      active = false;
    };
  }, [columns, isTreeData, options.rowLength, (_d = options.treeData) == null ? void 0 : _d.maxDepth, (_e = options.treeData) == null ? void 0 : _e.groupingField, (_f = options.treeData) == null ? void 0 : _f.averageChildren, options.dataSet, options.maxColumns, index]);
  const fetchRows = React87.useCallback(async (requestUrl) => {
    if (!requestUrl || !(data == null ? void 0 : data.rows)) {
      return sendEmptyResponse();
    }
    const params = decodeParams(requestUrl);
    const verbose = (serverOptions == null ? void 0 : serverOptions.verbose) ?? true;
    const print = console.info;
    if (verbose) {
      print("MUI X: DATASOURCE REQUEST", params);
    }
    let getRowsResponse;
    const serverOptionsWithDefault = {
      minDelay: (serverOptions == null ? void 0 : serverOptions.minDelay) ?? DEFAULT_SERVER_OPTIONS.minDelay,
      maxDelay: (serverOptions == null ? void 0 : serverOptions.maxDelay) ?? DEFAULT_SERVER_OPTIONS.maxDelay,
      useCursorPagination: (serverOptions == null ? void 0 : serverOptions.useCursorPagination) ?? DEFAULT_SERVER_OPTIONS.useCursorPagination
    };
    if (shouldRequestsFailRef.current) {
      const {
        minDelay,
        maxDelay
      } = serverOptionsWithDefault;
      const delay = randomInt(minDelay, maxDelay);
      return new Promise((_, reject) => {
        if (verbose) {
          print("MUI X: DATASOURCE REQUEST FAILURE", params);
        }
        setTimeout(() => reject(new Error("Could not fetch the data")), delay);
      });
    }
    if (isTreeData) {
      const {
        rows,
        rootRowCount
      } = await processTreeDataRows((data == null ? void 0 : data.rows) ?? [], params, serverOptionsWithDefault, columnsWithDefaultColDef);
      getRowsResponse = {
        rows: rows.slice().map((row) => _extends({}, row, {
          path: void 0
        })),
        rowCount: rootRowCount
      };
    } else if (isRowGrouping) {
      const {
        rows,
        rootRowCount
      } = await processRowGroupingRows((data == null ? void 0 : data.rows) ?? [], params, serverOptionsWithDefault, columnsWithDefaultColDef);
      getRowsResponse = {
        rows: rows.slice().map((row) => _extends({}, row, {
          path: void 0
        })),
        rowCount: rootRowCount
      };
    } else {
      const {
        returnedRows,
        nextCursor,
        totalRowCount
      } = await loadServerRows((data == null ? void 0 : data.rows) ?? [], _extends({}, params, params.paginationModel), serverOptionsWithDefault, columnsWithDefaultColDef);
      getRowsResponse = {
        rows: returnedRows,
        rowCount: totalRowCount,
        pageInfo: {
          nextCursor
        }
      };
    }
    return new Promise((resolve) => {
      if (verbose) {
        print("MUI X: DATASOURCE RESPONSE", params, getRowsResponse);
      }
      resolve(getRowsResponse);
    });
  }, [data, serverOptions == null ? void 0 : serverOptions.verbose, serverOptions == null ? void 0 : serverOptions.minDelay, serverOptions == null ? void 0 : serverOptions.maxDelay, serverOptions == null ? void 0 : serverOptions.useCursorPagination, isTreeData, columnsWithDefaultColDef, isRowGrouping]);
  return {
    columns: columnsWithDefaultColDef,
    initialState: options.dataSet === "Movies" ? {} : initialState,
    getGroupKey,
    getChildrenCount,
    fetchRows,
    loadNewData: () => {
      setIndex((oldIndex) => oldIndex + 1);
    },
    isReady: Boolean((_g = data == null ? void 0 : data.rows) == null ? void 0 : _g.length)
  };
};
export {
  BASE_URL,
  DemoLink,
  createFakeServer,
  currencyPairs,
  deepFreeze,
  extrapolateSeed,
  generateFilledQuantity,
  generateIsFilled,
  getBasicGridData,
  getColumnsFromOptions,
  getCommodityColumns,
  getEmployeeColumns,
  getInitialState,
  getRealGridData,
  loadServerRows,
  random,
  randomAddress,
  randomArrayItem,
  randomBoolean,
  randomBrokerId,
  randomCity,
  randomColor,
  randomCommodity,
  randomCompanyName,
  randomContractType,
  randomCountry,
  randomCreatedDate,
  randomCurrency,
  randomDate,
  randomDesk,
  randomEmail,
  randomFeeRate,
  randomId,
  randomIncoterm,
  randomInt,
  randomJobTitle,
  randomMaturityDate,
  randomName,
  randomPhoneNumber,
  randomPnL,
  randomPrice,
  randomQuantity,
  randomRate,
  randomRateType,
  randomRating,
  randomStatusOptions,
  randomTaxCode,
  randomTradeDate,
  randomTraderName,
  randomUnitPrice,
  randomUnitPriceCurrency,
  randomUpdatedDate,
  randomUrl,
  randomUserName,
  renderAvatar,
  renderCountry,
  renderEditCountry,
  renderEditCurrency,
  renderEditIncoterm,
  renderEditProgress,
  renderEditRating,
  renderEditStatus,
  renderEmail,
  renderIncoterm,
  renderLink,
  renderPnl,
  renderProgress,
  renderRating,
  renderStatus,
  renderTotalPrice,
  useBasicDemoData,
  useDemoData,
  useMockServer,
  useMovieData
};
/*! Bundled license information:

@mui/x-license/index.js:
  (**
   * @mui/x-license v7.26.0
   *
   * @license MUI X Commercial
   * This source code is licensed under the commercial license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/x-data-grid-generator/index.js:
  (**
   * @mui/x-data-grid-generator v7.27.0
   *
   * @license MUI X Commercial
   * This source code is licensed under the commercial license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=@mui_x-data-grid-generator.js.map
