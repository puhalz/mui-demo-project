{
  "version": 3,
  "sources": ["../../@toolpad/core/shared/Link.js", "../../@toolpad/core/shared/navigation.js"],
  "sourcesContent": ["import * as React from 'react';\nimport { RouterContext } from \"./context.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const Link = /*#__PURE__*/React.forwardRef(function Link(props, ref) {\n  const {\n    children,\n    href,\n    onClick,\n    history,\n    ...rest\n  } = props;\n  const routerContext = React.useContext(RouterContext);\n  const handleLinkClick = React.useMemo(() => {\n    if (!routerContext) {\n      return onClick;\n    }\n    return event => {\n      event.preventDefault();\n      const url = new URL(event.currentTarget.href);\n      routerContext.navigate(url.pathname, {\n        history\n      });\n      onClick?.(event);\n    };\n  }, [routerContext, onClick, history]);\n  return /*#__PURE__*/_jsx(\"a\", {\n    ref: ref,\n    href: href,\n    ...rest,\n    onClick: handleLinkClick,\n    children: children\n  });\n});", "import { pathToRegexp } from 'path-to-regexp';\nimport invariant from 'invariant';\nexport const getItemKind = item => item.kind ?? 'page';\nexport const isPageItem = item => getItemKind(item) === 'page';\nexport const getItemTitle = item => {\n  return isPageItem(item) ? item.title ?? item.segment ?? '' : item.title;\n};\nexport function getPageItemFullPath(basePath, navigationItem) {\n  return `${basePath}${basePath && !navigationItem.segment ? '' : '/'}${navigationItem.segment ?? ''}`;\n}\nexport function isPageItemSelected(navigationItem, basePath, pathname) {\n  return navigationItem.pattern ? pathToRegexp(`${basePath}/${navigationItem.pattern}`).test(pathname) : getPageItemFullPath(basePath, navigationItem) === pathname;\n}\nexport function hasSelectedNavigationChildren(navigationItem, basePath, pathname) {\n  if (isPageItem(navigationItem) && navigationItem.children) {\n    const navigationItemFullPath = getPageItemFullPath(basePath, navigationItem);\n    return navigationItem.children.some(nestedNavigationItem => {\n      if (!isPageItem(nestedNavigationItem)) {\n        return false;\n      }\n      if (nestedNavigationItem.children) {\n        return hasSelectedNavigationChildren(nestedNavigationItem, navigationItemFullPath, pathname);\n      }\n      return isPageItemSelected(nestedNavigationItem, navigationItemFullPath, pathname);\n    });\n  }\n  return false;\n}\n\n/**\n * Builds a map of navigation page items to their respective paths. This map is used to quickly\n * lookup the path of a navigation item. It will be cached for the lifetime of the navigation.\n */\nfunction buildItemToPathMap(navigation) {\n  const map = new Map();\n  const visit = (item, base) => {\n    if (isPageItem(item)) {\n      const path = `${base}${item.segment ? `/${item.segment}` : ''}` || '/';\n      map.set(item, path);\n      if (item.children) {\n        for (const child of item.children) {\n          visit(child, path);\n        }\n      }\n    }\n  };\n  for (const item of navigation) {\n    visit(item, '');\n  }\n  return map;\n}\nconst itemToPathMapCache = new WeakMap();\n\n/**\n * Gets the cached map of navigation page items to their respective paths.\n */\nfunction getItemToPathMap(navigation) {\n  let map = itemToPathMapCache.get(navigation);\n  if (!map) {\n    map = buildItemToPathMap(navigation);\n    itemToPathMapCache.set(navigation, map);\n  }\n  return map;\n}\n\n/**\n * Build a lookup map of paths to navigation items. This map is used to match paths against\n * to find the active page.\n */\nfunction buildItemLookup(navigation) {\n  const map = new Map();\n  const visit = item => {\n    if (isPageItem(item)) {\n      const path = getItemPath(navigation, item);\n      if (map.has(path)) {\n        console.warn(`Duplicate path in navigation: ${path}`);\n      }\n      map.set(path, item);\n      if (item.pattern) {\n        const basePath = item.segment ? path.slice(0, -item.segment.length) : path;\n        map.set(pathToRegexp(basePath + item.pattern), item);\n      }\n      if (item.children) {\n        for (const child of item.children) {\n          visit(child);\n        }\n      }\n    }\n  };\n  for (const item of navigation) {\n    visit(item);\n  }\n  return map;\n}\nconst itemLookupMapCache = new WeakMap();\nfunction getItemLookup(navigation) {\n  let map = itemLookupMapCache.get(navigation);\n  if (!map) {\n    map = buildItemLookup(navigation);\n    itemLookupMapCache.set(navigation, map);\n  }\n  return map;\n}\n\n/**\n * Matches a path against the navigation to find the active page. i.e. the page that should be\n * marked as selected in the navigation.\n */\nexport function matchPath(navigation, path) {\n  const lookup = getItemLookup(navigation);\n  for (const [key, item] of lookup.entries()) {\n    if (typeof key === 'string' && key === path) {\n      return item;\n    }\n    if (key instanceof RegExp && key.test(path)) {\n      return item;\n    }\n  }\n  return null;\n}\n\n/**\n * Gets the path for a specific navigation page item.\n */\nexport function getItemPath(navigation, item) {\n  const map = getItemToPathMap(navigation);\n  const path = map.get(item);\n  invariant(path, `Item not found in navigation: ${item.title}`);\n  return path;\n}"],
  "mappings": "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",
  "names": ["Link", "_jsx", "invariant"]
}
